{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./jsapp/xlform/src/view.utils.coffee","webpack:///./jsapp/xlform/src/model.choices.coffee","webpack:///./jsapp/xlform/src/csv.coffee","webpack:///./jsapp/xlform/src/model.survey.coffee","webpack:///./jsapp/xlform/src/view.rowDetail.SkipLogic.coffee","webpack:///./jsapp/xlform/src/model.surveyDetail.coffee","webpack:///./jsapp/js/assetUtils.ts","webpack:///./jsapp/xlform/src/model.row.coffee","webpack:///./jsapp/xlform/src/model.skipLogicParser.coffee","webpack:///./jsapp/xlform/src/model.validationLogicParserFactory.js","webpack:///./jsapp/xlform/src/model.validationLogicParser.coffee","webpack:///./jsapp/xlform/src/view.widgets.coffee","webpack:///./jsapp/xlform/src/model.inputDeserializer.coffee","webpack:///./jsapp/xlform/src/model.inputParser.coffee","webpack:///./jsapp/js/components/permissions/permConstants.es6","webpack:///./jsapp/js/constants.ts","webpack:///./jsapp/js/components/locking/lockingUtils.es6","webpack:///./jsapp/js/components/locking/lockingConstants.es6","webpack:///./jsapp/js/components/permissions/permConfig.ts","webpack:///./jsapp/js/libs/reflux-promise.js","webpack:///./jsapp/js/actions/permissions.es6","webpack:///./jsapp/js/actions/help.es6","webpack:///./jsapp/js/actions/library.es6","webpack:///./jsapp/js/actions/submissions.es6","webpack:///./jsapp/js/actions/mediaActions.es6","webpack:///./jsapp/js/actions/exportsActions.es6","webpack:///./jsapp/js/actions/dataShareActions.es6","webpack:///./jsapp/js/actions.es6","webpack:///./jsapp/xlform/src/_model.coffee","webpack:///./test/fixtures/xlformSurveys.coffee","webpack:///./jsapp/xlform/src/view.utils.validator.js","webpack:///./jsapp/xlform/src/model.rowDetailMixins.coffee","webpack:///./jsapp/xlform/src/mv.validationLogicHelpers.coffee","webpack:///./jsapp/xlform/src/model.rowDetail.validationLogic.coffee","webpack:///./jsapp/xlform/src/view.rowDetail.ValidationLogic.coffee","webpack:///./jsapp/xlform/src/model.surveyFragment.coffee","webpack:///./jsapp/xlform/src/model.rowDetail.coffee","webpack:///./jsapp/xlform/src/model.utils.markdownTable.coffee","webpack:///./jsapp/js/components/formBuilder/formBuilderUtils.es6","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./jsapp/js/utils.ts","webpack:///./jsapp/xlform/src/model.utils.coffee","webpack:///./jsapp/js/components/permissions/permParser.es6","webpack:///./jsapp/xlform/src/model.configs.coffee","webpack:///./jsapp/js/stores.es6","webpack:///./jsapp/js/components/submissions/submissionUtils.ts","webpack:///./jsapp/xlform/src/mv.skipLogicHelpers.coffee","webpack:///./jsapp/xlform/src/model.base.coffee","webpack:///./jsapp/js/dataInterface.es6","webpack:///./jsapp/xlform/src/model.aliases.coffee","webpack:///./test/index.js","webpack:///./test/helper/fauxChai.coffee","webpack:///./test/xlform/aliases.tests.coffee","webpack:///./test/xlform/choices.tests.coffee","webpack:///./test/xlform/csv.tests.coffee","webpack:///./test/xlform/deserializer.tests.coffee","webpack:///./jsapp/js/assetParserUtils.ts","webpack:///./test/xlform/group.tests.coffee","webpack:///./test/xlform/inputParser.tests.coffee","webpack:///./test/xlform/translations.tests.coffee","webpack:///./test/xlform/model.tests.coffee","webpack:///./test/xlform/survey.tests.coffee","webpack:///./test/xlform/utils.tests.coffee","webpack:///./jsapp/js/utils.tests.es6","webpack:///./jsapp/js/components/formBuilder/formBuilderUtils.tests.es6","webpack:///./jsapp/js/components/submissions/submissionUtils.mocks.es6","webpack:///./jsapp/js/components/submissions/submissionUtils.tests.es6","webpack:///./jsapp/js/assetUtils.mocks.es6","webpack:///./jsapp/js/assetUtils.tests.es6","webpack:///./jsapp/js/components/locking/lockingUtils.mocks.es6","webpack:///./jsapp/js/components/locking/lockingUtils.tests.es6","webpack:///./jsapp/js/components/permissions/permissionsMocks.es6","webpack:///./jsapp/js/components/permissions/permParser.tests.es6","webpack:///./jsapp/xlform/src/model.rowDetails.skipLogic.coffee"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","2","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","_","viewUtils","$div","enketoServer","Validator","normalizeEventName","eventName","regex","RegExp","replace","reorderElemsByData","selector","parent","dataAttribute","arr","parentEl","$","find","each","parentElement","Error","val","$el","detach","isNumber","appendTo","cleanStringify","atts","attArr","join","debugFrame","debugFrameStyle","position","width","height","bottom","left","overflow","zIndex","backgroundColor","showFn","txt","html","split","class","css","close","remove","launchQuestionLibrary","opts","wrap","text","click","enketoIframe","enketoPreviewUri","buildUrl","previewUrl","_loadConfigs","options","launch","console","log","append","src","load","fromCsv","surveyCsv","holder","previewServer","JSON","stringify","body","onError","args","error","ajax","url","method","complete","jqhr","status","response","responseJSON","unique_string","onSuccess","informative_message","responseText","statusText","title","choices","base","$modelUtils","Option","initialize","unset","destroy","choicelist","choicelist_cid","list","_parent","cid","survey","collection","trigger","getKeys","with_val","keys","toJSON","attributes","BaseModel","Options","model","BaseCollection","ChoiceList","context","idAttribute","summaryObj","getSurvey","getList","__cascadedList","_get_previous_linked_choice_list","cl","_get_last_linked_choice_list","prev","next","_get_first_linked_choice_list","_has_corresponding_row","_name","rows","_create_corresponding_row_data","full_path","_full_path_choice_filter","prevs","rows_data","build_row_data","curlist","label","type","choice_filter","compact","last","map","cl_name","next_list","create_corresponding_rows","_index","at","addRowAtIndex","row_data","getOptionKeys","option_key","option_keys","uniq","finalize","names","option","sluggify","preventDuplicates","lowerCase","lrstrip","characterLimit","incrementorPadding","validXmlTag","set","clone","json","assign","invoke","getNames","opt","ChoiceLists","add","txtid","getListNames","shorter","out","Csv","param","_isString","string","csv","toArray","arrayToObjects","columns","rowArray","_isArray","buildRowArray","obj","rowObjects","row","kind","rowObj","cell","column","addRow","colsChanged","toObjects","toObject","toArrays","toString","asCsvCellValue","settings","delimiter","_remove_extra_escape_chars","ss","test","outstr","fromStringArray","outpArr","fromArray","sort","headRow","indexOf","col","unshift","csvString","arrayToObject","sortByKey","includeSortByKey","sortByKeyI","sbKeyVal","removeTrailingNewlines","str","_parse_string","parse","strData","strDelimiter","_objPattern","arrMatches","exec","strMatchedDelimiter","strMatchedValue","parseFloat","isNaN","parsedMatch","SheetedCsv","_sheetIds","_sheets","parseSheetedCsv","osids","sheets","sheet","id","sheetId","contents","outp","cols","rowA","headRowStr","sheeted","shcsv","cb","orderedSheetIds","cell1","remaining","curSheet","shCsv","output","charCodeAt","substr","_nativeIsArray","Array","isArray","concat","callee","$base","$choices","$configs","$surveyFragment","$surveyDetail","$inputDeserializer","$inputParser","$markdownTable","LOCKING_PROFILES_PROP_NAME","Survey","addlOpts","_initialParams","Settings","enable_auto_name","sname","lockingProfiles","newRowDetails","defaultsForType","surveyDetails","SurveyDetails","loadSchema","surveyDetailsSchema","surveyDetailSchema","loadChoiceLists","hasBeenParsed","parseArr","typeList","importDetail","silent","importDefaults","warnings","errors","forEachRow","linkUp","linkUpChoiceLists","choiceKeys","overlapping_choice_keys","intersection","choiceList","insert_row","index","_isCloned","new_row","rowlist","name_detail","deduplicate","_ensure_row_list_is_copied","insertSurvey","targetGroupId","target","foundGroup","findRowByCid","includeGroups","index_incr","row_i","_insertRowInPlace","noDetach","toFlatJSON","spaces","isObject","values","flattened_choices","_c","extend","list_name","list_item","setManually","addlSheets","fn","export_relevant_values","includeGroupEnds","sd","shtName","logFn","a","tabs","logr","flat","pop","summarize","rowCount","hasGps","previous","parentRow","event","prepCols","exclude","isString","filter","flatten","toSsStructure","content","toCsvJson","oCols","oRows","addRowToORows","colJson","includeErrors","choicesCsvJson","lists","_getSubLists","item","clName","clAtts","toMarkdown","csvJsonToMarkdown","toCSV","SurveyFragment","csv_repr","_usingSurveyLoadCsv","_is_csv","_deserialized","deserialize","_parsed","md","sObj","mdSurveyStructureToObject","loadDict","baseSurvey","validation","auto_name","on","changing_form_title","sluggifyLabel","viewRowDetailSkipLogic","$viewWidgets","$skipLogicHelpers","SkipLogicCriterionBuilderView","events","render","uniqueId","criterion_delimiter","children","attr","addCriterion","evt","facade","view_factory","add_empty","deleteCriterion","modelId","$target","markChangedDelimSelector","Base","SkipLogicCriterion","question_picker_view","operator_picker_view","response_value_view","presenter","tagName","className","alreadyRendered","change_operator","change_response","mark_question_specified","is_specified","toggleClass","bind_question_picker","questionVal","$question_picker","disable_placeholder_option","e","change_question","bind_operator_picker","$operator_picker","select2","bind_response_value","bind_event","response_value_handler","$response_value","attach_operator","attach_to","attach_response","element","QuestionPicker","$firstChild","prop","DropDown","OperatorPicker","operators","minimumResultsForSearch","operator","symbol","parser_name","negated_label","show","_set_style","numValue","Number","absolute_value","Math","abs","abbreviated_label","parents","SkipLogicEmptyResponse","EmptyView","SkipLogicTextResponse","handler","TextBox","SkipLogicValidatingTextResponseView","setElement","$error_message","show_invalid_view","clear_invalid_view","$input","addClass","focus","removeClass","SkipLogicDropDownResponse","responses","models","handle_model_cid_change","off","SkipLogicViewFactory","create_question_picker","target_question","DropDownModel","set_options","selectableRows","getValue","create_operator_picker","question_type","operator_types","op_type","create_response_value_view","question","operator_type","response_type","create_criterion_view","create_criterion_builder_view","create_textarea","TextArea","create_button","Button","create_textbox","placeholder","create_label","Label","create_empty","SurveyDetail","parameters","schema","_forSurvey","_schema","detail","dtobj","cleanupTags","tags","tag","trim","getAssetOwnerDisplayName","username","session","currentAccount","getOrganizationDisplayString","asset","organization","getLanguageIndex","langString","foundIndex","summary","languages","forEach","language","getLanguagesDisplayString","getSectorDisplayString","sector","getCountryDisplayString","showLongName","country","getAssetDisplayName","emptyName","final","original","labels","empty","getQuestionOrChoiceDisplayName","questionOrChoice","translationIndex","$autoname","isLibraryAsset","assetType","block","template","getAssetIcon","asset_type","lock_any","has_deployment","deployment__active","access_types","includes","subscribed","isAssetPublic","permissions","shared","modifyDetails","modalType","LIBRARY_TEMPLATE","LIBRARY_COLLECTION","pageState","showModal","share","SHARING","assetid","uid","editLanguages","FORM_LANGUAGES","editTags","ASSET_TAGS","replaceForm","REPLACE_PROJECT","getSurveyFlatPaths","includeMeta","openedGroups","rowName","getRowName","groupsPath","$kuid","getTranslatedRowLabel","foundRowIndex","foundRow","rowIndex","getRowLabelAtIndex","possibleRow","isRowSpecialLabelHolder","mainRow","holderRow","mainRowName","holderRowName","note","select_one","renderQuestionTypeIcon","rowType","iconClassName","score","icon","rank","rowTypeAsQuestionType","createElement","getFlatQuestionsList","flatPaths","openedRepeatGroupsCount","isRequired","Boolean","required","path","hasRepatParent","isAssetPublicReady","count","isDiscoverableByAnonymous","perm","foundPerm","getPermissionByCodename","discover_asset","user","undefined","permission","isSelfOwned","owner__username","buildAssetUrl","assetUid","removeInvalidChars","String","Backbone","alertify","$utils","$rowDetail","readParameters","writeParameters","BaseRow","kls","ensureKuid","convertAttributesToRowDetails","isError","RowDetail","attributesArray","k","v","b","_order","isGroup","constructor","isInGroup","questions","limit","non_selectable","survey_arr","additionalSheets","toJSON2","outObj","hidden","isBoolean","boolOutputs","SimpleRow","simpleEnsureKuid","getTypeId","_isSelectQuestion","get_type","question_types","which","Model","RankRow","surv","ScoreRankMixin","_extendAll","rr","extend_to_row","isFunction","_begin_kuid","_end_json","end_json","_afterIterator","ctxt","addl","_toJSON","merge","r2","Row","_rankRows","rankRow","_rankLevels","_scoreRows","scoreRow","_scoreChoices","_beginEndKey","_additionalJson","__rows","_rowAttributeName","subrow","mrg","ctx","RankRows","Collection","RankMixin","rank_list_id","begin_xlsformrow","ScoreRow","ScoreRows","ScoreMixin","score_list_id_item","score_list_id","score_list","defaultsUnlessDefined","curTypeDefaults","defaults","newVals","vk","vv","_type","tpVal","typeDetail","select_from_list_name","processType","rd","newType","tpid","p2","p3","matchedList","rtp","lookupRowType","listName","typeStr","specifyChoice","orOtherOption","clname","newRowType","newRow","getAcceptedFiles","setAcceptedFiles","bodyAcceptString","setDetail","getParameters","setParameters","paramObject","paramString","_list","setList","listToSet","RowError","_error","xlfHideWarnings","what","$factory","equalityCriterionPattern","existenceCriterionPattern","criteriaJoinPattern","require","selectMultiplePattern","parseCriterion","matches","match","response_value","parseMultiselectCriterion","res","criteria","criteriaLength","joinOperators","criterion","toUpperCase","viewWidgets","el","callback","View","input","stopPropagation","options_html","inputDeserializer","_csv_to_params","requiredSheetNameList","$aliases","inp","validate","validateParse","cobj","sht","_parse_sheets","repr","out_sheet","q","valid_with_sheet","surveyType","sn","inputParser","cloneDeep","formBuilderUtils","ParsedStruct","testGroupable","flatten_translated_fields","translations","_t","_translated_val","sArr","counts","open","count_att","opn_cls","att","grpStack","_pushGrp","grp","_curGrp","_popGrp","closedByAtts","_l","_groupAtts","begin","message","normalizeRequiredValues","normalizedSurvey","truthyValues","falsyValues","nullified","nullifyTranslations","translated","translations_0","passedChoices","tmp","choiceNames","lName","choiceRow","cn","SUFFIX_PARTIAL","SUFFIX_USERS","CHECKBOX_NAMES","Set","freeze","PARTIAL_CHECKBOX_PAIRS","submissionsView","submissionsViewPartial","submissionsEdit","submissionsEditPartial","submissionsValidate","submissionsValidatePartial","submissionsDelete","submissionsDeletePartial","PARTIAL_PERM_PAIRS","PERMISSIONS_CODENAMES","view_submissions","change_submissions","validate_submissions","delete_submissions","CHECKBOX_PERM_PAIRS","formView","view_asset","formEdit","change_asset","formManage","manage_asset","submissionsAdd","add_submissions","partial_submissions","PERM_CHECKBOX_PAIRS","checkboxName","PARTIAL_IMPLIED_CHECKBOX_PAIRS","createEnum","newEnum","rootPathEl","rootPath","AssetTypeName","ROOT_URL","document","head","querySelector","location","protocol","host","ANON_USERNAME","ENKETO_ACTIONS","HOOK_LOG_STATUSES","SUCCESS","PENDING","FAILED","KEY_CODES","TAB","ENTER","ESC","SPACE","NBSP","MODAL_TYPES","UPLOADING_XLS","NEW_FORM","LIBRARY_NEW_ITEM","LIBRARY_UPLOAD","ENKETO_PREVIEW","SUBMISSION","TABLE_SETTINGS","REST_SERVICES","FORM_TRANSLATIONS_TABLE","ENCRYPT_FORM","BULK_EDIT_SUBMISSIONS","TABLE_MEDIA_PREVIEW","DATA_ATTACHMENT_COLUMNS","PROJECT_SETTINGS_CONTEXTS","NEW","EXISTING","REPLACE","BUILDER","update_states","UNSAVED_CHANGES","UP_TO_DATE","PENDING_UPDATE","SAVE_FAILED","AVAILABLE_FORM_STYLES","VALIDATION_STATUSES","no_status","validation_status_not_approved","validation_status_approved","validation_status_on_hold","VALIDATION_STATUSES_LIST","QuestionTypeName","ASSET_TYPES","ASSET_FILE_TYPES","map_layer","form_media","MetaQuestionTypeName","QUESTION_TYPES","acknowledge","audio","barcode","calculate","date","datetime","decimal","file","geopoint","geoshape","geotrace","image","integer","kobomatrix","range","select_multiple","time","video","GroupTypeBeginName","META_QUESTION_TYPES","start","end","today","simserial","subscriberid","deviceid","phonenumber","audit","ADDITIONAL_SUBMISSION_PROPS","NAME_MAX_LENGTH","COMMON_QUERIES","qb","qbt","qbtc","ACCESS_TYPES","GroupTypeEndName","GROUP_TYPES_BEGIN","begin_group","begin_score","begin_rank","begin_kobomatrix","begin_repeat","MiscRowTypeName","GROUP_TYPES_END","SCORE_ROW_TYPE","score__row","RANK_LEVEL_TYPE","rank__level","ANY_ROW_TYPE_NAMES","CHOICE_LISTS","SELECT","MATRIX","SCORE","RANK","MATRIX_PAIR_PROPS","inSurvey","inChoices","DEPLOYMENT_CATEGORIES","Deployed","Draft","Archived","QUERY_LIMIT_DEFAULT","MAX_DISPLAYED_STRING_LENGTH","connect_projects","COLLECTION_METHODS","offline_url","desc","single_url","single_once_url","iframe_url","preview_url","android","SURVEY_DETAIL_ATTRIBUTES","FUNCTION_TYPE","function","FUSE_OPTIONS","isCaseSensitive","includeScore","minMatchCharLength","shouldSort","ignoreFieldNorm","threshold","ignoreLocation","constants","hasRowRestriction","assetContent","restrictionName","isAssetAllLocked","LOCK_ALL_RESTRICTION_NAMES","foundProfile","getRowLockingProfile","restrictions","hasAssetRestriction","getAssetLockingProfile","getLockingProfile","profileName","found","profile","LOCKING_PROFILE_PROP_NAME","isRowLocked","isAssetLocked","hasAssetAnyLocking","LOCK_ALL_PROP_NAME","isAssetLockable","getQuestionFeatures","_getFeatures","QUESTION_RESTRICTIONS","getGroupFeatures","GROUP_RESTRICTIONS","getFormFeatures","FORM_RESTRICTIONS","sourceList","isAllLocked","outcome","cans","cants","restriction","LOCKING_RESTRICTIONS","choice_add","choice_delete","choice_label_edit","choice_order_edit","choice_value_edit","question_delete","question_label_edit","question_settings_edit","question_skip_logic_edit","question_validation_edit","group_delete","group_label_edit","group_question_add","group_question_delete","group_question_order_edit","group_settings_edit","group_skip_logic_edit","group_split","form_appearance","form_meta_edit","form_replace","group_add","question_add","question_order_edit","language_edit","LOCKING_UI_CLASSNAMES","HIDDEN","DISABLED","PermConfigStore","this","wantedCodename","verifyReady","codename","wantedUrl","isReady","Store","permConfig","createFunctions","Reflux","PromiseFactory","utils","triggerPromise","me","arguments","canHandlePromise","createdPromise","resolve","reject","willCallPromise","nextTick","previousPromise","promise","inputPromise","then","removeSuccess","completed","listen","removeFailed","failed","catch","listenAndPromise","bindContext","removeListen","returnedPromise","promiseFactory","PublisherMethods","triggerAsync","use","RefluxPromise","Promise","permissionsActions","createActions","getConfig","getAssetPermissions","bulkSetAssetPermissions","assignAssetPermission","removeAssetPermission","setAssetPublic","copyPermissionsFrom","dataInterface","getPermissionsConfig","done","fail","notify","perms","permissionAssignments","isNonOwner","removePermission","shouldSetAnonPerms","permsToSet","permissionAssignment","owner","buildUserUrl","permToRemove","sourceUid","targetUid","helpActions","getInAppMessages","setMessageAcknowledged","setMessageReadTime","getHelpInAppMessages","readTime","patchHelpInAppMessage","interactions","acknowledged","isAcknowledged","libraryActions","searchMyCollectionAssets","searchMyLibraryAssets","searchMyCollectionMetadata","searchMyLibraryMetadata","searchPublicCollections","searchPublicCollectionsMetadata","subscribeToCollection","unsubscribeFromCollection","moveToCollection","getCollections","params","xhr","started","abort","assetUrl","collectionUrl","patchAsset","onAnySearchFailed","library","submissionsActions","getSubmissions","bulkDeleteStatus","bulkPatchStatus","bulkPatchValues","bulkDelete","pageSize","page","fields","bulkRemoveSubmissionsValidationStatus","bulkPatchSubmissionsValidationStatus","submissionIds","bulkPatchSubmissionsValues","failures","bulkDeleteSubmissions","submissions","formMediaActions","loadMedia","uploadMedia","deleteMedia","formMediaJSON","postFormMedia","getAssetFiles","deleteFormMedia","success","exportsActions","getExport","getExports","createExport","deleteExport","getExportSettings","getExportSetting","updateExportSetting","createExportSetting","deleteExportSetting","getAssetExports","exportUid","getAssetExport","createAssetExport","deleteAssetExport","passData","settingUid","cleanData","export_settings","dataShareActions","attachToSource","detachSource","patchSource","getAttachedSources","getSharingEnabledAssets","toggleDataSharing","updateColumnFilters","filename","attachmentUrl","allSources","results","source","getAssetUIDFromUrl","sourceName","truncateString","source__name","sourceUrl","linkedFields","truncateFile","patchDataSharing","actions","help","media","dataShare","navigation","auth","verifyLogin","logout","changePassword","getEnvironment","getApiToken","addExternalItemAtPosition","search","assets","resources","createImport","loadAsset","deployAsset","setDeploymentActive","createSnapshot","cloneAsset","deleteAsset","listTags","createResource","asyncResult","updateAsset","updateSubmissionValidationStatus","removeSubmissionValidationStatus","deleteSubmission","duplicateSubmission","refreshTableSubmissions","hooks","getAll","update","delete","getLogs","retryLog","retryLogs","misc","getUser","checkUsername","updateProfile","userUrl","queryUserExistence","callbacks","patchProfile","onComplete","onFail","hadFieldsErrors","entries","errorProp","onCompleted","onFailed","details","createAssetSnapshot","Raven","captureMessage","resp","redeployment","onDone","msg","failure_message","xform_id_string","replaceSupportEmail","alert","assetId","fileType","reports","setStyle","setCustom","report_styles","report_custom","table","updateSettings","setMapStyles","mapStyles","map_styles","err","searchData","searchAssets","setTimeout","selfProfile","loggedin","anonymous","currentPassword","newPassword","current_password","new_password","environment","apiToken","token","getAsset","sid","duplicatedSubmission","_id","getHooks","addExternalService","hookUid","updateExternalService","deleteExternalService","getHookLogs","lid","retryExternalServiceLog","retryExternalServiceLogs","$survey","$row","$rowDetailsSkipLogic","_keys","rowDetailsSkipLogic","configs","SurveyFixture","equivs","invals","_append","_o","equiv","inval","main","_main","surveys","cascading","x","pizza_survey","xlf1","yes_no","xlf2","groups","singleton","__validators","invalidChars","chars","unique","validationsLength","validations","currentValidation","failureMessage","$modelRowDetailsSkipLogic","$viewRowDetailSkipLogic","$validationLogicHelpers","$modelRowDetailValidationLogic","$viewRowDetailValidationLogic","relevant","serialize","captureException","postInitialize","model_factory","SkipLogicFactory","helper_factory","SkipLogicHelperFactory","SkipLogicPresentationFacade","constraint","ValidationLogicModelFactory","ValidationLogicViewFactory","ValidationLogicHelperFactory","$validationLogicParser","validationLogicHelpers","create_presenter","criterion_model","criterion_view","ValidationLogicPresenter","current_question","create_builder","ValidationLogicBuilder","create_context","ValidationLogicHelperContext","serialized_criteria","SkipLogicPresenter","_parse_skip_logic_criteria","_get_question","build_empty_criterion","_operator_type","build_criterion_logic","create_operator","operator_type_id","SkipLogicBuilder","state","questionTypeHasNoValidationOperators","use_hand_code_helper","use_mode_selector_helper","ValidationLogicModeSelectorHelper","destination","ValidationLogicHandCodeHelper","builder","button","typeId","SkipLogicHelperContext","handcode_button","SkipLogicModeSelectorHelper","$handCode","textarea","$destination","replaceWith","SkipLogicHandCodeHelper","rowDetailValidationLogic","$skipLogicModel","ValidationLogicTextOperator","ValidationLogicDateOperator","ValidationLogicBasicOperator","ValidationLogicExistenceOperator","ValidationLogicSelectMultipleOperator","EmptyOperator","create_criterion_model","ValidationLogicCriterion","question_name","SkipLogicOperator","selected","SelectMultipleSkipLogicOperator","old_question_type","get_id","get_value","viewRowDetailValidationLogic","$skipLogicView","ValidationLogicCriterionBuilder","ValidationLogicQuestionPicker","surveyFragment","KobomatrixRow","KobomatrixRows","KobomatrixMixin","_kobomatrix_columns","_kobomatrix_cols","items","kobomatrix_list","passFunctionToMetaModel","fname","_meta","_forEachRow","_beforeIterator","Rows","_validate","clearErrors","isValid","addError","getRowDescriptors","descriptors","descriptor","findRowByName","afterRow","after","beforeRow","before","_addGroup","rowCids","lowest_i","first_row","addOpts","precedingRow","newGroupDetails","Group","_allRows","grpDefaults","has","typeIsRepeat","_isRepeat","autoname","slgOpts","stripSpaces","new_name","splitApart","startingIndex","groupStart","groupEnd","_groupOrRepeatKey","group","shts","_kuid","_as_json","INVALID_TYPES_AT_THIS_STAGE","_determineConstructorByParams","formSettingsTypes","RowConstructor","comparator","ordinal","markdownTable","_trim","_pushSheet","sheetObjs","_r","rcells","csvJson","_lengths","_record_max","_ljust","diff","_append_line_arr","_arr","preceding","_sht","getFormBuilderAssetType","desiredAssetType","surveyToValidJson","unnullifyTranslations","surveyDataJSON","surveyData","translatedProps","defaultLang","default_language","choice","translatedProp","surveyRow","style","clonedeep","formDefaultLang","defaultLangIndex","transletedPropArr","propVal","koboMatrixParser","hasMatrix","surveyLength","appearance","matrix","localStorage","getItem","kuid","separator","otherSeparators","part","webpackContext","req","webpackContextResolve","code","LANGUAGE_COOKIE_NAME","notifier","delay","closeButton","cookies","atype","formatTime","timeStr","calendar","sameElse","formatTimeDate","format","formatTimeDateShort","formatDate","getUsernameFromUrl","matched","startsWith","_log","profileSeconds","profileEnd","newEmail","replaceBracketsWithLink","bracketRegex","linkHtml","currentLang","getLangAsObject","openingIndex","closingIndex","langCode","substring","langName","getLangString","stringToColor","prc","color","num","parseInt","amt","round","R","G","B","shade","int_to_rgba","word","h","hash","isAValidUrl","URL","checkLatLng","geolocation","validFileTypes","escapeHtml","div","appendChild","createTextNode","innerHTML","renderCheckbox","isImportant","additionalClass","hasLongWords","textArr","maxLength","max","hasVerticalScrollbar","scrollHeight","offsetHeight","getScrollbarWidth","outer","visibility","msOverflowStyle","inner","scrollbarWidth","offsetWidth","parentNode","removeChild","toTitleCase","launchPrinting","print","truncatedString","halfway","trunc","truncatedStringFront","truncatedStringBack","truncateUrl","generateAutoname","startIndex","endIndex","toLowerCase","csrfSafeMethod","$skipLogicParser","skipLogicParser","validationLogicParser","split_paste","trimmed","out_out","orow","randChar","charI","floor","random","fromCharCode","newI","parseHelper","parseSkipLogic","parent_row","meta","parsedValues","reset","parseable","expressionCode","crit","criterionOption","other_names","preventDuplicateUnderscores","isValidXmlTag","lstrip","rstrip","replaceNonWordCharacters","nonWordCharsExceptions","underscores","names_lc","attempt_base","attempt","increment","increment_str","pow","parseFormData","parsed","partialPerms","partialCheckboxName","permCodename","filters","buildBackendPerm","permObj","partial_permissions","removeImpliedPerms","removeContradictoryPerms","contraPerms","backendPerm","getPermission","contradictory","contraPerm","impliedPerms","implied","impliedPerm","permissionCodename","buildFormData","formData","partial","permDef","_submitted_by","$in","parseUserWithPermsList","itemPerm","outputPerm","parseBackendData","ownerUrl","includeAnon","groupedData","isOwner","sortParseBackendOutput","permParser","typeLabels","defaultSurveyDetails","start_time","description","default","end_time","aliases","phoneNumber","bg_aud","SurveyDetailSchemaItem","SurveyDetailSchema","_typeList","defaultsGeneral","_hideUnlessChanged","calculation","paramTypes","number","boolean","questionParams","defaultValue","step","randomize","seed","preventRequired","isMedia","Type","types","exp","tp","typeSelectList","autoset_kuid","columnOrder","hint","guidance_hint","constraint_message","Cookies","changes","orig_obj","new_obj","any","stores","createStore","init","queries","listenTo","listTagsCompleted","surveyState","setState","chz","assetSearch","onSearchAssetsCompleted","getRecentSearch","queryString","Date","getTime","MAX_SEARCH_AGE","query","isTranslationTableUnsaved","change","changed","setTranslationTableUnsaved","isUnsaved","assetNavExpanded","showFixedDrawer","toggleFixedDrawer","_changes","newval","modal","hideModal","_onHideModal","switchModal","switchToPreviousModal","previousType","hasPreviousModal","snapshots","snapshotCreated","snapshotCreationFailed","snapshot","jqxhr","isAuthStateKnown","isLoggedIn","onUpdateProfileCompleted","onLoggedIn","onNotLoggedIn","onVerifyLoginFailed","account","allAssets","byUid","_waitingOn","onListAssetsCompleted","onListAssetsFailed","onUpdateAssetCompleted","onDeleteAssetCompleted","onCloneAssetCompleted","onLoadAssetCompleted","onDeletePermissionCompleted","whenLoaded","registerAsset","dataAsset","deleted","parsedObj","parseTags","callCallbacks","selectedAsset","toggleSelect","forceSelect","selectedAssetUid","userExists","checked","usernameExists","usernameDoesntExist","DisplayGroupTypeName","DISPLAY_GROUP_TYPES","group_root","group_repeat","group_regular","group_matrix","group_matrix_row","DisplayGroup","child","DisplayResponse","getSubmissionDisplayData","submissionData","traverseSurvey","parentGroup","parentData","repeatIndex","rowListName","getRowListName","rowLabel","parentGroupPath","isRowFromCurrentGroupLevel","rowData","getRowData","itemIndex","itemObj","addChild","matrixGroupObj","populateMatrixData","matrixGroup","matrixRowName","matrixRowLabel","matrixRowGroupObj","matrixGroupPath","questionName","questionSurveyObj","questionData","dataProp","questionObj","repeatRowData","getRepeatGroupAnswers","getRegularGroupAnswers","groupPath","targetKey","answers","lookForAnswers","levelIndex","levelKey","objKey","returnVal","getMediaAttachment","submission","fileName","fileNameNoSpaces","mediaAttachment","_attachments","attachment","skipLogicHelpers","view","update_choice_list","current_response_value","dispatcher","change_response_view","finish_changing","operator_id","response_text","response_view","rV","is_valid","build_criterion_builder","build_criterion","extra","build_operator_logic","build_operator_model","equality_operator_type","operator_model","selectable","use_criterion_builder_helper","presenters","SkipLogicCriterionBuilderHelper","Events","determine_add_new_criterion_visibility","removeInvalidPresenters","presenters_to_be_removed","serialize_all","determine_criterion_delimiter_visibility","$criterion_delimiter","hide","$add_new_criterion_button","serialized","all_presenters_are_valid","action","switch_editing_mode","build_hand_code_criteria","$parent","criterion_builder_button","ops","EX","EXISTENCE","EQUALITY","GREATER_THAN","GREATER_THAN_EQ","EQ","GT","GE","abbreviated_negated_label","ans_notnull","ans_null","resp_equals","resp_notequals","multiplechoice_selected","multiplechoice_notselected","resp_greater","resp_less","resp_greaterequals","resp_lessequals","$viewUtils","$rowDetailMixins","validators","customValue","pluck","mixin","arg","ii","nextRow","vals2set","_oValue","$ajax","dataType","assetMapping","Deferred","listTemplates","createTemporaryAssetSnapshot","getHook","contentType","getHookLog","getReportData","identifierString","identifiers","group_by","version_id","new_asset_type","clone_from","clone_from_version_id","permUrl","asset__uid","getImportDetails","getJSON","ordering","getAssetXformView","_searchAssetsWithPredefinedQuery","predefinedQuery","offset","searchPhrase","filterProperty","filterValue","metadata","collectionsFirst","collections_first","_searchMetadataWithPredefinedQuery","assetsHash","loadNextPageUrl","nextPageUrl","active","FormData","processData","getResource","f","getSubmission","submission_ids","getSubmissionsQuery","getEnketoEditLink","getEnketoViewLink","uploadAssetFile","deleteAssetFile","setLanguage","login","creds","aliases_dict","repeat","groupable","groupsOrRepeats","testGroupOrRepeat","hiddenTypes","custom","expect","jQuery","chai","chaiExpect","toBe","y","to","equal","toThrow","toBeDefined","not","be","toContain","contain","toEqual","eql","toBeTruthy","ok","toBeUndefined","expectSorted","describe","it","expectGroupableParse","$surveyFixtures","beforeEach","yesno","_city_choicelist","row2","yesnoClone","example","_csv","compile","ex1","converted_to_objects","converted_to_string","sampleSurveyObj","key1","key2","key3","k4","k5","tf","expectedError","ss2","notSurvey","tag_string","tg","parseSettings","foundSettings","unparsed__settings","settings__style","settings__form_id","form_id","settings__title","clonedRow","_n","pkg","r1","r_end","cr1","cr_end","chain","_firstGroup","first","_lastGroup","first_group","g1","g2","survey_content","r0","r3","grp1","c1","c2","c3","$surveys","expected","process","$model","xlform_survey_model","pizzaSurvey","PIZZA_SURVEY","createSurveyCsv","choiceSheet","createSurvey","firstRow","compareCsvs","x1","x2","x1r","x2r","dumpAndLoad","scsv","xlf","dead_simple","LISTS","gender","rowc","processed_required","srv","start_sd","exported","sd1","r1type","row1","survey_kuids","ynm","yn","census","CENSUS_SURVEY","iterateOver","singleQ","withChoices","lastRow","afterEach","populateRow","expectValue","_load_csv","_load_md","expectKeys","_results","surveyNames","getName","qa","qc","getProp","propName","pasted","expectation","_eqKeyVals","splitted","valid_xml","invalid_xml","inp_exps","inps","exps","additionals","_out","langObj","pizzaType","delivery","deep","throw","foo","bar","fum","baz","pair","simpleSurvey","simpleSurveyChoices","simpleSurveySubmission","simpleSurveySubmissionEmpty","simpleSurveyDisplayData","simpleSurveyDisplayDataEmpty","repeatSurvey","repeatSurveySubmission","repeatSurveyDisplayData","nestedRepeatSurvey","nestedRepeatSurveySubmission","nestedRepeatSurveyDisplayData","matrixSurvey","matrixSurveyChoices","matrixSurveySubmission","matrixSurveyDisplayData","groupsSurvey","groupsSurveyChoices","groupsSurveySubmission","groupsSurveyDisplayData","everythingSurvey","everythingSurveyChoices","everythingSurveySubmission","everythingSurveyDisplayData","matrixRepeatSurvey","matrixRepeatSurveyChoices","matrixRepeatSurveySubmission","matrixRepeatSurveyDisplayData","surveyWithGroups","surveyWithAllPossibleGroups","Your_place","Your_name","When_did_you_eat","What_did_you_eat","Snack_name","Time_of_consumption","How_much_protein_was_it","How_much_H2O_was_it","Favourite_food","Favourite_fruit","Favourite_carrot","Favourite_potato","Favourite_vegan_hummus","Favourite_spiece","Comments","group_breakfast","group_snacks","group_nutrients","group_favs","group_favplant","group_favveg","group_favvegan","simpleTemplate","simpleTemplateLocked","simpleTemplateLockedWithAll","simpleTemplateWithAll","simpleTemplateLockedRowsOnly","simpleTemplateLockedFormUndef","simpleTemplateLockedRowUndef","expectedRestrictions","Best_thing_in_the_world","person","Your_age","assetWithAnonymousUser","assetWithMultipleUsers","assetWithPartial","endpoints","setPermissions","sortedOutput","built","submissionsViewPartialUsers","userWithPermsList","TextOperator","DateOperator","ExistenceSkipLogicOperator","create_response_model","IntegerResponseModel","DecimalResponseModel","ResponseModel","factory","response_model","is_negated","get_correct_type","set_option_names","current_value","choice_cids","set_value","Operator","_set_value","pattern","value_is_not_number","lastIndexOf","DateResponseModel"],"mappings":"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","file":"browsertests-d72f2cc7e86e4413c7f7.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t2: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/static/compiled/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([883,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","_ = require 'underscore'\nValidator = require './view.utils.validator'\n\nmodule.exports = do ->\n  viewUtils = {}\n  viewUtils.Validator = Validator\n\n  # replaces characters that jQuery can't handle in event name\n  viewUtils.normalizeEventName = (eventName) ->\n    regex = new RegExp('[: ()]', 'g')\n    eventName = eventName.replace(regex, '-');\n    return eventName\n\n  viewUtils.reorderElemsByData = (selector, parent, dataAttribute)->\n    arr = []\n    parentEl = false\n    $(parent).find(selector).each (i)->\n      if i is 0\n        parentEl = @parentElement\n      else if @parentElement isnt parentEl\n        throw new Error(\"All reordered items must be siblings\")\n\n      $el = $(@).detach()\n      val = $el.data(dataAttribute)\n      arr[val] = $el  if _.isNumber(val)\n    $el.appendTo(parentEl)  for $el in arr when $el\n    return\n\n  viewUtils.cleanStringify = (atts)->\n    attArr = []\n    for key, val of atts when val isnt \"\"\n      attArr.push \"\"\"<span class=\"atts\"><i>#{key}</i>=\"<em>#{val}</em>\"</span>\"\"\"\n    attArr.join(\"&nbsp;\")\n\n  viewUtils.debugFrame = do ->\n    $div = false\n    debugFrameStyle =\n      position: \"fixed\"\n      width: \"95%\"\n      height: \"80%\"\n      bottom: 10\n      left: \"2.5%\"\n      overflow: \"auto\"\n      zIndex: 100\n      backgroundColor: \"rgba(255,255,255,0.7)\"\n\n    showFn = (txt)->\n      html = txt.split(\"\\n\").join(\"<br>\")\n      $div = $(\"<div>\", class: \"well debug-frame\").html(\"<code>#{html}</code>\")\n        .css(debugFrameStyle)\n        .appendTo(\"body\")\n    showFn.close = ->\n      if $div\n        $div.remove()\n        $div = false\n    showFn\n\n  viewUtils.launchQuestionLibrary = do ->\n    launch = (opts={})->\n      wrap = $(\"<div>\", class: \"js-click-remove-iframe iframe-bg-shade\")\n      $(\"<div>\").text(\"\"\"\n        Launch question library in this element\n        <section koboform-question-library=\"\"></section>\n      \"\"\").appendTo(wrap)\n      wrap.click ()-> wrap.remove()\n      wrap\n\n    launch\n\n  viewUtils.enketoIframe = do ->\n    enketoServer = \"https://enketo.org\"\n    enketoPreviewUri = \"/webform/preview\"\n    buildUrl = (previewUrl)->\n      \"\"\"#{enketoServer}#{enketoPreviewUri}?form=#{previewUrl}\"\"\"\n\n    _loadConfigs = (options)->\n      if options.enketoPreviewUri\n        enketoPreviewUri = options.enketoPreviewUri\n      if options.enketoServer\n        enketoServer = options.enketoServer\n\n    clickCloserBackground = ->\n      $(\"<div>\", class: \"js-click-remove-iframe\")\n\n    launch = (previewUrl, options={})->\n      _loadConfigs(options)\n      console.log options\n      $(\".enketo-holder\").append $(\"<iframe>\", src: buildUrl(previewUrl))\n      $(\".enketo-holder iframe\").load ()->\n        # alert \"iframe loaded yo!\"\n        $(\".enketo-loading-message\").remove()\n\n    launch.close = ()->\n      $(\".iframe-bg-shade\").remove()\n      $(\".enketo-holder\").remove()\n\n    launch.fromCsv = (surveyCsv, options={})->\n      holder = $(\"<div>\", class: \"enketo-holder\").html(\"\"\"\n        <div class='enketo-iframe-icon'></div>\n        <div class=\"enketo-loading-message\">\n          <p>\n          <i class=\"k-spin k-icon k-icon-spinner\"></i>\n          <br/>\n          Loading Preview\n        </p>\n        <p>\n          This will take a few seconds depending on the size of your form.\n        </p>\n        </div>\n      \"\"\")\n      wrap = $(\"<div>\", class: \"js-click-remove-iframe iframe-bg-shade\")\n      holder.appendTo('body')\n      wrap.appendTo('body')\n\n      wrap.click ()->\n        wrap.remove()\n        holder.remove()\n\n      $('.enketo-holder .enketo-iframe-icon').click ()->\n        wrap.remove()\n        holder.remove()\n\n      previewServer = options.previewServer or \"\"\n      data = JSON.stringify(body: surveyCsv)\n      _loadConfigs(options)\n      onError = options.onError or (args...)-> console?.error.apply(console, args)\n\n      $.ajax\n        url: \"#{previewServer}/koboform/survey_preview/\"\n        method: \"POST\"\n        data: data\n        complete: (jqhr, status)=>\n          response = jqhr.responseJSON\n          if status is \"success\" and response and response.unique_string\n            unique_string = response.unique_string\n            launch(\"#{previewServer}/koboform/survey_preview/#{unique_string}\")\n            options.onSuccess()  if options.onSuccess?\n          else if status isnt \"success\"\n            wrap.remove()\n            holder.remove()\n            informative_message = jqhr.responseText or jqhr.statusText\n            if informative_message.split(\"\\n\").length > 0\n              informative_message = informative_message.split(\"\\n\")[0..2].join(\"<br>\")\n            onError informative_message, title: 'Error launching preview'\n          else if response and response.error\n            wrap.remove()\n            holder.remove()\n            onError response.error\n          else\n            wrap.remove()\n            holder.remove()\n            onError \"SurveyPreview response JSON is not recognized\"\n\n    launch\n\n  viewUtils\n","_ = require 'underscore'\nbase = require './model.base'\n$modelUtils = require './model.utils'\n\nmodule.exports = do ->\n\n  choices = {}\n\n  class choices.Option extends base.BaseModel\n    initialize: ->\n      @unset(\"list name\")\n      @unset(\"list_name\")\n    destroy: ->\n      choicelist = @list()._parent\n      choicelist_cid = choicelist.cid\n      survey = choicelist.collection._parent\n      @collection.remove(@)\n      survey.trigger('remove-option', choicelist_cid, @cid)\n    list: -> @collection\n    getKeys: (with_val)->\n      # returns a list of columns in the xlsform.\n      # if `with_val` is true, only returns columns that\n      # have an associated value.\n      keys = []\n      for key, attribute of @attributes\n        if !with_val\n          keys.push(key)\n        else if @get key\n          keys.push(key)\n      keys\n    toJSON: ()->\n      attributes = {}\n      for key, attribute of @attributes\n        attributes[key] = @get key\n      attributes\n\n  class choices.Options extends base.BaseCollection\n    model: choices.Option\n\n  class choices.ChoiceList extends base.BaseModel\n    idAttribute: \"name\"\n    constructor: (opts={}, context)->\n      options = opts.options || []\n      super name: opts.name, context\n      @options = new choices.Options(options || [], _parent: @)\n    summaryObj: ->\n      @toJSON()\n    getSurvey: ->\n      @collection.getSurvey()\n\n    getList: ->\n      # used for cascading selects: if choiceList is connected to\n      # another choiceList, pass it on.\n      if @__cascadedList\n        @__cascadedList\n      else\n        null\n\n    _get_previous_linked_choice_list: ->\n      @collection.find((cl)=> cl.getList() is @ )\n\n    _get_last_linked_choice_list: ->\n      prev = next = @\n      while next = prev._get_previous_linked_choice_list()\n        prev = next\n      prev\n\n    _get_first_linked_choice_list: ->\n      prev = next = @\n      while next = prev.getList()\n        prev = next\n      prev\n\n    _has_corresponding_row: ->\n      _name = @get('name')\n      !!@getSurvey().rows.find((r)->\n          r.get('type').get('listName') is _name\n        )\n\n    _create_corresponding_row_data: (opts={})->\n      full_path = !!opts._full_path_choice_filter\n      cl = @_get_first_linked_choice_list()\n      prevs = []\n      rows_data = []\n      build_row_data = (curlist)->\n        name = curlist.get 'name'\n        if full_path\n          _choice_filtered = prevs\n        else\n          _choice_filtered = _.compact([_.last(prevs)])\n        {\n          label: name\n          type: \"select_one #{name}\"\n          choice_filter: _choice_filtered.map((cl)->\n              cl_name = cl.get('name')\n              \"#{cl_name}=${#{cl_name}}\"\n            ).join(\" and \")\n        }\n      rows_data.push(build_row_data(cl))\n      next_list = cl\n      prevs.push(cl)\n      while (next_list = next_list._get_previous_linked_choice_list())\n        rows_data.push(build_row_data(next_list))\n        prevs.push(next_list)\n      rows_data\n\n    create_corresponding_rows: (opts={})->\n      rows_data = @_create_corresponding_row_data()\n      survey = @getSurvey()\n      _index = opts.at or 0\n      for row_data in rows_data.reverse()\n        survey.addRowAtIndex(row_data, _index)\n\n    getOptionKeys: (with_val=true)->\n      option_keys = []\n      for option in @options.models\n        for option_key in option.getKeys(with_val)\n          option_keys.push(option_key)\n      _.uniq(option_keys)\n\n    finalize: ->\n      # ensure that all options have names\n      names = []\n      for option in @options.models\n        label = option.get(\"label\")\n        name = option.get(\"name\")\n        if not name\n          name = $modelUtils.sluggify(label, {\n            preventDuplicates: names\n            lowerCase: true\n            lrstrip: true\n            characterLimit: 40\n            incrementorPadding: false\n            validXmlTag: false\n          })\n          option.set(\"name\", name)\n        names.push name\n      return\n\n    clone: () ->\n      json = @toJSON()\n      delete json.name\n      return _.assign(\n          new choices.ChoiceList(json),\n          collection: @collection\n        )\n\n    toJSON: ()->\n      @finalize()\n\n      # Returns {name: '', options: []}\n      name: @get(\"name\")\n      options: @options.invoke(\"toJSON\")\n\n    getNames: ()->\n      names = @options.map (opt)-> opt.get(\"name\")\n      _.compact names\n\n  class choices.ChoiceLists extends base.BaseCollection\n    model: choices.ChoiceList\n    create: ->\n      @add(cl = new choices.ChoiceList(name: $modelUtils.txtid()))\n      cl\n    getListNames: ->\n      @invoke('get', 'name')\n    summaryObj: (shorter=false)->\n      out = {}\n      for model in @models\n        if shorter\n          out[model.get(\"name\")] = model.summaryObj().options\n        else\n          out[model.get(\"name\")] = model.summaryObj()\n      out\n\n  choices\n","module.exports = do ->\n  # The Csv class is only internally accessible, though easy\n  # to instantiate through the `csv` function.\n  #\n  # It receives a parameter (and optional options) which\n  # are stored for later use.\n  class Csv\n    constructor: (param, opts={})->\n      if _isString param\n        @string = param\n        rows = csv.toArray @string\n        @rows = arrayToObjects rows\n        [@columns, @rowArray...] = rows\n      else if _isArray param\n        @rows = param\n        @columns = do =>\n          columns = []\n          for row in @rows\n            columns.push key  for own key of row when key not in columns\n          columns\n        @buildRowArray()\n        @obj = param\n      else if param\n        @columns  = if _isArray param.columns then param.columns else []\n        if param.rowObjects\n          if @columns.length is 0\n            # this may be slow, but it should get all the possible columns\n            for row in param.rowObjects\n              for key, val of row when key not of columns\n                @columns.push key\n          @rowArray = do =>\n            for row in param.rowObjects\n              row[c] for c in @columns\n        else\n          @rowArray = if _isArray param.rows then param.rows else []\n        @kind     = param.kind if param.kind?\n        @rows = do =>\n          for row in @rowArray\n            rowObj = {}\n            for cell, i in row  when @columns[i]?\n              rowObj[@columns[i]] = cell\n            rowObj\n      else\n        @rows     = []\n        @columns  = []\n        @rowArray = []\n\n    buildRowArray: ()->\n      @rowArray = do =>\n        for row in @rows\n          for column in @columns\n            row[column] || \"\"\n\n    addRow: (r)->\n      colsChanged = false\n      for own key, val of r\n        unless key in @columns\n          colsChanged = true\n          @columns.push key\n      @rows.push r\n      if colsChanged\n        @buildRowArray()\n      else\n        @rowArray.push (r[column] for column in @columns)\n      r\n\n    toObjects: (opts={})->\n      if @string\n        return csv.toObjects @string, opts\n      else if @rows\n        @rows\n\n    toObject: ()->\n      out =\n        columns: @columns\n        rows: @rowArray\n      out.kind = @kind  if @kind\n      out\n\n    toArrays: ()->\n      out = [@columns]\n      out.push row  for row in @rowArray when row.length > 0\n      out\n\n    toString: ()->\n      headRow = (asCsvCellValue cell for cell in @columns).join(csv.settings.delimiter)\n      headRow + \"\\n\" + (for row in @rowArray\n        (asCsvCellValue cell for cell in row).join csv.settings.delimiter).join(\"\\n\")\n\n  csv = (param, opts)->\n    if param instanceof Csv then param else new Csv param, opts\n\n  _remove_extra_escape_chars = (ss)->\n    ss.replace(/\\\\\\\\/g, '\\\\')\n\n  asCsvCellValue = (cell)->\n    if cell is undefined\n      \"\"\n    else if ///\\W|\\w|#{csv.settings.delimiter}///.test cell\n      outstr = JSON.stringify(\"\" + cell)\n      _remove_extra_escape_chars outstr\n    else\n      cell\n\n  csv.fromStringArray = (outpArr, opts={})->\n    outArr = for row in outpArr\n      (asCsvCellValue cell for cell in row).join csv.settings.delimiter\n    outArr.join \"\\n\"\n\n  csv.fromArray = (arr, opts={})->\n    sort        = !!opts.sort\n    headRow     = []\n    for row in arr\n      headRow.push key  for own key of row when -1 is headRow.indexOf key\n    headRow.sort()  if sort\n    outpArr = for row in arr\n      asCsvCellValue row[col]  for col in headRow\n    outpArr.unshift (asCsvCellValue col  for col in headRow)\n    csv.fromStringArray outpArr, opts\n\n  csv.toObjects = (csvString)->\n    arrayToObjects csv.toArray csvString\n\n  arrayToObjects = (arr)->\n    [headRow, rows...] = arr\n    for row in rows when !(row.length is 1 and row[0] is \"\")\n      obj = {}\n      for key, i in headRow\n        obj[key] = row[i]\n      obj\n\n  csv.toObject = (csvString, opts)->\n    arrayToObject csv.toArray(csvString), opts\n\n  arrayToObject = (arr, opts={})->\n    [headRow, rows...] = arr\n\n    sortByKey         = opts.sortByKey\n    includeSortByKey  = opts.includeSortByKey\n\n    unless sortByKey\n      sortByKey = headRow[0]\n\n    sortByKeyI = headRow.indexOf sortByKey\n\n    out = {}\n    for row in rows when !(row.length is 1 and row[0] is \"\")\n      obj = {}\n      sbKeyVal = row[sortByKeyI]\n      obj[key] = row[i]  for key, i in headRow when i isnt sortByKeyI\n      obj[sortByKey] = sbKeyVal  if includeSortByKey\n      out[sbKeyVal] = obj\n    out\n\n  removeTrailingNewlines = (str)-> str.replace(/(\\n+)$/g, \"\")\n\n  csv._parse_string = (c)->\n    JSON.parse('\"' + c.replace(/\\\\/g, '\\\\\\\\').replace(/\\\\\\\\\"/g, '\\\\\"') + '\"')\n\n  # The `csv.toArray` function, pulled from this [stackoverflow comment](http://stackoverflow.com/questions/1293147/javascript-code-to-parse-csv-data)\n  # will parse a delimited string into an array of\n  # arrays. The default delimiter is the comma, but this\n  # can be overriden in the second argument.\n\n  csv.toArray = (strData) ->\n    if csv.settings.removeTrailingNewlines\n      strData = removeTrailingNewlines(strData)\n    strDelimiter = csv.settings.delimiter\n\n    rows = []\n    row = []\n\n    # The `objPattern` regular expression pulls out\n    #\n    # * Delimiters\n    # * quoted fields\n    # * and standard fields\n\n    ###\n    this regexp needs to be compiled with coffee-script 1.6.3\n    or, escape characters need to be escaped (see csv._objPattern\n    below this comment)\n\n    csv._objPattern = ///\n      (\n        \\ #{strDelimiter}\n        |\n        \\r?\\n\n        |\n        \\r\n        |\n        ^\n      )\n      (?:\n        \"(\n          (?:\n            (?:\n              [^\\\\]\n              |\n              \\\\\\\\\n              |\n              [\\\\(?=\")]\"\n              |\n              [\\\\(?!\")]\n            )*?\n          )\n        )\"\n        # > a simpler version that fails\n        # > when cell ends with a backslash:\n        # \"(\n        #   (?:\n        #     \\\\\"\n        #     |\n        #     [^\"]\n        #   )*\n        # )\"\n        |\n        (\n          [^\"\\ #{strDelimiter}\\r\\n]*\n        )\n      )\n    ///gi\n    ###\n\n    csv._objPattern = `new RegExp('(\\\\,|\\\\r?\\\\n|\\\\r|^)(?:\"((?:(?:[^\\\\\\\\]|\\\\\\\\\\\\\\\\|[\\\\\\\\(?=\")]\"|[\\\\\\\\(?!\")])*?))\"|([^\"\\\\,\\\\r\\\\n]*))', 'gi')`\n\n    while arrMatches = csv._objPattern.exec(strData)\n      strMatchedDelimiter = arrMatches[1]\n\n      if strMatchedDelimiter.length and (strMatchedDelimiter isnt strDelimiter)\n        rows.push row\n        row = []\n\n      if arrMatches[2]\n        # cell is wrapped in quotes\n        strMatchedValue = csv._parse_string(arrMatches[2])\n      else\n        # cell is not wrapped in quotes\n        strMatchedValue = arrMatches[3]\n\n      if csv.settings.parseFloat and !isNaN (parsedMatch = parseFloat strMatchedValue)\n        strMatchedValue = parsedMatch\n\n      row.push strMatchedValue\n    rows.push row\n    rows\n\n\n  #### Sheeted CSVs\n  #\n  # A \"sheeted csv\" is a [made-up] term for a csv where value in the\n  # first column corresponds to the \"sheet name\" and any remaining columns\n  # are treated as contents of that sheet.\n  #\n  # *coffeescript example:*\n  #\n  #      sheetedCsv = \"\"\"\n  #        survey\n  #        ,label,type\n  #        ,Name:,text\n  #        ,Favorite color:,select_one colors\n  #        choices,,\n  #        ,list,label\n  #        ,colors,Black\n  #        ,colors,White\n  #        settings,col1,col2\n  #        ,setting1,true\n  #        ,setting2,false\n  #      \"\"\"\n\n  class SheetedCsv\n    constructor: (param, opts)->\n      @_sheetIds = []\n      @_sheets = {}\n      if _isString param\n        parseSheetedCsv param, (osids, sheets)=>\n          for id in osids\n            [columns, rows...] = sheets[id]\n            @sheet id, csv columns: columns, rows: rows\n\n    sheet: (sheetId, contents=false)->\n      if contents\n        unless sheetId in @_sheetIds\n          @_sheetIds.push sheetId\n        @_sheets[sheetId] = contents\n      else\n        @_sheets[sheetId]\n    toString: ()->\n      outp = []\n      delimiter = csv.settings.delimiter\n      for sheetId in @_sheetIds\n        sheet = @_sheets[sheetId]\n        cols = sheet.columns\n        rowA = sheet.rowArray\n        headRowStr = asCsvCellValue sheetId\n        headRowStr += delimiter  for i in [0...cols.length]\n        outp.push headRowStr\n        outp.push delimiter + (asCsvCellValue col for col in cols).join delimiter\n        for row in rowA\n          outp.push delimiter + (asCsvCellValue cell for cell in row).join delimiter\n      outp.join(\"\\n\")\n\n  csv.sheeted = (param, opts)->\n    if param instanceof SheetedCsv then param else new SheetedCsv param, opts\n\n  # typically, most rows of a sheeted csv begin with an empty cell.\n  #\n  # *Note: When a sheet id is repeated, the contents are appended to the original sheet*\n\n  parseSheetedCsv = (shcsv, cb=false)->\n    sheets = {}\n    orderedSheetIds = []\n\n    for [cell1, remaining...] in csv.toArray shcsv\n      if cell1\n        curSheet = cell1\n\n      unless curSheet\n        throw new Error \"\"\"\n          Sheet id must be defined in the first column and cannot be falsey\n          \"\"\"\n\n      unless curSheet in orderedSheetIds\n        orderedSheetIds.push curSheet\n\n      unless sheets[curSheet]\n        sheets[curSheet] = []\n\n      lineHasContent = do ->\n        return true  for item in remaining when item\n\n      sheets[curSheet].push remaining  if lineHasContent\n\n    unless cb\n      return [orderedSheetIds, sheets]\n\n    cb.apply @, [orderedSheetIds, sheets]\n\n  # The function `csv.sheeted.toObjects(sheetedCsv)`\n  # takes a sheeted csv and builds sheets individually\n  # as it would in `csv.toObjects`\n  csv.sheeted.toObjects = (shCsv)-> parseSheetedCsv shCsv, (osids, sheets)->\n    output = {}\n    for sheet in osids\n      output[sheet] = arrayToObjects sheets[sheet]\n    output\n\n  # The function `csv.sheeted.toArray(sheetedCsv)`\n  # preserves the order of the sheets.\n  csv.sheeted.toArray = (shCsv)-> parseSheetedCsv shCsv, (osids, sheets)->\n    for sheet in osids\n      id: sheet\n      sheet: arrayToObjects sheets[sheet]\n\n\n  # Misc. helper methods carried over from underscore.coffee\n  _isString       = (obj) -> !!(obj is '' or (obj and obj.charCodeAt and obj.substr))\n  _nativeIsArray  = Array.isArray\n  _isArray        = _nativeIsArray or (obj) -> !!(obj and obj.concat and obj.unshift and not obj.callee)\n  _nativeKeys     = Object.keys\n  _keys           = _nativeKeys or (obj)->\n    return new Array obj.length  if _isArray(obj)\n    key for key, val of obj\n\n  csv.settings =\n    delimiter: \",\"\n    parseFloat: false\n    removeTrailingNewlines: true\n\n  csv\n","_ = require 'underscore'\n$base = require './model.base'\n$choices = require './model.choices'\n$modelUtils = require './model.utils'\n$configs = require './model.configs'\n$surveyFragment = require './model.surveyFragment'\n$surveyDetail = require './model.surveyDetail'\n$inputDeserializer = require './model.inputDeserializer'\n$inputParser = require './model.inputParser'\n$markdownTable = require './model.utils.markdownTable'\ncsv = require './csv'\nLOCKING_PROFILES_PROP_NAME = require('js/components/locking/lockingConstants').LOCKING_PROFILES_PROP_NAME\n\nmodule.exports = do ->\n  class Survey extends $surveyFragment.SurveyFragment\n    constructor: (options={}, addlOpts)->\n      super()\n      if options.error\n        throw new Error(\"instantiating survey with error parameter\")\n      @_initialParams = options\n\n      @settings = new Settings(options.settings, _parent: @)\n      if !options.settings\n        @settings.enable_auto_name()\n\n      if (sname = @settings.get(\"name\") or options.name)\n        @set(\"name\", sname)\n\n      ###\n      # We don't use locking profiles in any way yet, so we just store it for\n      # saving - for checking these out, coffee code is using raw survey JSON.\n      ###\n      @lockingProfiles = options[LOCKING_PROFILES_PROP_NAME]\n\n      @newRowDetails = options.newRowDetails || $configs.newRowDetails\n      @defaultsForType = options.defaultsForType || $configs.defaultsForType\n\n      @surveyDetails = new $surveyDetail.SurveyDetails([], _parent: @).loadSchema(options.surveyDetailsSchema || $configs.surveyDetailSchema)\n      @choices = new $choices.ChoiceLists([], _parent: @)\n      $inputParser.loadChoiceLists(options.choices || [], @choices)\n\n      if options.survey\n        if !$inputParser.hasBeenParsed(options)\n          options.survey = $inputParser.parseArr(options.survey)\n        for r in options.survey\n          if typeof r.id isnt 'undefined'\n            throw new Error(\"Forbidden column `id` for row: #{JSON.stringify(r, null, 2)}\")\n\n          if r.type in $configs.surveyDetailSchema.typeList()\n            @surveyDetails.importDetail(r)\n          else\n            @rows.add r, collection: @rows, silent: true, _parent: @rows\n      else\n        @surveyDetails.importDefaults()\n      @context =\n        warnings: []\n        errors: []\n      @forEachRow (r)=>\n        if typeof r.linkUp is 'function'\n          r.linkUp(@context)\n      @linkUpChoiceLists()\n\n    @create: (options={}, addlOpts) ->\n      return new Survey(options, addlOpts)\n\n    linkUpChoiceLists: ->\n      # In case of cascading selects, this will ensure choiceLists are connected to\n      # sub choice lists through a private \"__cascadeList\" property\n      choiceKeys = @choices.getListNames()\n      for choiceList in @choices.models\n        overlapping_choice_keys = _.intersection(choiceKeys, choiceList.getOptionKeys(true))\n        if overlapping_choice_keys.length > 1\n          throw new Error(\"cascading choices can only reference one choice list\")\n        else if overlapping_choice_keys.length is 1\n          choiceList.__cascadedList = @choices.get(overlapping_choice_keys[0])\n      return\n\n    insert_row: (row, index) ->\n      if row._isCloned\n        @rows.add(row, at: index)\n      else\n        @rows.add(row.toJSON(), at: index)\n      new_row = @rows.at(index)\n      survey = @getSurvey()\n      if rowlist = row.getList()\n        survey.choices.add(options: rowlist.options.toJSON())\n        new_row.get('type').set('list', rowlist)\n      name_detail = new_row.get('name')\n      name_detail.set 'value', name_detail.deduplicate(survey)\n\n    _ensure_row_list_is_copied: (row)->\n      if !row.rows && rowlist = row.getList()\n        @choices.add(name: rowlist.get(\"name\"), options: rowlist.options.toJSON())\n\n    insertSurvey: (survey, index=-1, targetGroupId)->\n      index = @rows.length if index is -1\n      for row, row_i in survey.rows.models\n        # if target is a group, not root list of rows, we need to switch\n        target = @\n        if targetGroupId\n          foundGroup = @findRowByCid(targetGroupId, {includeGroups: true})\n          if foundGroup\n            target = foundGroup\n          else\n            throw new Error(\"Couldn't find group #{targetGroupId}!\")\n\n        index_incr = index + row_i\n\n        # inserting a group\n        if row.rows\n          if row.forEachRow\n            row.forEachRow(\n              (r) => @_ensure_row_list_is_copied(r),\n              {includeGroups: true}\n            )\n\n          @_insertRowInPlace(\n            row,\n            {\n              index: index_incr,\n              parent: target,\n              noDetach: true\n            }\n          )\n\n          # inserting a group (block from Library) doesn't trigger change event\n          # anywhere else, so we do it here manually\n          @trigger('change')\n        # inserting a question\n        else\n          @_ensure_row_list_is_copied(row)\n          name_detail = row.get('name')\n          name_detail.set 'value', name_detail.deduplicate(@)\n          target.rows.add(\n            row.toJSON(),\n            at: index_incr\n          )\n      return\n\n    toFlatJSON: (stringify=false, spaces=4)->\n      obj = @toJSON()\n\n      obj.survey = for row in obj.survey\n        if _.isObject(row.type)\n          row.type = [\n            _.keys(row.type)[0], _.values(row.type)[0]\n          ].join(' ')\n        row\n      if _.isObject(obj.choices)\n        flattened_choices = []\n        for own key, val of obj.choices\n          for list_item in val\n            _c = $.extend({list_name: key}, list_item)\n            delete _c.setManually\n            flattened_choices.push(_c)\n        obj.choices = flattened_choices\n\n      obj.settings = [@settings.attributes]\n\n      if @lockingProfiles\n        obj[LOCKING_PROFILES_PROP_NAME] = @lockingProfiles\n\n      if stringify\n        JSON.stringify(obj, null, spaces)\n      else\n        obj\n\n    toJSON: (stringify=false, spaces=4)->\n      obj = {}\n\n      addlSheets =\n        choices: new $choices.ChoiceLists()\n\n      obj.survey = do =>\n        out = []\n        fn = (r)->\n          if 'getList' of r and (l = r.getList())\n            addlSheets.choices.add(l)\n\n          if typeof r.export_relevant_values is 'function'\n            r.export_relevant_values(out, addlSheets)\n          else\n            console.error 'No r.export_relevant_values. Does this survey have non-standard columns?', r\n\n        @forEachRow fn, includeGroupEnds: true\n\n        for sd in @surveyDetails.models when sd.get(\"value\")\n          out.push sd.toJSON()\n\n        out\n\n      for shtName, sheet of addlSheets when sheet.length > 0\n        obj[shtName] = sheet.summaryObj(true)\n\n      if stringify\n        JSON.stringify(obj, null, spaces)\n      else\n        obj\n    getSurvey: -> @\n    log: (opts={})->\n      logFn = opts.log or (a...)-> console.log.apply(console, a)\n      tabs = ['-']\n      logr = (r)->\n        if 'forEachRow' of r\n          logFn tabs.join('').replace(/-/g, '='), r.get('label').get('value')\n          tabs.push('-')\n          r.forEachRow(logr, flat: true, includeGroups: true)\n          tabs.pop()\n        else\n          logFn tabs.join(''), r.get('label').get('value')\n      @forEachRow(logr, flat: true, includeGroups: true)\n      return\n\n    summarize: ->\n      rowCount = 0\n      hasGps = false\n      fn = (r)->\n        if r.get('type').get('value') is 'geopoint'\n          hasGps = true\n        rowCount++\n      @forEachRow(fn, includeGroups: false)\n\n      # summaryObj\n      rowCount: rowCount\n      hasGps: hasGps\n    _insertRowInPlace: (row, opts={})->\n      if row._parent && !opts.noDetach\n        row.detach(silent: true)\n      index = 0\n      if opts.index\n        index = opts.index\n      previous = opts.previous\n      parent = opts.parent\n      if previous\n        parent = previous.parentRow()\n        index = parent.rows.indexOf(previous) + 1\n      if !parent\n        parent = @\n      parent.rows.add(row, {at: index})\n\n      # line below looks like BAD CODE™ but in fact it enables row reordering\n      row._parent = parent.rows\n\n      if opts.event\n        parent.rows.trigger(opts.event)\n      return\n\n    prepCols: (cols, opts={}) ->\n      exclude = opts.exclude or []\n      add = opts.add or []\n      if _.isString(exclude) or _.isString(add)\n        throw new Error(\"prepCols parameters should be arrays\")\n      out = _.filter _.uniq( _.flatten cols), (col) -> col not in exclude\n      out.concat.apply(out, add)\n\n    toSsStructure: ()->\n      out = {}\n      for sheet, content of @toCsvJson()\n        out[sheet] = content.rowObjects\n      out\n    toCsvJson: ()->\n      # build an object that can be easily passed to the \"csv\" library\n      # to generate the XL(S)Form spreadsheet\n\n      @finalize()\n\n      out = {}\n      out.survey = do =>\n        oCols = [\"name\", \"type\", \"label\"]\n        oRows = []\n\n        addRowToORows = (r)->\n          colJson = r.toJSON()\n          for own key, val of colJson when key not in oCols\n            oCols.push key\n          oRows.push colJson\n\n        @forEachRow addRowToORows, includeErrors: true, includeGroupEnds: true\n        for sd in @surveyDetails.models when sd.get(\"value\")\n          addRowToORows(sd)\n\n        columns: oCols\n        rowObjects: oRows\n\n\n      choicesCsvJson = do =>\n        lists = new $choices.ChoiceLists()\n        @forEachRow (r)->\n          _getSubLists = (item)->\n            if 'getList' of item\n              list = item.getList()\n              if list and !lists.get(list.get('name'))\n                lists.add(list)\n                _getSubLists(list)\n          _getSubLists(r)\n\n        rows = []\n        cols = []\n        for choiceList in lists.models\n          choiceList.set(\"name\", $modelUtils.txtid(), silent: true)  unless choiceList.get(\"name\")\n          choiceList.finalize()\n          clAtts = choiceList.toJSON()\n          clName = clAtts.name\n          for option in clAtts.options\n            cols.push _.keys option\n            rows.push _.extend {}, option, \"list_name\": clName\n\n\n        if rows.length > 0\n          columns: @prepCols cols, exclude: ['setManually'], add: ['list_name']\n          rowObjects: rows\n        else\n          false\n\n      out.choices = choicesCsvJson  if choicesCsvJson\n      out.settings = @settings.toCsvJson()\n\n      out\n\n    toMarkdown: ()->\n      $markdownTable.csvJsonToMarkdown(@toCsvJson())\n\n    toCSV: ->\n      sheeted = csv.sheeted()\n      for shtName, content of @toCsvJson()\n        sheeted.sheet shtName, csv(content)\n      sheeted.toString()\n\n  Survey.load = (csv_repr, _usingSurveyLoadCsv=false)->\n    # log('switch to Survey.load.csv')  if !_usingSurveyLoadCsv\n    if _.isString(csv_repr) and not _is_csv(csv_repr)\n      throw Error(\"Invalid CSV passed to form builder\")\n    _deserialized = $inputDeserializer.deserialize csv_repr\n    _parsed = $inputParser.parse _deserialized\n    new Survey(_parsed)\n\n  Survey.load.csv = (csv_repr)->\n    Survey.load(csv_repr, true)\n\n  Survey.load.md = (md)->\n    sObj = $markdownTable.mdSurveyStructureToObject(md)\n    new Survey(sObj)\n  Survey.loadDict = (obj, baseSurvey)->\n    _parsed = $inputParser.parse(obj, baseSurvey)\n    new Survey(_parsed)\n\n  _is_csv = (csv_repr)->\n    # checks that a string has a newline and a comma,\n    # a very simplistic test of a csv\n    '\\n' in csv_repr and ',' in csv_repr\n\n  # Settings (assigned to each $survey.Survey instance)\n  class Settings extends $base.BaseModel\n    validation: {}\n    toCsvJson: ->\n      columns = _.keys(@attributes)\n      rowObjects = [@toJSON()]\n\n      columns: columns\n      rowObjects: rowObjects\n    enable_auto_name: () ->\n      @auto_name = true\n\n      @on 'change:form_id', () =>\n        if @changing_form_title\n          @changing_form_title = false\n        else\n          @auto_name = false\n\n      @on 'change:form_title', (model, value) =>\n        if @auto_name\n          @changing_form_title = true\n          @set 'form_id', $modelUtils.sluggifyLabel(value)\n\n\n\n  Survey: Survey\n  Settings: Settings\n","_ = require 'underscore'\nBackbone = require 'backbone'\n$modelRowDetailsSkipLogic = require './model.rowDetails.skipLogic'\n$viewWidgets = require './view.widgets'\n$skipLogicHelpers = require './mv.skipLogicHelpers'\n\nPLACEHOLDER_VALUE = 'placeholderVal'\n\nmodule.exports = do ->\n  viewRowDetailSkipLogic = {}\n\n  ###----------------------------------------------------------------------------------------------------------###\n  #-- View.RowDetail.SkipLogic.CriterionBuilderView.coffee\n  ###----------------------------------------------------------------------------------------------------------###\n\n  class viewRowDetailSkipLogic.SkipLogicCriterionBuilderView extends $viewWidgets.Base\n    events:\n      \"click .skiplogic__deletecriterion\": \"deleteCriterion\"\n      \"click .skiplogic__addcriterion\": \"addCriterion\"\n      \"change .skiplogic__delimselect\": \"markChangedDelimSelector\"\n    render: () ->\n      tempId = _.uniqueId(\"skiplogic_expr\")\n      @$el.html(\"\"\"\n        <p>\n          #{t(\"This question will only be displayed if the following conditions apply\")}\n        </p>\n        <div class=\"skiplogic__criterialist\"></div>\n        <p class=\"skiplogic__addnew\">\n          <button class=\"skiplogic__addcriterion kobo-button kobo-button--green\">+ #{t(\"Add another condition\")}</button>\n        </p>\n        <select class=\"skiplogic__delimselect\">\n          <option value=\"and\">#{t(\"Question should match all of these criteria\")}</option>\n          <option value=\"or\">#{t(\"Question should match any of these criteria\")}</option>\n        </select>\n      \"\"\")\n\n      delimSelect = @$(\".skiplogic__delimselect\").val(@criterion_delimiter)\n      delimSelect.children('[value=' + @criterion_delimiter + ']').attr('selected', 'selected')\n\n      @\n\n    addCriterion: (evt) =>\n      @facade.view_factory.survey.trigger('change')\n      @facade.add_empty()\n\n    deleteCriterion: (evt)->\n      @facade.view_factory.survey.trigger('change')\n      $target = $(evt.target)\n      modelId = $target.data(\"criterionId\")\n      @facade.remove modelId\n      $target.parent().remove()\n\n    markChangedDelimSelector: (evt) ->\n      @criterion_delimiter = evt.target.value\n\n  class viewRowDetailSkipLogic.SkipLogicCriterion extends $viewWidgets.Base\n    tagName: 'div'\n    className: 'skiplogic__criterion'\n    render: () ->\n\n      @question_picker_view.render()\n      if !@alreadyRendered\n        @$el.append $(\"\"\"<i class=\"skiplogic__deletecriterion k-icon k-icon-trash\" data-criterion-id=\"#{@model.cid}\"></i>\"\"\")\n\n      @change_operator @operator_picker_view\n      @change_response @response_value_view\n\n      @alreadyRendered = true\n\n      @\n\n    mark_question_specified: (is_specified=false) ->\n      @$el.toggleClass(\"skiplogic__criterion--unspecified-question\", not is_specified)\n\n    bind_question_picker: () ->\n      questionVal = @$question_picker.val()\n\n      @mark_question_specified(questionVal isnt PLACEHOLDER_VALUE)\n\n      if questionVal isnt PLACEHOLDER_VALUE and questionVal isnt ''\n        @question_picker_view.disable_placeholder_option()\n\n      @$question_picker.on('change', (e) =>\n        if e.val is PLACEHOLDER_VALUE\n          console.error(\"Changing question to #{PLACEHOLDER_VALUE} should not happen!\")\n\n        @model.survey.trigger('change')\n\n        @mark_question_specified(e.val isnt PLACEHOLDER_VALUE)\n        @presenter.change_question(e.val)\n        return\n      )\n      return\n\n    bind_operator_picker: () ->\n      @$operator_picker.on('change', () =>\n        @operator_picker_view.value = @$operator_picker.select2 'val'\n        @presenter.change_operator(@operator_picker_view.value)\n        @model.survey.trigger('change')\n      )\n\n    bind_response_value: () ->\n      @response_value_view.bind_event(() =>\n        @presenter.change_response(@response_value_view.val())\n        @model.survey.trigger('change')\n      )\n\n    response_value_handler: () ->\n      @presenter.change_response @response_value_view.val()\n\n    change_operator: (@operator_picker_view) ->\n      @operator_picker_view.render()\n\n      @$operator_picker = @operator_picker_view.$el\n\n    change_response: (response_value_view) ->\n      @response_value_view.detach()\n      @response_value_view = response_value_view\n      @response_value_view.render()\n\n      @$response_value = @response_value_view.$el\n\n    attach_operator: () ->\n      @operator_picker_view.attach_to @$el\n      @bind_operator_picker()\n\n    attach_response: () ->\n      if @$('.skiplogic__responseval-wrapper').length > 0\n        @$('.skiplogic__responseval-wrapper').remove()\n\n      @response_value_view.attach_to(@$el)\n      @bind_response_value()\n\n    attach_to: (element) ->\n      @question_picker_view.attach_to @$el\n      @$question_picker = @question_picker_view.$el\n      @bind_question_picker()\n      @attach_operator()\n      @attach_response()\n      super(element)\n      return\n\n    constructor: (@question_picker_view, @operator_picker_view, @response_value_view, @presenter) ->\n      super()\n\n  ###----------------------------------------------------------------------------------------------------------###\n  #-- View.RowDetail.SkipLogic.QuestionPickerView.coffee\n  ###----------------------------------------------------------------------------------------------------------###\n\n  class viewRowDetailSkipLogic.QuestionPicker extends $viewWidgets.DropDown\n    tagName: 'select'\n    className: 'skiplogic__rowselect'\n\n    render: () ->\n      super()\n\n      # disable placeholder option onLoad and onChange\n      if @$el.val() isnt PLACEHOLDER_VALUE\n        @disable_placeholder_option()\n      @$el.on('change', @disable_placeholder_option.bind(@))\n\n      return @\n\n    disable_placeholder_option: ->\n      $firstChild = @$el.children(':first')\n      if $firstChild.val() is PLACEHOLDER_VALUE\n        $firstChild.prop('disabled', true)\n      return\n\n    attach_to: (target) ->\n      target.find('.skiplogic__rowselect').remove()\n      super(target)\n\n  ###----------------------------------------------------------------------------------------------------------###\n  #-- View.RowDetail.SkipLogic.OperatorPickerView.coffee\n  ###----------------------------------------------------------------------------------------------------------###\n\n  class viewRowDetailSkipLogic.OperatorPicker extends $viewWidgets.Base\n    tagName: 'div'\n    className: 'skiplogic__expressionselect'\n    render: () ->\n      @\n\n    attach_to: (target) ->\n      target.find('.skiplogic__expressionselect').remove()\n      super(target)\n\n      @$el.select2({\n        minimumResultsForSearch: -1\n        data: do () =>\n          operators = []\n          _.each @operators, (operator) ->\n            operators.push id: operator.id, text: operator.label + (if operator.id != 1 then ' (' + operator.symbol[operator.parser_name[0]] + ')' else '')\n            operators.push id: '-' + operator.id, text: operator.negated_label + (if operator.id != 1 then ' (' + operator.symbol[operator.parser_name[1]] + ')' else '')\n\n          operators\n      })\n\n      # workaround for missing elements when toggling skiplogic back and forth\n      target.find('.skiplogic__expressionselect.select2-container').show()\n\n      if @value\n        @val @value\n      else\n        @value = @$el.select2('val')\n\n      @$el.on 'select2-close', () => @_set_style()\n\n    val: (value) ->\n      if value?\n        @$el.select2 'val', value\n        @_set_style()\n        @value = value\n      else\n        return @$el.val()\n\n    _set_style: () -> #violates LSP\n      numValue = Number(@$el.val())\n\n      @$el.toggleClass('skiplogic__expressionselect--no-response-value', numValue in [-1, 1])\n\n      absolute_value = Math.abs(numValue)\n\n      if absolute_value is 0\n        return\n\n      operator = _.find(@operators, (operator) ->\n        return operator.id == absolute_value\n      )\n\n      if numValue < 0\n        abbreviated_label = operator['abbreviated_negated_label']\n      else\n        abbreviated_label = operator['abbreviated_label']\n\n      chosen_element = @$el.parents('.skiplogic__criterion').find('.select2-container.skiplogic__expressionselect .select2-chosen')\n      chosen_element.text(abbreviated_label)\n      return\n\n    constructor: (@operators) ->\n      super()\n\n  ###----------------------------------------------------------------------------------------------------------###\n  #-- View.RowDetail.SkipLogic.ResponseViews.coffee\n  ###----------------------------------------------------------------------------------------------------------###\n\n  class viewRowDetailSkipLogic.SkipLogicEmptyResponse extends $viewWidgets.EmptyView\n    className: 'skiplogic__responseval'\n    attach_to: (target) ->\n      target.find('.skiplogic__responseval').remove()\n      super(target)\n\n  class viewRowDetailSkipLogic.SkipLogicTextResponse extends $viewWidgets.TextBox\n    attach_to: (target) ->\n      target.find('.skiplogic__responseval').remove()\n      super(target)\n      return\n\n    bind_event: (handler) ->\n      @$el.on 'blur', handler\n\n    constructor: (text) ->\n      super(text, \"skiplogic__responseval\", t(\"response value\"))\n\n  class viewRowDetailSkipLogic.SkipLogicValidatingTextResponseView extends viewRowDetailSkipLogic.SkipLogicTextResponse\n    render: () ->\n      super()\n      @setElement('<div class=\"skiplogic__responseval-wrapper\">' + @$el + '<div></div></div>')\n      @$error_message = @$('div')\n      @model.bind 'validated:invalid', @show_invalid_view\n      @model.bind 'validated:valid', @clear_invalid_view\n      @$input = @$el.find('input')\n      return @\n\n    show_invalid_view: (model, errors) =>\n      if @$input.val()\n        @$el.addClass('textbox--invalid')\n        @$error_message.html(errors.value)\n        @$input.focus()\n    clear_invalid_view: (model, errors) =>\n      @$el.removeClass('textbox--invalid')\n      @$error_message.html('')\n\n    bind_event: (handler) ->\n      @$input.on 'change', handler\n\n    val: (value) =>\n      if value?\n        @$input.val(value)\n      else\n        @$input.val()\n\n  class viewRowDetailSkipLogic.SkipLogicDropDownResponse extends $viewWidgets.DropDown\n    tagName: 'select'\n    className: 'skiplogic__responseval'\n\n    attach_to: (target) ->\n      target.find('.skiplogic__responseval').remove()\n      super(target)\n      # workaround for missing elements when toggling skiplogic back and forth\n      target.find('.skiplogic__responseval.select2-container').show()\n\n    bind_event: (handler) ->\n      super 'change', handler\n\n    render: () ->\n      super()\n      handle_model_cid_change = () =>\n        @val(@model.get 'cid')\n\n      @model.off 'change:cid', handle_model_cid_change\n      @model.on 'change:cid', handle_model_cid_change\n\n    constructor: (@responses, @model) ->\n      super(_.map @responses.models, (response) ->\n        text: response.get('label')\n        value: response.cid\n      )\n\n  ###----------------------------------------------------------------------------------------------------------###\n  #-- Factories.RowDetail.SkipLogic.coffee\n  ###----------------------------------------------------------------------------------------------------------###\n\n  class viewRowDetailSkipLogic.SkipLogicViewFactory\n    constructor: (@survey) ->\n    create_question_picker: (target_question) ->\n      model = new $viewWidgets.DropDownModel()\n\n      set_options = () =>\n        options = _.map(target_question.selectableRows(), (row) ->\n          return {\n            value: row.cid\n            text: row.getValue(\"label\")\n          }\n        )\n\n        # add placeholder message/option\n        options.unshift({\n          value: PLACEHOLDER_VALUE\n          text: t(\"Select question from list\")\n        })\n\n        model.set('options', options)\n        return\n\n      set_options()\n      @survey.on('sortablestop', set_options)\n\n      return new viewRowDetailSkipLogic.QuestionPicker(model)\n\n    create_operator_picker: (question_type) ->\n      operators = if question_type? then _.filter($skipLogicHelpers.operator_types, (op_type) -> op_type.id in question_type.operators) else []\n      new viewRowDetailSkipLogic.OperatorPicker operators\n    create_response_value_view: (question, question_type, operator_type) ->\n      if !question?\n        type = 'empty'\n      else if operator_type.response_type?\n        type = operator_type.response_type\n      else\n        type = question_type.response_type\n\n      switch type\n        when 'empty' then new viewRowDetailSkipLogic.SkipLogicEmptyResponse()\n        when 'text' then new viewRowDetailSkipLogic.SkipLogicTextResponse\n        when 'dropdown' then new viewRowDetailSkipLogic.SkipLogicDropDownResponse question.getList().options\n        when 'integer', 'decimal' then new viewRowDetailSkipLogic.SkipLogicTextResponse\n        else null\n    create_criterion_view: (question_picker_view, operator_picker_view, response_value_view, presenter) ->\n      return new viewRowDetailSkipLogic.SkipLogicCriterion question_picker_view, operator_picker_view, response_value_view, presenter\n    create_criterion_builder_view: () ->\n      return new viewRowDetailSkipLogic.SkipLogicCriterionBuilderView()\n    create_textarea: (text, className) ->\n      return new $viewWidgets.TextArea text, className\n    create_button: (text, className) ->\n      return new $viewWidgets.Button text, className\n    create_textbox: (text, className='', placeholder='') ->\n      return new $viewWidgets.TextBox text, className, placeholder\n    create_label: (text, className) ->\n      return new $viewWidgets.Label text, className\n    create_empty: () ->\n      return new $viewWidgets.EmptyView()\n\n\n  viewRowDetailSkipLogic\n","base = require './model.base'\n\nmodule.exports = do ->\n\n  # SurveyDetails (attached to a XLF.Survey instance) containing details such as\n  #     start time, deviceid, (etc.)\n  class SurveyDetail extends base.BaseModel\n    idAttribute: \"name\"\n\n    toJSON: ()->\n      if @get(\"value\")\n        out = {}\n\n        out.name = @get(\"name\")\n        # type is same as name\n        out.type = out.name\n\n        parameters = @get(\"parameters\")\n        if parameters\n          out.parameters = parameters\n\n        return out\n      else\n        return false\n\n  class SurveyDetails extends base.BaseCollection\n    model: SurveyDetail\n\n    loadSchema: (schema)->\n      # throw new Error(\"Schema must be a Backbone.Collection\")  unless schema instanceof Backbone.Collection\n      for item in schema.models\n        @add(new SurveyDetail(item._forSurvey()))\n      @_schema = schema\n\n      # we could prevent future changes to the schema...\n      @add = @loadSchema = ()-> throw new Error(\"New survey details must be added to the schema\")\n      return @\n\n    importDefaults: ()->\n      for item in @_schema.models\n        relevantDetail = @get(item.get(\"name\"))\n        relevantDetail.set(\"value\", item.get(\"default\"))\n      return\n\n    importDetail: (detail)->\n      # For now, every detail which is presented is given a boolean value set to true\n      if (dtobj = @get(detail.type))\n        if detail.parameters\n          dtobj.set(\"parameters\", detail.parameters)\n        dtobj.set(\"value\", true)\n      else\n        throw new Error(\"SurveyDetail `#{key}` not loaded from schema. [Aliases have not been implemented]\")\n      return\n\n  SurveyDetails: SurveyDetails\n  SurveyDetail: SurveyDetail\n","import React from 'react'\nimport {AssetTypeName} from 'js/constants'\nimport {stores} from 'js/stores'\nimport permConfig from 'js/components/permissions/permConfig'\nimport {buildUserUrl} from 'js/utils'\nimport {\n  ASSET_TYPES,\n  MODAL_TYPES,\n  QUESTION_TYPES,\n  META_QUESTION_TYPES,\n  GROUP_TYPES_BEGIN,\n  GROUP_TYPES_END,\n  SCORE_ROW_TYPE,\n  RANK_LEVEL_TYPE,\n  ANON_USERNAME,\n  PERMISSIONS_CODENAMES,\n  ACCESS_TYPES,\n  ROOT_URL,\n  AnyRowTypeName,\n  QuestionTypeName,\n} from 'js/constants';\n\n/**\n * Removes whitespace from tags. Returns list of cleaned up tags.\n * NOTE: Behavior should match KpiTaggableManager.add()\n */\nexport function cleanupTags(tags: string[]) {\n  return tags.map(function(tag) {\n    return tag.trim().replace(/ /g, '-');\n  });\n}\n\n/**\n * Returns nicer \"me\" label for your own assets.\n */\nexport function getAssetOwnerDisplayName(username: string) {\n  if (\n    stores.session.currentAccount &&\n    stores.session.currentAccount.username &&\n    stores.session.currentAccount.username === username\n  ) {\n    return t('me');\n  } else {\n    return username;\n  }\n}\n\nexport function getOrganizationDisplayString(asset: AssetResponse) {\n  if (asset.settings.organization) {\n    return asset.settings.organization;\n  } else {\n    return '-';\n  }\n}\n\n/**\n * Note: `langString` is language string (the de facto \"id\").\n * Returns the index of language or null if not found.\n */\nexport function getLanguageIndex(asset: AssetResponse, langString: string) {\n  let foundIndex = null;\n\n  if (\n    Array.isArray(asset.summary?.languages) &&\n    asset.summary?.languages.length >= 1\n  ) {\n    asset.summary.languages.forEach((language, index) => {\n      if (language === langString) {\n        foundIndex = index;\n      }\n    });\n  }\n\n  return foundIndex;\n}\n\nexport function getLanguagesDisplayString(asset: AssetResponse) {\n  if (\n    asset.summary &&\n    asset.summary.languages &&\n    asset.summary.languages.length >= 1\n  ) {\n    return asset.summary.languages.join(', ');\n  } else {\n    return '-';\n  }\n}\n\nexport function getSectorDisplayString(asset: AssetResponse) {\n  if (asset.settings.sector) {\n    return asset.settings.sector.label;\n  } else {\n    return '-';\n  }\n}\n\nexport function getCountryDisplayString(asset: AssetResponse, showLongName: boolean = false) {\n  if (asset.settings.country) {\n    return showLongName ? asset.settings.country.label : asset.settings.country.value;\n  } else {\n    return '-';\n  }\n}\n\ninterface DisplayNameObj {\n  original?: string // Name typed in by user.\n  question?: string // First question name.\n  empty?: string // Set when no other is available.\n  final: string // original, question or empty name - the one to be displayed.\n}\n\n/**\n * Returns a name to be displayed for asset (especially unnamed ones) - an object\n * containing final name and all useful data. Most of the times you should use\n * `getAssetDisplayName(…).final`.\n */\nexport function getAssetDisplayName(asset: AssetResponse): DisplayNameObj {\n  const emptyName = t('untitled');\n\n  const output: DisplayNameObj = {\n    // empty name is a fallback\n    final: emptyName\n  };\n\n  if (asset.name) {\n    output.original = asset.name;\n  }\n  if (asset.summary && asset.summary.labels && asset.summary.labels.length > 0) {\n    // for unnamed assets, we try to display first question name\n    output.question = asset.summary.labels[0];\n  }\n  if (!output.original && !output.question) {\n    output.empty = emptyName;\n  }\n\n  // We prefer original name over question name\n  if (output.original) {\n    output.final = output.original;\n  } else if (output.question) {\n    output.final = output.question;\n  }\n\n  return output;\n}\n\n/**\n * Returns usable name of the question or choice when possible, fallbacks to\n * \"Unlabelled\". `translationIndex` defaults to first (default) language.\n */\nexport function getQuestionOrChoiceDisplayName(\n  questionOrChoice: SurveyRow | SurveyChoice,\n  translationIndex: number = 0\n): string {\n  if (questionOrChoice.label && Array.isArray(questionOrChoice.label)) {\n    return questionOrChoice.label[translationIndex];\n  } else if (questionOrChoice.label && !Array.isArray(questionOrChoice.label)) {\n    // in rare cases the label could be a string\n    return questionOrChoice.label;\n  } else if (questionOrChoice.name) {\n    return questionOrChoice.name;\n  // the \"string in obj\" is needed because choice type doesn't have $autoname\n  } else if ('$autoname' in questionOrChoice && questionOrChoice.$autoname) {\n    return questionOrChoice.$autoname;\n  } else {\n    return t('Unlabelled');\n  }\n}\n\nexport function isLibraryAsset(assetType: AssetTypeName) {\n  return (\n    assetType === ASSET_TYPES.question.id ||\n    assetType === ASSET_TYPES.block.id ||\n    assetType === ASSET_TYPES.template.id ||\n    assetType === ASSET_TYPES.collection.id\n  );\n}\n\n/**\n * For getting the icon class name for given asset type. Returned string always\n * contains two class names: base `k-icon` and respective CSS class name.\n */\nexport function getAssetIcon(asset: AssetResponse) {\n  switch (asset.asset_type) {\n    case ASSET_TYPES.template.id:\n      if (asset.summary?.lock_any) {\n        return 'k-icon k-icon-template-locked';\n      } else {\n        return 'k-icon k-icon-template';\n      }\n    case ASSET_TYPES.question.id:\n      return 'k-icon k-icon-question';\n    case ASSET_TYPES.block.id:\n      return 'k-icon k-icon-block';\n    case ASSET_TYPES.survey.id:\n      if (asset.summary?.lock_any) {\n        return 'k-icon k-icon-form-locked';\n      } else if (asset.has_deployment && !asset.deployment__active) {\n        return 'k-icon k-icon-form-archived';\n      } else if (asset.has_deployment) {\n        return 'k-icon k-icon-form-deployed';\n      } else {\n        return 'k-icon k-icon-form-draft';\n      }\n    case ASSET_TYPES.collection.id:\n      if (asset.access_types && asset.access_types.includes(ACCESS_TYPES.subscribed)) {\n        return 'k-icon k-icon-folder-subscribed';\n      } else if (isAssetPublic(asset.permissions)) {\n        return 'k-icon k-icon-folder-public';\n      } else if (asset.access_types && asset.access_types.includes(ACCESS_TYPES.shared)) {\n        return 'k-icon k-icon-folder-shared';\n      } else {\n        return 'k-icon k-icon-folder';\n      }\n    default:\n      return 'k-icon k-icon-form';\n  }\n}\n\n/**\n * Opens a modal for editing asset details.\n */\nexport function modifyDetails(asset: AssetResponse) {\n  let modalType;\n  if (asset.asset_type === ASSET_TYPES.template.id) {\n    modalType = MODAL_TYPES.LIBRARY_TEMPLATE;\n  } else if (asset.asset_type === ASSET_TYPES.collection.id) {\n    modalType = MODAL_TYPES.LIBRARY_COLLECTION;\n  }\n  if (modalType) {\n    stores.pageState.showModal({\n      type: modalType,\n      asset: asset,\n    });\n  } else {\n    throw new Error(`Unsupported asset type: ${asset.asset_type}.`)\n  }\n}\n\n/**\n * Opens a modal for sharing asset.\n */\nexport function share(asset: AssetResponse) {\n  stores.pageState.showModal({\n    type: MODAL_TYPES.SHARING,\n    assetid: asset.uid,\n  });\n}\n\n/**\n * Opens a modal for modifying asset languages and translation strings.\n */\nexport function editLanguages(asset: AssetResponse) {\n  stores.pageState.showModal({\n    type: MODAL_TYPES.FORM_LANGUAGES,\n    asset: asset,\n  });\n}\n\n/**\n * Opens a modal for modifying asset tags (also editable in Details Modal).\n */\nexport function editTags(asset: AssetResponse) {\n  stores.pageState.showModal({\n    type: MODAL_TYPES.ASSET_TAGS,\n    asset: asset,\n  });\n}\n\n/**\n * Opens a modal for replacing an asset using a file.\n */\nexport function replaceForm(asset: AssetResponse) {\n  stores.pageState.showModal({\n    type: MODAL_TYPES.REPLACE_PROJECT,\n    asset: asset,\n  });\n}\n\ntype SurveyFlatPaths = {\n  [P in string]: string\n}\n\n/**\n * NOTE: this works based on a fact that all questions have unique names.\n * @param includeGroups - wheter to put groups into output\n * @param includeMeta - whether to include meta question types (false on default)\n * Returns object with pairs of quesion names and their full paths\n */\nexport function getSurveyFlatPaths(\n  survey: SurveyRow[],\n  includeGroups: boolean = false,\n  includeMeta: boolean = false\n): SurveyFlatPaths {\n  const output: SurveyFlatPaths = {};\n  const openedGroups: string[] = [];\n\n  survey.forEach((row) => {\n    const rowName = getRowName(row);\n    if (GROUP_TYPES_BEGIN.hasOwnProperty(row.type)) {\n      openedGroups.push(rowName);\n      if (includeGroups) {\n        output[rowName] = openedGroups.join('/');\n      }\n    } else if (GROUP_TYPES_END.hasOwnProperty(row.type)) {\n      openedGroups.pop();\n    } else if (\n      QUESTION_TYPES.hasOwnProperty(row.type) ||\n      row.type === SCORE_ROW_TYPE ||\n      row.type === RANK_LEVEL_TYPE ||\n      (includeMeta && META_QUESTION_TYPES.hasOwnProperty(row.type))\n    ) {\n      let groupsPath = '';\n      if (openedGroups.length >= 1) {\n        groupsPath = openedGroups.join('/') + '/';\n      }\n      output[rowName] = `${groupsPath}${rowName}`;\n    }\n  });\n\n  return output;\n}\n\nexport function getRowName(row: SurveyRow | SurveyChoice) {\n  return row.name || ('$autoname' in row && row.$autoname) || row.$kuid;\n}\n\n/**\n * @param rowName - could be either a survey row name or choices row name\n * @param data - is either a survey or choices\n * Returns null for not found\n */\nexport function getTranslatedRowLabel(\n  rowName: string,\n  data: SurveyRow[] | SurveyChoice[],\n  translationIndex: number\n): string | null {\n  let foundRowIndex: number | undefined;\n  let foundRow: SurveyRow | SurveyChoice | undefined;\n\n  data.forEach((row, rowIndex) => {\n    if (getRowName(row) === rowName) {\n      foundRow = row;\n      foundRowIndex = rowIndex;\n    }\n  });\n\n  if (typeof foundRow === 'object' && foundRow.hasOwnProperty('label')) {\n    return getRowLabelAtIndex(foundRow, translationIndex);\n  } else if (typeof foundRow === 'object' && typeof foundRowIndex === 'number') {\n    // that mysterious row always comes as a next row\n    let possibleRow = data[foundRowIndex + 1];\n    if (isRowSpecialLabelHolder(foundRow, possibleRow)) {\n      return getRowLabelAtIndex(possibleRow, translationIndex);\n    }\n  }\n\n  return null;\n}\n\n/**\n * If a row doesn't have a label it is very possible that this is\n * a complex type of form item (e.g. ranking, matrix) that was constructed\n * as a group and a row by Backend. This function detects if this is the case.\n */\nexport function isRowSpecialLabelHolder(\n  mainRow: SurveyRow | SurveyChoice,\n  holderRow: SurveyRow | SurveyChoice\n): boolean {\n  if (!mainRow || !holderRow || !Object.prototype.hasOwnProperty.call(holderRow, 'label')) {\n    return false;\n  } else {\n    let mainRowName = getRowName(mainRow);\n    let holderRowName = getRowName(holderRow);\n    return (\n      (\n        // this handles ranking questions\n        'type' in holderRow &&\n        holderRowName === `${mainRowName}_label` &&\n        holderRow.type === QUESTION_TYPES.note.id\n      ) ||\n      (\n        // this handles matrix questions (partially)\n        'type' in holderRow &&\n        holderRowName === `${mainRowName}_note` &&\n        holderRow.type === QUESTION_TYPES.note.id\n      ) ||\n      (\n        // this handles rating questions\n        'type' in holderRow &&\n        holderRowName === `${mainRowName}_header` &&\n        holderRow.type === QUESTION_TYPES.select_one.id // rating\n      )\n    );\n  }\n}\n\n/**\n * An internal helper function for DRY code\n */\nfunction getRowLabelAtIndex(\n  row: SurveyRow | SurveyChoice,\n  index: number\n): string | null {\n  if (Array.isArray(row.label)) {\n    return row.label[index] || null;\n  } else {\n    return row.label || null;\n  }\n}\n\nexport function renderQuestionTypeIcon(\n  rowType: AnyRowTypeName\n): React.DetailedReactHTMLElement<{}, HTMLElement> | null {\n  let iconClassName: string = '';\n\n  if (rowType === SCORE_ROW_TYPE) {\n    iconClassName = QUESTION_TYPES.score.icon;\n  } else if (rowType === RANK_LEVEL_TYPE) {\n    iconClassName = QUESTION_TYPES.rank.icon;\n  } else if (QUESTION_TYPES.hasOwnProperty(rowType)) {\n    // We need to cast with `as` operator to avoid typescript complaining that\n    // we can't use AnyRowTypeName as index for QuestionTypes.\n    const rowTypeAsQuestionType = rowType as QuestionTypeName;\n    iconClassName = QUESTION_TYPES[rowTypeAsQuestionType].icon;\n  }\n\n  if (rowType === META_QUESTION_TYPES['background-audio']) {\n    iconClassName = 'k-icon-qt-audio';\n  } else if (META_QUESTION_TYPES.hasOwnProperty(rowType)) {\n    iconClassName = 'qt-meta-default';\n  }\n\n  if (iconClassName) {\n    return React.createElement(\n      'i',\n      {\n        className: `k-icon k-icon-${iconClassName}`,\n        title: rowType\n      }\n    );\n  } else {\n    return null;\n  }\n}\n\ninterface FlatQuestion {\n  type: AnyRowTypeName\n  name: string\n  isRequired: boolean\n  label: string\n  path: string\n  parents: string[]\n  hasRepatParent: boolean\n}\n\n/**\n * Use this to get a nice parsed list of survey questions (optionally with meta\n * questions included). Useful when you need to render form questions to users.\n *\n * @param {Object} survey\n * @param {number} [translationIndex] - defaults to first (default) language\n * @param {boolean} [includeMeta] - whether to include meta question types (false on default)\n * @returns {Array<object>} a list of parsed questions\n */\nexport function getFlatQuestionsList(\n  survey: SurveyRow[],\n  translationIndex: number = 0,\n  includeMeta: boolean = false\n): FlatQuestion[] {\n  const flatPaths = getSurveyFlatPaths(survey, false, true);\n  const output: FlatQuestion[] = [];\n  const openedGroups: string[] = [];\n  let openedRepeatGroupsCount = 0;\n\n  survey.forEach((row) => {\n    if (row.type === 'begin_group' || row.type === 'begin_repeat') {\n      openedGroups.push(getQuestionOrChoiceDisplayName(row, translationIndex));\n    }\n    if (row.type === 'end_group' || row.type === 'end_repeat') {\n      openedGroups.pop();\n    }\n\n    if (row.type === 'begin_repeat') {\n      openedRepeatGroupsCount++;\n    } else if (row.type === 'end_repeat') {\n      openedRepeatGroupsCount--;\n    }\n\n    if (\n      QUESTION_TYPES.hasOwnProperty(row.type) ||\n      (includeMeta && META_QUESTION_TYPES.hasOwnProperty(row.type))\n    ) {\n      const rowName = getRowName(row);\n      output.push({\n        type: row.type,\n        name: rowName,\n        isRequired: Boolean(row.required),\n        label: getQuestionOrChoiceDisplayName(row, translationIndex),\n        path: flatPaths[rowName],\n        parents: openedGroups.slice(0),\n        hasRepatParent: openedRepeatGroupsCount >= 1,\n      });\n    }\n  });\n\n  return output;\n}\n\n/**\n * Validates asset data to see if ready to be made public.\n * NOTE: currently we assume the asset type is `collection`.\n *\n * Returns an array of errors (empty array means no errors)\n */\nexport function isAssetPublicReady(asset: AssetResponse): string[] {\n  const errors = [];\n\n  if (asset.asset_type === ASSET_TYPES.collection.id) {\n    if (!asset.name || !asset.settings.organization || !asset.settings.sector) {\n      errors.push(t('Name, organization and sector are required to make collection public.'));\n    }\n    if (asset.children.count === 0) {\n      errors.push(t('Empty collection is not allowed to be made public.'));\n    }\n  } else {\n    errors.push(t('Only collections are allowed to be made public!'));\n  }\n\n  return errors;\n}\n\n/**\n * Checks whether the asset is public - i.e. visible and discoverable by anyone.\n * Note that `view_asset` is implied when you have `discover_asset`.\n */\nexport function isAssetPublic(permissions: Permission[]) {\n  let isDiscoverableByAnonymous = false;\n  permissions.forEach((perm) => {\n    const foundPerm = permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.discover_asset);\n    if (\n      perm.user === buildUserUrl(ANON_USERNAME) &&\n      foundPerm !== undefined &&\n      perm.permission === foundPerm.url\n    ) {\n      isDiscoverableByAnonymous = true;\n    }\n  });\n  return isDiscoverableByAnonymous;\n}\n\nexport function isSelfOwned(asset: AssetResponse) {\n  return (\n    asset &&\n    stores.session.currentAccount &&\n    asset.owner__username === stores.session.currentAccount.username\n  );\n}\n\nexport function buildAssetUrl(assetUid: string) {\n  return `${ROOT_URL}/api/v2/assets/${assetUid}/`;\n}\n\n/*\n* Inspired by https://gist.github.com/john-doherty/b9195065884cdbfd2017a4756e6409cc\n* Remove everything forbidden by XML 1.0 specifications, plus the unicode replacement character U+FFFD\n* @param {string} str\n*/\nexport function removeInvalidChars(str: string) {\n  var regex = /((?:[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\uFFFD\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]))/g;\n  return str = String(str || '').replace(regex, '');\n}\n\nexport default {\n  buildAssetUrl,\n  cleanupTags,\n  editLanguages,\n  editTags,\n  getAssetDisplayName,\n  getAssetIcon,\n  getAssetOwnerDisplayName,\n  getCountryDisplayString,\n  getFlatQuestionsList,\n  getLanguageIndex,\n  getLanguagesDisplayString,\n  getOrganizationDisplayString,\n  getQuestionOrChoiceDisplayName,\n  getRowName,\n  getSectorDisplayString,\n  getSurveyFlatPaths,\n  getTranslatedRowLabel,\n  isAssetPublic,\n  isAssetPublicReady,\n  isLibraryAsset,\n  isRowSpecialLabelHolder,\n  isSelfOwned,\n  modifyDetails,\n  renderQuestionTypeIcon,\n  replaceForm,\n  share,\n  removeInvalidChars,\n};\n","global = @\n\n_ = require 'underscore'\nBackbone = require 'backbone'\nalertify = require 'alertifyjs'\nbase = require './model.base'\n$configs = require './model.configs'\n$utils = require './model.utils'\n$surveyDetail = require './model.surveyDetail'\n$aliases = require './model.aliases'\n$rowDetail = require './model.rowDetail'\n$choices = require './model.choices'\n$skipLogicHelpers = require './mv.skipLogicHelpers'\nreadParameters = require('../../js/components/formBuilder/formBuilderUtils').readParameters\nwriteParameters = require('../../js/components/formBuilder/formBuilderUtils').writeParameters\n\nmodule.exports = do ->\n  row = {}\n\n  class row.BaseRow extends base.BaseModel\n    @kls = \"BaseRow\"\n    constructor: (attributes={}, options={})->\n      for key, val of attributes when key is \"\"\n        delete attributes[key]\n      super(attributes, options)\n\n    ensureKuid: ->\n      if '$kuid' not of @attributes\n        @set '$kuid', $utils.txtid()\n\n    initialize: ->\n      @ensureKuid()\n      @convertAttributesToRowDetails()\n\n    isError: -> false\n    convertAttributesToRowDetails: ->\n      for key, val of @attributes\n        unless val instanceof $rowDetail.RowDetail\n          @set key, new $rowDetail.RowDetail({key: key, value: val}, {_parent: @}), {silent: true}\n    attributesArray: ()->\n      arr = ([k, v] for k, v of @attributes)\n      arr.sort (a,b)-> if a[1]._order < b[1]._order then -1 else 1\n      arr\n\n    isGroup: ->\n      @constructor.kls is \"Group\"\n\n    isInGroup: ->\n      @_parent?._parent?.constructor.kls is \"Group\"\n\n    detach: (opts)->\n      if @_parent\n        @_parent.remove @, opts\n        @_parent = null\n      ` `\n\n    selectableRows: () ->\n      questions = []\n      limit = false\n\n      non_selectable = ['datetime', 'time', 'note', 'calculate', 'group', 'kobomatrix', 'repeat', 'rank', 'score']\n\n      survey = @getSurvey()\n      if survey == null\n        return null\n      survey.forEachRow (question) =>\n        limit = limit || question is @\n        if !limit && question.getValue('type') not in non_selectable\n          questions.push question\n      , includeGroups:true\n      questions\n\n    export_relevant_values: (survey_arr, additionalSheets)->\n      survey_arr.push @toJSON2()\n\n    toJSON2: ->\n      outObj = {}\n      for [key, val] in @attributesArray()\n        if key is 'type' and val.get('typeId') in ['select_one', 'select_multiple']\n          outObj['type'] = val.get('typeId')\n          outObj['select_from_list_name'] = val.get('listName')\n          continue\n        else\n          result = @getValue(key)\n        unless @hidden\n          if _.isBoolean(result)\n            outObj[key] = $configs.boolOutputs[if result then \"true\" else \"false\"]\n          else if '' isnt result\n            outObj[key] = result\n      outObj\n\n    toJSON: ->\n      outObj = {}\n      for [key, val] in @attributesArray()\n        result = @getValue(key)\n        unless @hidden\n          if _.isBoolean(result)\n            outObj[key] = $configs.boolOutputs[if result then \"true\" else \"false\"]\n          else\n            outObj[key] = result\n      outObj\n\n  class SimpleRow extends Backbone.Model\n    finalize: -> ``\n    simpleEnsureKuid: ->\n      if '$kuid' not of @attributes\n        @set('$kuid', $utils.txtid())\n    getTypeId: -> @get('type')\n    linkUp: ->\n    _isSelectQuestion: ()-> false\n    get_type: ->\n      $skipLogicHelpers.question_types[@getTypeId()] || $skipLogicHelpers.question_types['default']\n    getValue: (which)-> @get(which)\n\n  class RankRow extends SimpleRow\n    initialize: ->\n      @simpleEnsureKuid()\n      @set('type', 'rank__level')\n    export_relevant_values: (surv, sheets)->\n      surv.push @attributes\n\n  class ScoreRankMixin\n    _extendAll: (rr)->\n      extend_to_row = (val, key)=>\n        if _.isFunction(val)\n          rr[key] = (args...)->\n            val.apply(rr, args)\n        else\n          rr[key] = val\n      _.each @, extend_to_row\n      extend_to_row(@forEachRow, 'forEachRow')\n      _begin_kuid = rr.getValue('$kuid', false)\n      _end_json = @end_json({\"$kuid\": \"/#{_begin_kuid}\"})\n\n      rr._afterIterator = (cb, ctxt)->\n        obj =\n          export_relevant_values: (surv, addl)->\n            surv.push _.extend({}, _end_json)\n          toJSON: ->\n            _.extend({}, _end_json)\n\n        cb(obj)  if ctxt.includeGroupEnds\n\n      _toJSON = rr.toJSON\n\n      rr.clone = ()->\n        attributes = rr.toJSON2()\n\n        options =\n          _parent: rr._parent\n          add: false\n          merge: false\n          remove: false\n          silent: true\n\n        r2 = new row.Row(attributes, options)\n        r2._isCloned = true\n\n        if rr._rankRows\n          # if rr is a rank question\n          for rankRow in rr._rankRows.models\n            r2._rankRows.add(rankRow.toJSON())\n          r2._rankLevels = rr.getSurvey().choices.add(name: $utils.txtid())\n          for item in rr.getList().options.models\n            r2._rankLevels.options.add(item.toJSON())\n          r2.set('kobo--rank-items', r2._rankLevels.get('name'))\n          @convertAttributesToRowDetails()\n          r2.get('type').set('list', r2._rankLevels)\n        else\n          # if rr is a score question\n          for scoreRow in rr._scoreRows.models\n            r2._scoreRows.add(scoreRow.toJSON())\n          r2._scoreChoices = rr.getSurvey().choices.add(name: $utils.txtid())\n          for item in rr.getList().options.models\n            r2._scoreChoices.options.add(item.toJSON())\n          r2.set('kobo--score-choices', r2._scoreChoices.get('name'))\n          @convertAttributesToRowDetails()\n          r2.get('type').set('list', r2._scoreChoices)\n        r2\n\n      rr.toJSON = ()->\n        _.extend _toJSON.call(rr), {\n          'type': \"begin_#{rr._beginEndKey()}\"\n        }, @_additionalJson?()\n\n      _.each @constructor.prototype, extend_to_row\n      if rr.attributes.__rows\n        for subrow in rr.attributes.__rows\n          @[@_rowAttributeName].add(subrow)\n        delete rr.attributes.__rows\n\n    getValue: (which)->\n      @get(which)\n\n    end_json: (mrg={})->\n      _.extend({type: \"end_#{@_beginEndKey()}\"}, mrg)\n\n    forEachRow: (cb, ctx)->\n      cb(@)\n      @[@_rowAttributeName].each (subrow)-> cb(subrow)\n      @_afterIterator(cb, ctx)  if '_afterIterator' of @\n\n\n  class RankRows extends Backbone.Collection\n    model: RankRow\n\n  class RankMixin extends ScoreRankMixin\n    constructor: (rr)->\n      @_rankRows = new RankRows()\n      @_rowAttributeName = '_rankRows'\n      @_extendAll(rr)\n      rankConstraintMessageKey = 'kobo--rank-constraint-message'\n      if !rr.get(rankConstraintMessageKey)\n        rr.set(rankConstraintMessageKey, t(\"Items cannot be selected more than once\"))\n\n    _beginEndKey: ->\n      'rank'\n\n    linkUp: (ctx)->\n      rank_list_id = @get('kobo--rank-items')?.get('value')\n      if rank_list_id\n        @_rankLevels = @getSurvey().choices.get(rank_list_id)\n      else\n        @_rankLevels = @getSurvey().choices.create()\n      @_additionalJson = =>\n        'kobo--rank-items': @getList().get('name')\n      @getList = => @_rankLevels\n\n    export_relevant_values: (survey_arr, additionalSheets)->\n      if @_rankLevels\n        additionalSheets['choices'].add(@_rankLevels)\n      begin_xlsformrow = _.clone(@toJSON2())\n      begin_xlsformrow.type = \"begin_rank\"\n      begin_xlsformrow['kobo--rank-items'] = @getList().get('name')\n      survey_arr.push(begin_xlsformrow)\n      ``\n\n  class ScoreChoiceList extends Array\n\n  class ScoreRow extends SimpleRow\n    initialize: ->\n      @set('type', 'score__row')\n      @simpleEnsureKuid()\n    export_relevant_values: (surv, sheets)->\n      surv.push(@attributes)\n\n  class ScoreRows extends Backbone.Collection\n    model: ScoreRow\n\n  class ScoreMixin extends ScoreRankMixin\n    constructor: (rr)->\n      @_scoreRows = new ScoreRows()\n      @_rowAttributeName = '_scoreRows'\n      @_extendAll(rr)\n\n    _beginEndKey: ->\n      'score'\n\n    linkUp: (ctx)->\n      @getList = ()=> @_scoreChoices\n      @_additionalJson = ()=>\n        'kobo--score-choices': @getList().get('name')\n      score_list_id_item = @get('kobo--score-choices')\n      if score_list_id_item\n        score_list_id = score_list_id_item.get('value')\n        if score_list_id\n          @_scoreChoices = @getSurvey().choices.get(score_list_id)\n        else\n          ctx.warnings.push \"Score choices list not found\"\n          @_scoreChoices = @getSurvey().choices.add({})\n      else\n        ctx.warnings.push \"Score choices list not set\"\n        @_scoreChoices = @getSurvey().choices.add(name: $utils.txtid())\n      ``\n\n    export_relevant_values: (survey_arr, additionalSheets)->\n      score_list = @_scoreChoices\n      if score_list\n        additionalSheets['choices'].add(score_list)\n      output = _.clone(@toJSON2())\n      output.type = \"begin_score\"\n      output['kobo--score-choices'] = @getList().get('name')\n      survey_arr.push(output)\n      ``\n\n  class row.Row extends row.BaseRow\n    @kls = \"Row\"\n    initialize: ->\n      ###\n      The best way to understand the @details collection is\n      that it is a list of cells of the XLSForm spreadsheet.\n      The column name is the \"key\" and the value is the \"value\".\n      We opted for a collection (rather than just saving in the attributes of\n      this model) because of the various state-related attributes\n      that need to be saved for each cell and this allows more room to grow.\n\n      E.g.: {\"key\": \"type\", \"value\": \"select_one colors\"}\n            needs to keep track of how the value was built\n      ###\n      if @_parent\n        defaultsUnlessDefined = @_parent.newRowDetails || $configs.newRowDetails\n        defaultsForType = @_parent.defaultsForType || $configs.defaultsForType\n      else\n        console?.error \"Row not linked to parent survey.\"\n        defaultsUnlessDefined = $configs.newRowDetails\n        defaultsForType = $configs.defaultsForType\n\n      if @attributes.type and @attributes.type of defaultsForType\n        curTypeDefaults = defaultsForType[@attributes.type]\n      else\n        curTypeDefaults = {}\n\n      defaults = _.extend {}, defaultsUnlessDefined, curTypeDefaults\n\n      for key, vals of defaults\n        unless key of @attributes\n          newVals = {}\n          for vk, vv of vals\n            newVals[vk] = if (\"function\" is typeof vv) then vv() else vv\n          @set key, newVals\n\n      if '$kuid' not of @attributes\n        @set '$kuid', $utils.txtid()\n\n      _type = @getValue('type')\n\n      if _type is 'score'\n        new ScoreMixin(@)\n      else if _type is 'rank'\n        new RankMixin(@)\n      @convertAttributesToRowDetails()\n\n      typeDetail = @get(\"type\")\n      tpVal = typeDetail.get(\"value\")\n      select_from_list_name = @get(\"select_from_list_name\")\n      if select_from_list_name and tpVal\n        tpVal = \"#{tpVal} #{select_from_list_name.get('value')}\"\n        typeDetail.set(\"value\", tpVal, silent: true)\n\n      processType = (rd, newType, ctxt)=>\n        # if value changes, it could be set from an initialization value\n        # or it could be changed elsewhere.\n        # we need to keep typeId, listName, and orOther in sync.\n        if _.isObject(newType)\n          tpid = _.keys(newType)[0]\n          p2 = _.values(newType)[0]\n        else\n          [tpid, p2, p3] = newType.split(\" \")\n\n        typeDetail.set(\"typeId\", tpid, silent: true)\n        if p2\n          typeDetail.set(\"listName\", p2, silent: true)\n          matchedList = @getSurvey().choices.get(p2)\n          if matchedList\n            typeDetail.set(\"list\", matchedList)\n        if p3 is \"or_other\" or tpid in [\"select_one_or_other\", \"select_multiple_or_other\"]\n          typeDetail.set(\"orOther\", p3, silent: true)\n        if (rtp = $configs.lookupRowType(tpid))\n          typeDetail.set(\"rowType\", rtp, silent: true)\n        else\n          throw new Error \"type `#{tpid}` not found\"\n      processType(typeDetail, tpVal, {})\n      typeDetail.on \"change:value\", processType\n      typeDetail.on \"change:listName\", (rd, listName, ctx)->\n        rtp = typeDetail.get(\"rowType\")\n        typeStr = \"#{typeDetail.get(\"typeId\")}\"\n        if rtp.specifyChoice and listName\n          typeStr += \" #{listName}\"\n        if rtp.orOtherOption and typeDetail.get(\"orOther\")\n          typeStr += \" or_other\"\n        typeDetail.set({value: typeStr}, silent: true)\n      typeDetail.on \"change:list\", (rd, cl, ctx)->\n        if typeDetail.get(\"rowType\").specifyChoice\n          clname = cl.get(\"name\")\n          unless clname\n            clname = $utils.txtid()\n            cl.set(\"name\", clname, silent: true)\n          @set(\"value\", \"#{@get('typeId')} #{clname}\")\n    getTypeId: ->\n      @get('type').get('typeId')\n    clone: ->\n      attributes = {}\n      options =\n        _parent: @_parent\n        add: false\n        merge: false\n        remove: false\n        silent: true\n\n\n      _.each @attributes, (value, key) => attributes[key] = @getValue key\n\n      newRow = new row.Row attributes, options\n\n      newRowType = newRow.get('type')\n      if newRowType.get('typeId') in ['select_one', 'select_multiple']\n        newRowType.set 'list', @getList().clone()\n        newRowType.set 'listName', newRowType.get('list').get 'name'\n\n      @getSurvey().trigger('change')\n\n      return newRow\n\n    finalize: ->\n      existing_name = @getValue(\"name\")\n      unless existing_name\n        names = []\n        @getSurvey().forEachRow (r)->\n          name = r.getValue(\"name\")\n          names.push(name)  if name\n        label = @getValue(\"label\")\n        @get(\"name\").set(\"value\", $utils.sluggifyLabel(label, names))\n      @\n\n    get_type: ->\n      $skipLogicHelpers.question_types[@getTypeId()] || $skipLogicHelpers.question_types['default']\n\n    _isSelectQuestion: ->\n      # TODO [ald]: pull this from $aliases\n      @get('type').get('typeId') in ['select_one', 'select_multiple']\n\n    getAcceptedFiles: -> return @attributes['body::accept']?.attributes?.value\n\n    setAcceptedFiles: (bodyAcceptString) ->\n      @setDetail('body::accept', bodyAcceptString)\n      return\n\n    getParameters: -> readParameters(@attributes.parameters?.attributes?.value)\n\n    setParameters: (paramObject) ->\n      paramString = writeParameters(paramObject)\n      @setDetail('parameters', paramString)\n      return\n\n    getList: ->\n      _list = @get('type')?.get('list')\n      if (not _list) and @_isSelectQuestion()\n        _list = new $choices.ChoiceList(name: $utils.txtid())\n        @setList(_list)\n      _list\n\n    setList: (list)->\n      listToSet = @getSurvey().choices.get(list)\n      unless listToSet\n        @getSurvey().choices.add(list)\n        listToSet = @getSurvey().choices.get(list)\n      throw new Error(\"List not found: #{list}\")  unless listToSet\n      @get(\"type\").set(\"list\", listToSet)\n    parse: ->\n      val.parse()  for key, val of @attributes\n\n    linkUp: (ctx)->\n      val.linkUp(ctx)  for key, val of @attributes\n\n  class row.RowError extends row.BaseRow\n    constructor: (obj, options)->\n      @_error = options.error\n      unless window.xlfHideWarnings\n        console?.error(\"Error creating row: [#{options.error}]\", obj)\n        alertify.error(\"Error creating row: [#{options.error}]\");\n      super(obj, options)\n    isError: -> true\n    getValue: (what)->\n      if what of @attributes\n        @attributes[what].get('value')\n      else\n        \"[error]\"\n\n  row\n","$factory = require('./model.validationLogicParserFactory')\n\n### debug method for regexes\nerr_if_unmatch = (re1, re2)->\n  if re1 and re2 and re1.toString() isnt re2.toString()\n    console.error ['inputs did not match', re1.toString(), re2.toString()].join '\\n'\nlog_equiv = (i1, i2, i3)->\n  console.log([i1.toString()])\n  err_if_unmatch(i1, i2) or err_if_unmatch(i2, i3)\n  i1\n###\n\nmodule.exports = do ->\n  equalityCriterionPattern = ///\n      ^\\${(\\w+)}\\s*                      # question reference in the format of ${name}\n      (!=|<=|>=|=|<|>)\\s*                # operator (careful: if < is listed before <=, the = will be treated as part of the value)\n      (                                  # start of the value group\n        (?:                              #   start of a non-matching group\n          date\\(\\'\\d{4}-\\d{2}-\\d{2}\\'\\)) #     something resembling a date: date('xxxx-xx-xx')\n        |                                #   or\n          (?:-?(?:\\d+\\.\\d+|\\.\\d+|\\d+.?)) #     a signed integer or decimal\n        |                                #   or\n          (?:\\'[^']+\\')                  #     a string surrounded by single quotes (careful: the quotes are included in the match!)\n      )                                  # end of the value group\n    ///\n\n  # /\\${(\\w+)}\\s*((?:=|!=)\\s*(?:NULL|''))/i\n  existenceCriterionPattern = ///\n      \\${\n        (\\w+)\n      }\\s*\n      (\n        (?:=|!=)\n        \\s*\n        (?:NULL|'')\n      )\n    ///i\n\n  # / and | or /gi\n  criteriaJoinPattern =\n    ///#{' and '}|#{' or '}///gi\n\n  # /selected\\(\\$\\{(\\w+)\\},\\s*\\'(\\w+)\\'\\)/\n  selectMultiplePattern = ///\n      selected\\(\\$\\{\n      (\\w+)\n      \\},\n      \\s*\n      \\'\n      (\\w+)\n      \\'\n      \\)\n    ///\n\n  $factory(equalityCriterionPattern,\n            existenceCriterionPattern,\n            criteriaJoinPattern,\n            selectMultiplePattern)\n","var _ = require('underscore');\n\nmodule.exports = (function(){\n    return function (equalityCriterionPattern, existenceCriterionPattern, criteriaJoinPattern, selectMultiplePattern) {\n        function parseCriterion(text) {\n            var matches = text.match(existenceCriterionPattern);\n            if (matches === null) {\n                matches = text.match(equalityCriterionPattern);\n            }\n\n            if (!!matches) {\n                matches[2] = matches[2].replace(/\\s+/, '').replace(/null/i, 'NULL');\n            } else {\n                return parseMultiselectCriterion(text);\n            }\n\n            var equalityMapper = {\n                '=': 'resp_equals',\n                '!=': 'resp_notequals',\n                '>': 'resp_greater',\n                '<': 'resp_less',\n                '>=': 'resp_greaterequals',\n                '<=': 'resp_lessequals',\n                '!=\\'\\'': 'ans_notnull',\n                '=\\'\\'': 'ans_null'\n            };\n\n            var res = {\n                name: matches[1],\n                operator: equalityMapper[matches[2]]\n            };\n\n            if (matches[3]) {\n                // strip surrounding single quotes, if any\n                var response_value = matches[3].replace(/^'([^']*)'$/, '$1');\n                // extract xxxx-xx-xx from date('xxxx-xx-xx')\n                response_value = response_value.replace(/date\\('(\\d{4}-\\d{2}-\\d{2})'\\)/, '$1');\n                res.response_value = response_value;\n            }\n\n            return res;\n        }\n\n        function parseMultiselectCriterion(text) {\n            var matches = text.match(selectMultiplePattern);\n\n            if (!matches) {\n                throw new Error('criterion not recognized: \"' + text + '\"');\n            }\n\n            return {\n                name: matches[1],\n                operator: text.indexOf('not(') == -1 ? 'multiplechoice_selected' : 'multiplechoice_notselected',\n                response_value: matches[2]\n            };\n        }\n\n        return function (text) {\n            var criteria = text.split(criteriaJoinPattern),\n                criteriaLength = criteria.length,\n                joinOperators = text.match(criteriaJoinPattern);\n\n\n            if (!!joinOperators && _.uniq(joinOperators).length > 1) {\n                throw new Error('multiple criteria join operators are not supported at the moment');\n            }\n\n            if (criteriaLength === 1) {\n                return {\n                    criteria: [parseCriterion(text)]\n                };\n            } else {\n                return {\n                    criteria: _.map(criteria, function (criterion) {\n                        return parseCriterion(criterion);\n                    }),\n                    operator: joinOperators[0].replace(/ /g, '').toUpperCase()\n                };\n            }\n        };\n    }\n})();\n","$factory = require('./model.validationLogicParserFactory')\n\nmodule.exports = do ->\n  equalityCriterionPattern = ///\n      (\\.)\\s*                            # always a leading dot\n      (!=|<=|>=|=|<|>)\\s*                # operator (careful: if < is listed before <=, the = will be treated as part of the value)\n      (                                  # start of the value group\n        (?:                              #   start of a non-matching group\n          date\\(\\'\\d{4}-\\d{2}-\\d{2}\\'\\)) #     something resembling a date: date('xxxx-xx-xx')\n        |                                #   or\n          (?:-?(?:\\d+\\.\\d+|\\.\\d+|\\d+.?)) #     a signed integer or decimal\n        |                                #   or\n          (?:\\'[^']+\\')                  #     a string surrounded by single quotes (careful: the quotes are included in the match!)\n      )                                  # end of the value group\n    ///\n\n  # /(\\.)\\s*((?:=|!=)\\s*(?:NULL|''))/i\n  existenceCriterionPattern = ///\n      (\\.)\\s*\n      (\n        (?:=|!=)\n        \\s*\n        (?:NULL|'')\n      )\n    ///i\n\n  # / and | or /gi\n  criteriaJoinPattern =\n    ///#{' and '}|#{' or '}///gi\n\n  # /selected\\((\\.)\\s*,\\s*\\'(\\w+)\\'\\)/\n  selectMultiplePattern = ///\n      selected\\(\n        (\\.)\\s*\n        ,\\s*\\'\n        (\\w+)\\'\n      \\)\n    ///\n\n  $factory(equalityCriterionPattern,\n            existenceCriterionPattern,\n            criteriaJoinPattern,\n            selectMultiplePattern)\n","_ = require 'underscore'\nBackbone = require('backbone')\n\nmodule.exports = do ->\n  viewWidgets = {}\n\n  class viewWidgets.Base extends Backbone.View\n    attach_to: ($el) ->\n      if $el instanceof viewWidgets.Base\n        $el = $el.$el\n      $el.append(@el)\n\n    bind_event: (type, callback) ->\n      @$el.off type, callback\n      @$el.on type, callback\n    detach: () ->\n      @$el.remove()\n    val: (value) ->\n      if value\n        @$el.val value\n        if !@$el.val()?\n          @$el.prop('selectedIndex', 0)\n      else return @$el.val()\n\n  class viewWidgets.Label extends viewWidgets.Base\n    tagName: 'label'\n    constructor: (@text, @className, @input) ->\n      super()\n    val: () ->\n    bind_event: () ->\n    render: () ->\n      if @text\n        @$el.text(@text)\n      if @className\n        @$el.addClass @className\n      if @input\n        @$el.attr 'for', @input.cid\n      @\n\n  class viewWidgets.EmptyView extends viewWidgets.Base\n    attach_to: () -> return\n    bind_event: () -> return\n    render: () -> @\n    val: () -> null\n\n  class viewWidgets.TextArea extends viewWidgets.Base\n    tagName: 'textarea'\n    render: () ->\n      @$el.val @text\n      @$el.addClass @className\n      @$el.on 'paste', (e) -> e.stopPropagation()\n\n      @\n    constructor: (@text, @className) -> super()\n\n  class viewWidgets.TextBox extends viewWidgets.Base\n    tagName: 'input'\n    render: () ->\n      @$el.attr 'type', 'text'\n      @$el.val @text\n      @$el.addClass @className\n      @$el.attr 'placeholder', @placeholder\n      @$el.on 'paste', (e) -> e.stopPropagation()\n\n      @\n    constructor: (@text, @className, @placeholder) -> super()\n\n  class viewWidgets.Button extends viewWidgets.Base\n    tagName: 'button'\n    render: () ->\n      @$el.html @text\n      @$el.addClass @className\n\n      @\n    constructor: (@text, @className) -> super()\n\n  class viewWidgets.DropDownModel extends Backbone.Model\n\n  class viewWidgets.DropDown extends viewWidgets.Base\n    tagName: 'select'\n    constructor: (options) ->\n      @options = options\n      super(options)\n\n      if !(@options instanceof viewWidgets.DropDownModel)\n        @options = new viewWidgets.DropDownModel()\n        @options.set('options', options)\n      @options.on 'change:options', @render.bind(@)\n\n    render: () =>\n      options_html = ''\n      _.each @options.get('options'), (option) ->\n        options_html += '<option value=\"' + option.value + '\">' + option.text + '</option>'\n\n      @$el.html options_html\n      @\n\n    attach_to: (target) ->\n      super(target)\n      @$el.select2({ minimumResultsForSearch: -1 })\n\n  viewWidgets\n","###\n# [inputDeserializer]\n#  wrapper around methods for converting raw input into survey structure\n# ______________________________________________________________________\n###\n\n_ = require 'underscore'\ncsv = require './csv'\n$aliases = require './model.aliases'\n\nmodule.exports = do ->\n  inputDeserializer = (inp, ctx={})->\n    r = deserialize inp, ctx\n    if not ctx.error and ctx.validate\n      validateParse(r, ctx)\n    r\n\n  # [inputDeserializer.deserialize] parses csv string, json string,\n  #  or object into survey object\n  # -------------------------------\n  deserialize = do ->\n    _csv_to_params = (csv_repr)->\n      cobj = csv.sheeted(csv_repr)\n      out = {}\n\n      out.survey = if (sht = cobj.sheet \"survey\") then sht.toObjects() else []\n      out.choices = if (sht = cobj.sheet \"choices\") then sht.toObjects() else []\n      if (sht = cobj.sheet \"settings\")\n        out.settings = sht.toObjects()[0]\n\n      out\n\n    _parse_sheets = (repr)->\n      # If a sheet has a first-row which is an array, that array will be treated as column\n      # headers and any subsequent array-rows will be matched up\n\n      for shtName, sheet of repr\n        if _.isArray(sheet) and sheet.length > 0 and _.isArray(sheet[0])\n          out_sheet = []\n          [cols, contents...] = sheet\n          for row in contents\n            if _.isArray(row)\n              new_row = {}\n              for col, i in cols\n                if i < row.length and row[i] not in [undefined, null]\n                  new_row[col] = row[i]\n              out_sheet.push(new_row)\n            else\n              out_sheet.push(row)\n          repr[shtName] = out_sheet\n      repr\n\n    # returns: function\n    (repr, ctx={})->\n      if _.isString(repr)\n        _csv_to_params repr\n      else if _.isObject repr\n        _parse_sheets repr\n      else\n        ``\n\n  # [inputDeserializer.validateParse]\n  #  ensure correct sheet names exist in imported surveys\n  # ---------------------------------\n  validateParse = do ->\n    requiredSheetNameList = $aliases.q.requiredSheetNameList()\n\n    # returns: function\n    (repr, ctx={})->\n      valid_with_sheet = false\n      for sheetId in requiredSheetNameList\n        if repr[sheetId]\n          ctx.surveyType = sheetId\n          valid_with_sheet = true\n      ctx.settings = true  if repr['settings']\n      ctx.choices = true  if repr['choices']\n      unless valid_with_sheet\n        sn = requiredSheetNameList.join(', ')\n        ctx.error = \"Missing a survey sheet [#{sn}]\"\n      !ctx.error\n\n  inputDeserializer.validateParse = validateParse\n  inputDeserializer.deserialize = deserialize\n  inputDeserializer\n","_ = require 'underscore'\ncloneDeep = require('lodash.clonedeep')\n$aliases = require './model.aliases'\n$configs = require './model.configs'\nformBuilderUtils = require '../../js/components/formBuilder/formBuilderUtils'\n\nmodule.exports = do ->\n  inputParser = {}\n\n  class ParsedStruct\n    constructor: (@type, @atts={})->\n      @contents = []\n    push: (item)->\n      @contents.push(item)\n      ``\n    export: ->\n      arr = []\n      for item in @contents\n        if item instanceof ParsedStruct\n          item = item.export()\n        arr.push(item)\n      _.extend({}, @atts, {type: @type, __rows: arr})\n\n  hasBeenParsed = (obj)->\n    for row in obj\n      if row.__rows\n        return true\n      else if $aliases.q.testGroupable(row.type)\n        return false\n    return true\n  inputParser.hasBeenParsed = hasBeenParsed\n\n  flatten_translated_fields = (item, translations)->\n    for key, val of item\n      if _.isArray(val) and key != 'tags'\n        delete item[key]\n        _.map(translations, (_t, i)->\n          _translated_val = val[i]\n          if _t\n            lang_str = \"#{key}::#{_t}\"\n          else\n            lang_str = key\n          item[lang_str] = _translated_val\n        )\n    return item\n\n  parseArr = (type='survey', sArr, translations=false)->\n    counts = {\n      open: {}\n      close: {}\n    }\n    count_att = (opn_cls, att)->\n      counts[opn_cls][att]?=0\n      counts[opn_cls][att]++\n      ``\n    grpStack = [new ParsedStruct(type)]\n\n    _pushGrp = (type='group', item)->\n      count_att('open', type)\n      grp = new ParsedStruct(type, item)\n      _curGrp().push(grp)\n      grpStack.push(grp)\n\n    _popGrp = (closedByAtts, type)->\n      count_att('close', type)\n      _grp = grpStack.pop()\n      if _grp.type isnt closedByAtts.type\n        throw new Error(\"mismatched group/repeat tags\")\n      ``\n\n    _curGrp = ->\n      _l = grpStack.length\n      if _l is 0\n        throw new Error(\"unmatched group/repeat\")\n      grpStack[_l-1]\n\n    for item in sArr\n      _groupAtts = $aliases.q.testGroupable(item.type)\n\n      if translations and translations.length > 0\n        item = flatten_translated_fields(item, translations)\n\n      if _groupAtts\n        if _groupAtts.begin\n          _pushGrp(_groupAtts.type, item)\n        else\n          _popGrp(_groupAtts, item.type)\n      else\n        _curGrp().push(item)\n\n    if grpStack.length isnt 1\n      throw new Error(JSON.stringify({\n          message: \"unclosed groupable set\",\n          counts: counts\n        }))\n\n    _curGrp().export().__rows\n\n  # normalizes required value - truthy values become `true` and falsy values become `false`\n  normalizeRequiredValues = (survey) ->\n    normalizedSurvey = cloneDeep(survey)\n    for row in normalizedSurvey\n      if row.required in $configs.truthyValues\n        row.required = true\n      else if row.required in $configs.falsyValues or row.required in [undefined, '']\n        row.required = false\n    return normalizedSurvey\n\n  inputParser.parseArr = parseArr\n\n  # pass baseSurvey whenever you import other asset into existing form\n  inputParser.parse = (o, baseSurvey)->\n    translations = o.translations\n\n    nullified = formBuilderUtils.nullifyTranslations(o.translations, o.translated, o.survey, baseSurvey)\n\n    # we edit the received object directly, which is totally a case of BAD CODE™\n    # but in fact is a necessary part of the nullify hack\n    o.survey = nullified.survey;\n    o.translations = nullified.translations\n    o.translations_0 = nullified.translations_0\n\n    if o.survey\n      o.survey = normalizeRequiredValues(o.survey)\n\n    # sorts groups and repeats into groups and repeats (recreates the structure)\n    if o.survey\n      o.survey = parseArr('survey', o.survey, o.translations)\n\n    if o.choices\n      o.choices = parseArr('choices', o.choices, o.translations)\n\n    # settings is sometimes packaged as an array length=1\n    if o.settings and _.isArray(o.settings) and o.settings.length is 1\n      o.settings = o.settings[0]\n\n    return o\n\n  inputParser.loadChoiceLists = (passedChoices, choices)->\n    tmp = {}\n    choiceNames = []\n    for choiceRow in passedChoices\n      lName = choiceRow[\"list name\"] || choiceRow[\"list_name\"]\n      unless tmp[lName]\n        tmp[lName] = []\n        choiceNames.push(lName)\n      tmp[lName].push(choiceRow)\n    for cn in choiceNames\n      choices.add(name: cn, options: tmp[cn])\n\n  # groupByVisibility = (inp, hidden=[], remain=[])->\n  #   hiddenTypes = $aliases.q.hiddenTypes()\n  #   throw Error(\"inputParser.sortByVisibility requires an array\")  unless _.isArray(inp)\n  #   for row in inp\n  #     dest = if row.type? in hiddenTypes then hidden else remain\n  #   [hidden, inp]\n\n  # inputParser.sortByVisibility = sortByVisibility\n  inputParser\n","/**\n * Hi! Sorry for this being so complex, but I feel it's necessary, if we want to\n * avoid hard to debug bugs. These all are used in files connected to the\n * sharingForm modal. I will describe each of these constants in a detail to not\n * cause confusion by a future reader.\n */\n\nimport {PERMISSIONS_CODENAMES} from 'js/constants';\n\n/**\n * These two are the text added to a checkbox name to signify a paired property.\n * E.g for \"formView\" you will get \"formViewPartial\" and \"formViewPartialUsers\"\n */\nexport const SUFFIX_PARTIAL = 'Partial';\nexport const SUFFIX_USERS = 'Users'; // should be always added to a Partial one\n\n/**\n * This list contains the names of all the checkboxes in userAssetPermsEditor.\n * Every one of them is strictly connected to a permission, see the pairs at\n * CHECKBOX_PERM_PAIRS below.\n */\nexport const CHECKBOX_NAMES = {};\nnew Set([\n  'formView',\n  'formEdit',\n  'formManage',\n  'submissionsAdd',\n  'submissionsView',\n  'submissionsViewPartial',\n  'submissionsEdit',\n  'submissionsEditPartial',\n  'submissionsValidate',\n  'submissionsValidatePartial',\n  'submissionsDelete',\n  'submissionsDeletePartial',\n]).forEach((name) => {CHECKBOX_NAMES[name] = name;});\nObject.freeze(CHECKBOX_NAMES);\n\n/**\n * This is a map of pairs that connects a general checkbox to a partial checkbox.\n */\nexport const PARTIAL_CHECKBOX_PAIRS = {};\nPARTIAL_CHECKBOX_PAIRS[CHECKBOX_NAMES.submissionsView] = CHECKBOX_NAMES.submissionsViewPartial;\nPARTIAL_CHECKBOX_PAIRS[CHECKBOX_NAMES.submissionsEdit] = CHECKBOX_NAMES.submissionsEditPartial;\nPARTIAL_CHECKBOX_PAIRS[CHECKBOX_NAMES.submissionsValidate] = CHECKBOX_NAMES.submissionsValidatePartial;\nPARTIAL_CHECKBOX_PAIRS[CHECKBOX_NAMES.submissionsDelete] = CHECKBOX_NAMES.submissionsDeletePartial;\nObject.freeze(PARTIAL_CHECKBOX_PAIRS);\n\n/**\n * This is a map of pairs that connects a partial checkbox to a permission.\n *\n * NOTE: a partial checkbox is using a \"partial_submissions\" permission, but\n * in the array of de facto permissions it is using these ones.\n */\nexport const PARTIAL_PERM_PAIRS = {};\nPARTIAL_PERM_PAIRS[CHECKBOX_NAMES.submissionsViewPartial] = PERMISSIONS_CODENAMES.view_submissions;\nPARTIAL_PERM_PAIRS[CHECKBOX_NAMES.submissionsEditPartial] = PERMISSIONS_CODENAMES.change_submissions;\nPARTIAL_PERM_PAIRS[CHECKBOX_NAMES.submissionsValidatePartial] = PERMISSIONS_CODENAMES.validate_submissions;\nPARTIAL_PERM_PAIRS[CHECKBOX_NAMES.submissionsDeletePartial] = PERMISSIONS_CODENAMES.delete_submissions;\nObject.freeze(PARTIAL_PERM_PAIRS);\n\n/**\n * This is a map of pairs that connect a checkbox to a permission.\n */\nexport const CHECKBOX_PERM_PAIRS = {};\nCHECKBOX_PERM_PAIRS[CHECKBOX_NAMES.formView] = PERMISSIONS_CODENAMES.view_asset;\nCHECKBOX_PERM_PAIRS[CHECKBOX_NAMES.formEdit] = PERMISSIONS_CODENAMES.change_asset;\nCHECKBOX_PERM_PAIRS[CHECKBOX_NAMES.formManage] = PERMISSIONS_CODENAMES.manage_asset;\nCHECKBOX_PERM_PAIRS[CHECKBOX_NAMES.submissionsAdd] = PERMISSIONS_CODENAMES.add_submissions;\nCHECKBOX_PERM_PAIRS[CHECKBOX_NAMES.submissionsView] = PERMISSIONS_CODENAMES.view_submissions;\nCHECKBOX_PERM_PAIRS[CHECKBOX_NAMES.submissionsViewPartial] = PERMISSIONS_CODENAMES.partial_submissions;\nCHECKBOX_PERM_PAIRS[CHECKBOX_NAMES.submissionsEdit] = PERMISSIONS_CODENAMES.change_submissions;\nCHECKBOX_PERM_PAIRS[CHECKBOX_NAMES.submissionsEditPartial] = PERMISSIONS_CODENAMES.partial_submissions;\nCHECKBOX_PERM_PAIRS[CHECKBOX_NAMES.submissionsValidate] = PERMISSIONS_CODENAMES.validate_submissions;\nCHECKBOX_PERM_PAIRS[CHECKBOX_NAMES.submissionsValidatePartial] = PERMISSIONS_CODENAMES.partial_submissions;\nCHECKBOX_PERM_PAIRS[CHECKBOX_NAMES.submissionsDelete] = PERMISSIONS_CODENAMES.delete_submissions;\nCHECKBOX_PERM_PAIRS[CHECKBOX_NAMES.submissionsDeletePartial] = PERMISSIONS_CODENAMES.partial_submissions;\nObject.freeze(CHECKBOX_PERM_PAIRS);\n\n/**\n * This is a map that mirrors the CHECKBOX_PERM_PAIRS,\n * so it pairs a permission codename (No partial though!) to a checkbox name\n */\nexport const PERM_CHECKBOX_PAIRS = {};\nObject.keys(PARTIAL_CHECKBOX_PAIRS).forEach((checkboxName) => {\n  PERM_CHECKBOX_PAIRS[CHECKBOX_PERM_PAIRS[checkboxName]] = checkboxName;\n});\nObject.freeze(PERM_CHECKBOX_PAIRS);\n\n/**\n * This is a map to handle exceptions for partial submissions which imply\n * a regular permission\n */\nexport const PARTIAL_IMPLIED_CHECKBOX_PAIRS = {};\nPARTIAL_IMPLIED_CHECKBOX_PAIRS[CHECKBOX_NAMES.submissionsEditPartial] = [\n  CHECKBOX_NAMES.submissionsAdd,\n];\nObject.freeze(PARTIAL_IMPLIED_CHECKBOX_PAIRS);\n","/**\n * A list of all shareable constants for the application.\n */\n\ninterface IEnum {\n  [val: string]: string\n}\n\n/**\n * An enum creator function. Will create a frozen object of `foo: \"foo\"` pairs.\n * Will make sure the returned values are unique.\n */\nexport function createEnum(values: string[]): IEnum {\n  const newEnum: IEnum = {}\n  new Set(values).forEach((value) => {newEnum[value] = value})\n  return Object.freeze(newEnum)\n}\n\nexport const ROOT_URL = (() => {\n  // This is an \"absolute path reference (a URL without the domain name)\"\n  // according to the Django docs\n  let rootPathEl = document.head.querySelector<HTMLMetaElement>('meta[name=kpi-root-path]');\n  let rootPath = '';\n  if (rootPathEl === null) {\n    console.error('no kpi-root-path meta tag set. defaulting to \"\"');\n    rootPath = '';\n  } else {\n    // Strip trailing slashes\n    rootPath = rootPathEl.content.replace(/\\/*$/, '');\n  }\n  return `${window.location.protocol}//${window.location.host}${rootPath}`;\n})();\n\nexport const ANON_USERNAME = 'AnonymousUser';\n\n/**\n * BAD CODE™ A hardcoded list of permissions codenames.\n *\n * All of them are really defined on backend, and we get them through the\n * permissions config endpoint, but as we need these names to reference them in\n * the code to build the UI it's a necessary evil.\n *\n * NOTE: to know what these permissions permit see `kpi/permissions.py` file,\n * where you have to match the classes with endpoints and their HTTP methods.\n */\nexport const PERMISSIONS_CODENAMES = createEnum([\n  // Is user able to view asset - mostly handled by Backend just not returning\n  // asset in the results or direct endpoint.\n  'view_asset',\n\n  // Is user able to edit asset, i.e. to change anything in the asset endpoint,\n  // so: editing in Form Builder, changing tags, changing settings, replace XLS,\n  // change translations, move between collection, archive, unarchive, delete…\n  'change_asset',\n\n  // Is asset discoverable in public lists.\n  'discover_asset',\n\n  // Is user able to manage some aspects of asset (it is different from editing)\n  // such as: saving export settings, sharing asset (TODO)…\n  'manage_asset',\n\n  // Is user able to add submissions - handled by Backend submissions endpoint.\n  'add_submissions',\n\n  // Is user able to see submissions, i.e. the Table View.\n  'view_submissions',\n\n  // Used for partially permissing user actions on submissions.\n  'partial_submissions',\n\n  // Is user able to edit existing submissions.\n  'change_submissions',\n\n  // Is user able to delete submissions.\n  'delete_submissions',\n\n  // Is user able to change the validation status of submissions.\n  'validate_submissions',\n]);\n\nexport const ENKETO_ACTIONS = createEnum([\n  'edit',\n  'view',\n])\n\nexport const HOOK_LOG_STATUSES = {\n  SUCCESS: 2,\n  PENDING: 1,\n  FAILED: 0,\n};\n\nexport const KEY_CODES = Object.freeze({\n  TAB: 9,\n  ENTER: 13,\n  ESC: 27,\n  SPACE: 32,\n  NBSP: 160, // non-breakable space\n});\n\nexport const MODAL_TYPES = {\n  SHARING: 'sharing',\n  UPLOADING_XLS: 'uploading-xls',\n  NEW_FORM: 'new-form',\n  LIBRARY_NEW_ITEM: 'library-new-item',\n  LIBRARY_TEMPLATE: 'library-template',\n  LIBRARY_COLLECTION: 'library-collection',\n  LIBRARY_UPLOAD: 'library-upload',\n  ENKETO_PREVIEW: 'enketo-preview',\n  SUBMISSION: 'submission',\n  REPLACE_PROJECT: 'replace-project',\n  TABLE_SETTINGS: 'table-settings',\n  REST_SERVICES: 'rest-services',\n  FORM_LANGUAGES: 'form-languages',\n  FORM_TRANSLATIONS_TABLE: 'form-translation-table',\n  ASSET_TAGS: 'asset-tags',\n  ENCRYPT_FORM: 'encrypt-form',\n  BULK_EDIT_SUBMISSIONS: 'bulk-edit-submissions',\n  TABLE_MEDIA_PREVIEW: 'table-media-preview',\n  DATA_ATTACHMENT_COLUMNS: 'data-attachment-columns',\n};\n\nexport const PROJECT_SETTINGS_CONTEXTS = Object.freeze({\n  NEW: 'newForm',\n  EXISTING: 'existingForm',\n  REPLACE: 'replaceProject',\n  BUILDER: 'formBuilderAside',\n});\n\nexport const update_states = {\n  UNSAVED_CHANGES: -1,\n  UP_TO_DATE: true,\n  PENDING_UPDATE: false,\n  SAVE_FAILED: 'SAVE_FAILED',\n};\n\nexport const AVAILABLE_FORM_STYLES = [\n  {value: '', label: t('Default - single page')},\n  {value: 'theme-grid no-text-transform', label: t('Grid theme')},\n  {value: 'theme-grid', label: t('Grid theme with headings in ALL CAPS')},\n  {value: 'pages', label: t('Multiple pages')},\n  {value: 'theme-grid pages no-text-transform', label: t('Grid theme + Multiple pages')},\n  {value: 'theme-grid pages', label: t('Grid theme + Multiple pages + headings in ALL CAPS')},\n];\n\nexport const VALIDATION_STATUSES = {\n  no_status: {\n    value: null,\n    label: '—',\n  },\n  validation_status_not_approved: {\n    value: 'validation_status_not_approved',\n    label: t('Not approved'),\n  },\n  validation_status_approved: {\n    value: 'validation_status_approved',\n    label: t('Approved'),\n  },\n  validation_status_on_hold: {\n    value: 'validation_status_on_hold',\n    label: t('On hold'),\n  },\n};\n\nexport const VALIDATION_STATUSES_LIST = [\n  VALIDATION_STATUSES.no_status,\n  VALIDATION_STATUSES.validation_status_not_approved,\n  VALIDATION_STATUSES.validation_status_approved,\n  VALIDATION_STATUSES.validation_status_on_hold,\n];\n\n/**\n * All possible asset types.\n */\nexport enum AssetTypeName {\n  question = 'question',\n  block = 'block',\n  template = 'template',\n  survey = 'survey',\n  collection = 'collection',\n}\n\ninterface AssetTypeDefinition {\n  id: AssetTypeName\n  label: string\n}\n\ntype AssetTypes = {\n  [P in AssetTypeName]: AssetTypeDefinition\n}\n\nexport const ASSET_TYPES: AssetTypes = {\n  question: {\n    id: AssetTypeName.question,\n    label: t('question'),\n  },\n  block: {\n    id: AssetTypeName.block,\n    label: t('block'),\n  },\n  template: {\n    id: AssetTypeName.template,\n    label: t('template'),\n  },\n  survey: {\n    id: AssetTypeName.survey,\n    label: t('project'),\n  },\n  collection: {\n    id: AssetTypeName.collection,\n    label: t('collection'),\n  },\n};\n\nexport const ASSET_FILE_TYPES = {\n  map_layer: {\n    id: 'map_layer',\n    label: t('map layer'),\n  },\n  form_media: {\n    id: 'form_media',\n    label: t('form media'),\n  },\n};\n\n/**\n * These are the types of survey rows that users can create in FormBuilder and\n * ones that require manual data submission.\n */\nexport enum QuestionTypeName {\n  acknowledge = 'acknowledge',\n  audio = 'audio',\n  barcode = 'barcode',\n  calculate = 'calculate',\n  date = 'date',\n  datetime = 'datetime',\n  decimal = 'decimal',\n  'xml-external' = 'xml-external',\n  file = 'file',\n  geopoint = 'geopoint',\n  geoshape = 'geoshape',\n  geotrace = 'geotrace',\n  hidden = 'hidden',\n  image = 'image',\n  integer = 'integer',\n  kobomatrix = 'kobomatrix',\n  note = 'note',\n  range = 'range',\n  rank = 'rank',\n  score = 'score',\n  select_multiple = 'select_multiple',\n  select_one = 'select_one',\n  text = 'text',\n  time = 'time',\n  video = 'video',\n}\n\ninterface QuestionTypeDefinition {\n  label: string\n  icon: string\n  id: QuestionTypeName\n}\n\ntype QuestionTypes = {\n  [P in QuestionTypeName]: QuestionTypeDefinition\n}\n\n/*\n * When adding new question type please remember to update those places:\n * 1. Add question type here\n * 2. Add new SVG icon to jsapp/svg-icons\n * 3. Add icon to row view.icons.coffee\n * 4. If it's non-regular type, you might need to update:\n *   - isRowSpecialLabelHolder in assetUtils.es6\n *   - renderQuestionTypeIcon in assetUtils.es6\n * 5. If question doesn't hold data, update:\n *   - getDisplayData in bulkEditSubmissionsForm.es6\n *   - getDisplayedColumns in table.es6\n * 6. Update renderResponseData in submissionDataTable.es6\n * 7. Update getSubmissionDisplayData in submissionUtils.es6\n * 8. If it's media type update renderAttachment in submissionDataTable.es6\n */\n\n/**\n * Definitions of user oriented question types.\n */\nexport const QUESTION_TYPES: QuestionTypes = Object.freeze({\n  acknowledge: {label: t('Acknowledge'), icon: 'qt-acknowledge', id: QuestionTypeName.acknowledge},\n  audio: {label: t('Audio'), icon: 'qt-audio', id: QuestionTypeName.audio},\n  barcode: {label: t('Barcode / QR Code'), icon: 'qt-barcode', id: QuestionTypeName.barcode},\n  calculate: {label: t('Calculate'), icon: 'qt-calculate', id: QuestionTypeName.calculate},\n  date: {label: t('Date'), icon: 'qt-date', id: QuestionTypeName.date},\n  datetime: {label: t('Date & time'), icon: 'qt-date-time', id: QuestionTypeName.datetime},\n  decimal: {label: t('Decimal'), icon: 'qt-decimal', id: QuestionTypeName.decimal},\n  'xml-external': {label: t('External XML'), icon: 'qt-external-xml', id: QuestionTypeName['xml-external']},\n  file: {label: t('File'), icon: 'qt-file', id: QuestionTypeName.file},\n  geopoint: {label: t('Point'), icon: 'qt-point', id: QuestionTypeName.geopoint},\n  geoshape: {label: t('Area'), icon: 'qt-area', id: QuestionTypeName.geoshape},\n  geotrace: {label: t('Line'), icon: 'qt-line', id: QuestionTypeName.geotrace},\n  hidden: {label: t('Hidden'), icon: 'qt-hidden', id: QuestionTypeName.hidden},\n  image: {label: t('Photo'), icon: 'qt-photo', id: QuestionTypeName.image},\n  integer: {label: t('Number'), icon: 'qt-number', id: QuestionTypeName.integer},\n  kobomatrix: {label: t('Question Matrix'), icon: 'qt-question-matrix', id: QuestionTypeName.kobomatrix},\n  note: {label: t('Note'), icon: 'qt-note', id: QuestionTypeName.note},\n  range: {label: t('Range'), icon: 'qt-range', id: QuestionTypeName.range},\n  rank: {label: t('Ranking'), icon: 'qt-ranking', id: QuestionTypeName.rank},\n  score: {label: t('Rating'), icon: 'qt-rating', id: QuestionTypeName.score},\n  select_multiple: {label: t('Select Many'), icon: 'qt-select-many', id: QuestionTypeName.select_multiple},\n  select_one: {label: t('Select One'), icon: 'qt-select-one', id: QuestionTypeName.select_one},\n  text: {label: t('Text'), icon: 'qt-text', id: QuestionTypeName.text},\n  time: {label: t('Time'), icon: 'qt-time', id: QuestionTypeName.time},\n  video: {label: t('Video'), icon: 'qt-video', id: QuestionTypeName.video},\n});\n\n/**\n * These are the types of survey rows that users can create in FormBuilder (as\n * checkboxes) and ones that have data submitted automatically.\n */\nexport enum MetaQuestionTypeName {\n  start = 'start',\n  end = 'end',\n  today = 'today',\n  username = 'username',\n  simserial = 'simserial',\n  subscriberid = 'subscriberid',\n  deviceid = 'deviceid',\n  phonenumber = 'phonenumber',\n  audit = 'audit',\n  'background-audio' = 'background-audio',\n}\nexport const META_QUESTION_TYPES = createEnum([\n  MetaQuestionTypeName.start,\n  MetaQuestionTypeName.end,\n  MetaQuestionTypeName.today,\n  MetaQuestionTypeName.username,\n  MetaQuestionTypeName.simserial,\n  MetaQuestionTypeName.subscriberid,\n  MetaQuestionTypeName.deviceid,\n  MetaQuestionTypeName.phonenumber,\n  MetaQuestionTypeName.audit,\n  MetaQuestionTypeName['background-audio'],\n]) as {[P in MetaQuestionTypeName]: MetaQuestionTypeName};\n\n// submission data extras being added by backend. see both of these:\n// 1. https://github.com/kobotoolbox/kobocat/blob/78133d519f7b7674636c871e3ba5670cd64a7227/onadata/apps/viewer/models/parsed_instance.py#L242-L260\n// 2. https://github.com/kobotoolbox/kpi/blob/7db39015866c905edc645677d72b9c1ea16067b1/jsapp/js/constants.es6#L284-L294\nexport const ADDITIONAL_SUBMISSION_PROPS = createEnum([\n  // match the ordering of (Python) kpi.models.import_export_task.ExportTask.COPY_FIELDS\n  '_id',\n  '_uuid',\n  '_submission_time',\n  '_validation_status',\n  '_notes',\n  '_status',\n  '_submitted_by',\n  '_tags',\n  '_index',\n]);\n\nexport const NAME_MAX_LENGTH = 255;\n\n/**\n * for Backend calls, see their definitions at `kpi/filters.py`\n * NOTE: ORs require a parenthesis to work\n */\nexport const COMMON_QUERIES = Object.freeze({\n  b: 'asset_type:block',\n  q: 'asset_type:question',\n  t: 'asset_type:template',\n  s: 'asset_type:survey',\n  c: 'asset_type:collection',\n  qb: '(asset_type:question OR asset_type:block)',\n  qbt: '(asset_type:question OR asset_type:block OR asset_type:template)',\n  qbtc: '(asset_type:question OR asset_type:block OR asset_type:template OR asset_type:collection)',\n});\n\nexport const ACCESS_TYPES = createEnum([\n  'owned',\n  'shared',\n  'public',\n  'subscribed',\n  'superuser',\n]);\n\n/**\n * These are the types of survey rows that mark the beginning of a group. They\n * don't carry any submission data.\n */\nexport enum GroupTypeBeginName {\n  begin_group = 'begin_group',\n  begin_score = 'begin_score',\n  begin_rank = 'begin_rank',\n  begin_kobomatrix = 'begin_kobomatrix',\n  begin_repeat = 'begin_repeat',\n}\nexport const GROUP_TYPES_BEGIN = createEnum([\n  GroupTypeBeginName.begin_group,\n  GroupTypeBeginName.begin_score,\n  GroupTypeBeginName.begin_rank,\n  GroupTypeBeginName.begin_kobomatrix,\n  GroupTypeBeginName.begin_repeat,\n]) as {[P in GroupTypeBeginName]: GroupTypeBeginName};\n\n/**\n * These are the types of survey rows that mark the ending of a group. They\n * don't carry any submission data.\n */\nexport enum GroupTypeEndName {\n  end_group = 'end_group',\n  end_score = 'end_score',\n  end_rank = 'end_rank',\n  end_kobomatrix = 'end_kobomatrix',\n  end_repeat = 'end_repeat',\n}\nexport const GROUP_TYPES_END = createEnum([\n  'end_group',\n  'end_score',\n  'end_rank',\n  'end_kobomatrix',\n  'end_repeat',\n]) as {[P in GroupTypeEndName]: GroupTypeEndName};\n\n/**\n * These are some special types of survey rows.\n */\nexport enum MiscRowTypeName {\n  score__row = 'score__row',\n  rank__level = 'rank__level',\n}\n\n// a custom question type for score\nexport const SCORE_ROW_TYPE = MiscRowTypeName.score__row;\n\n// a custom question type for rank\nexport const RANK_LEVEL_TYPE = MiscRowTypeName.rank__level;\n\nexport const ANY_ROW_TYPE_NAMES = {\n  ...QuestionTypeName,\n  ...MetaQuestionTypeName,\n  ...GroupTypeBeginName,\n  ...GroupTypeEndName,\n  ...MiscRowTypeName\n};\n/**\n * These are all possible types of asset survey rows.\n */\nexport type AnyRowTypeName = QuestionTypeName | MetaQuestionTypeName | GroupTypeBeginName | GroupTypeEndName | MiscRowTypeName\n\nexport const CHOICE_LISTS = Object.freeze({\n  SELECT: 'select_from_list_name',\n  MATRIX: 'kobo--matrix_list',\n  SCORE: 'kobo--score-choices',\n  RANK: 'kobo--rank-items',\n});\n\nexport const MATRIX_PAIR_PROPS = {\n  inSurvey: CHOICE_LISTS.MATRIX,\n  inChoices: 'list_name',\n};\n\nexport const DEPLOYMENT_CATEGORIES = Object.freeze({\n  Deployed: {id: 'Deployed', label: t('Deployed')},\n  Draft: {id: 'Draft', label: t('Draft')},\n  Archived: {id: 'Archived', label: t('Archived')},\n});\n\nexport const QUERY_LIMIT_DEFAULT = 5000;\n\nexport const MAX_DISPLAYED_STRING_LENGTH = Object.freeze({\n  form_media: 50,\n  connect_projects: 30,\n});\n\nexport const COLLECTION_METHODS = Object.freeze({\n  offline_url: {\n    id: 'offline_url',\n    label: t('Online-Offline (multiple submission)'),\n    desc: t('This allows online and offline submissions and is the best option for collecting data in the field.'),\n  },\n  url: {\n    id: 'url',\n    label: t('Online-Only (multiple submissions)'),\n    desc: t('This is the best option when entering many records at once on a computer, e.g. for transcribing paper records.'),\n  },\n  single_url: {\n    id: 'single_url',\n    label: t('Online-Only (single submission)'),\n    desc: t('This allows a single submission, and can be paired with the \"return_url\" parameter to redirect the user to a URL of your choice after the form has been submitted.'),\n  },\n  single_once_url: {\n    id: 'single_once_url',\n    label: t('Online-only (once per respondent)'),\n    desc: t('This allows your web form to only be submitted once per user, using basic protection to prevent the same user (on the same browser & device) from submitting more than once.'),\n  },\n  iframe_url: {\n    id: 'iframe_url',\n    label: t('Embeddable web form code'),\n    desc: t('Use this html5 code snippet to integrate your form on your own website using smaller margins.'),\n  },\n  preview_url: {\n    id: 'preview_url',\n    label: t('View only'),\n    desc: t('Use this version for testing, getting feedback. Does not allow submitting data.'),\n  },\n  android: {\n    id: 'android',\n    label: t('Android application'),\n    desc: t('Use this option to collect data in the field with your Android device.'),\n    url: 'https://play.google.com/store/apps/details?id=org.koboc.collect.android&hl=en',\n  },\n});\n\n\nexport const SURVEY_DETAIL_ATTRIBUTES = Object.freeze({\n  value: {\n    id: 'value',\n  },\n  parameters: {\n    id: 'parameters',\n  },\n});\n\nexport const FUNCTION_TYPE = Object.freeze({\n  function: {\n    id: 'function',\n  },\n});\n\nexport const FUSE_OPTIONS = {\n  isCaseSensitive: false,\n  includeScore: true,\n  minMatchCharLength: 1,\n  shouldSort: false,\n  ignoreFieldNorm: true,\n  threshold: 0.2,\n  ignoreLocation: true,\n};\n\n// NOTE: The default export is mainly for tests\nconst constants = {\n  ROOT_URL,\n  ANON_USERNAME,\n  PERMISSIONS_CODENAMES,\n  HOOK_LOG_STATUSES,\n  KEY_CODES,\n  MODAL_TYPES,\n  PROJECT_SETTINGS_CONTEXTS,\n  update_states,\n  AVAILABLE_FORM_STYLES,\n  VALIDATION_STATUSES,\n  VALIDATION_STATUSES_LIST,\n  ASSET_TYPES,\n  ASSET_FILE_TYPES,\n  QUESTION_TYPES,\n  META_QUESTION_TYPES,\n  ADDITIONAL_SUBMISSION_PROPS,\n  NAME_MAX_LENGTH,\n  COMMON_QUERIES,\n  ACCESS_TYPES,\n  GROUP_TYPES_BEGIN,\n  GROUP_TYPES_END,\n  SCORE_ROW_TYPE,\n  RANK_LEVEL_TYPE,\n  DEPLOYMENT_CATEGORIES,\n  QUERY_LIMIT_DEFAULT,\n  CHOICE_LISTS,\n  MAX_DISPLAYED_STRING_LENGTH,\n  SURVEY_DETAIL_ATTRIBUTES,\n  FUNCTION_TYPE,\n};\n\nexport default constants;\n","import {getRowName} from 'js/assetUtils';\nimport {ASSET_TYPES} from 'js/constants';\nimport {\n  QUESTION_RESTRICTIONS,\n  GROUP_RESTRICTIONS,\n  FORM_RESTRICTIONS,\n  LOCK_ALL_RESTRICTION_NAMES,\n  LOCK_ALL_PROP_NAME,\n  LOCKING_PROFILE_PROP_NAME,\n  LOCKING_PROFILES_PROP_NAME,\n} from './lockingConstants';\n\n/**\n * @param {object} assetContent asset's object content property\n * @param {string} rowName - row or group name\n * @param {string} restrictionName - from QUESTION_RESTRICTIONS or GROUP_RESTRICTIONS\n * @returns {boolean}\n */\nexport function hasRowRestriction(assetContent, rowName, restrictionName) {\n  // case 1\n  // if lock_all is enabled, then all rows have all restrictions from lock all list\n  if (isAssetAllLocked(assetContent)) {\n    return LOCK_ALL_RESTRICTION_NAMES.includes(restrictionName);\n  }\n\n  // case 2\n  // check if row's locking profile definition has the searched restriction\n  const foundProfile = getRowLockingProfile(assetContent, rowName);\n  if (foundProfile) {\n    return foundProfile.restrictions.includes(restrictionName);\n  }\n\n  // default\n  return false;\n}\n\n/**\n * @param {object} assetContent asset's object content property\n * @param {string} restrictionName - from FORM_RESTRICTIONS\n */\nexport function hasAssetRestriction(assetContent, restrictionName) {\n  // case 1\n  // if lock_all is enabled, then form has all restrictions from lock all list\n  if (isAssetAllLocked(assetContent)) {\n    return LOCK_ALL_RESTRICTION_NAMES.includes(restrictionName);\n  }\n\n  // case 2\n  // check if asset's locking profile definition has the searched restriction\n  const foundProfile = getAssetLockingProfile(assetContent);\n  if (foundProfile) {\n    return foundProfile.restrictions.includes(restrictionName);\n  }\n\n  // default\n  return false;\n}\n\n/**\n * Finds locking profile by name\n *\n * @param {object} assetContent asset's object content property\n * @param {string} profileName\n * @returns {object|null} null for no found\n */\nexport function getLockingProfile(assetContent, profileName) {\n  let found = null;\n  if (\n    assetContent &&\n    Array.isArray(assetContent[LOCKING_PROFILES_PROP_NAME])\n  ) {\n    assetContent[LOCKING_PROFILES_PROP_NAME].forEach((profile, index) => {\n      if (profile.name === profileName) {\n        // we make a copy of profile definition to add index to it\n        found = {\n          index: index,\n          name: profile.name,\n          restrictions: profile.restrictions,\n        };\n      }\n    });\n  }\n  return found;\n}\n\n/**\n * Find locking profile of given row - you don't need to know if row has\n * a profile or what's it's name.\n *\n * @param {object} assetContent asset's object content property\n * @param {string} rowName\n * @returns {object|null} null for no found\n */\nexport function getRowLockingProfile(assetContent, rowName) {\n  let found = null;\n\n  const foundRow = assetContent.survey.find((row) => {\n    return getRowName(row) === rowName;\n  });\n  if (\n    foundRow &&\n    typeof foundRow[LOCKING_PROFILE_PROP_NAME] === 'string' &&\n    foundRow[LOCKING_PROFILE_PROP_NAME].length >= 1\n  ) {\n    return getLockingProfile(assetContent, foundRow[LOCKING_PROFILE_PROP_NAME]);\n  }\n\n  return found;\n}\n\n/**\n * Find locking profile of asset - you don't need to know if asset has\n * a profile or what's it's name.\n *\n * @param {object} assetContent asset's object content property\n * @returns {object|null} null for no found\n */\nexport function getAssetLockingProfile(assetContent) {\n  let found = null;\n\n  if (\n    assetContent.settings &&\n    typeof assetContent.settings[LOCKING_PROFILE_PROP_NAME] === 'string' &&\n    assetContent.settings[LOCKING_PROFILE_PROP_NAME].length >= 1\n  ) {\n    return getLockingProfile(assetContent, assetContent.settings[LOCKING_PROFILE_PROP_NAME]);\n  }\n\n  return found;\n}\n\n/**\n * Checks if row has any locking applied, i.e. row has `locking_profile` set and\n * this locking profile has a definition in the asset content settings. As it is\n * actually possible for row to have a locking profile name that the asset\n * doesn't have a definition for.\n *\n * If asset has `lock_all` this will also be true.\n *\n * @param {object} assetContent asset's object content property\n * @param {string} rowName - row or group name\n * @returns {boolean}\n */\nexport function isRowLocked(assetContent, rowName) {\n  // case 1\n  // asset has lock_all\n  if (isAssetAllLocked(assetContent)) {\n    return true;\n  }\n\n  // case 2\n  // row has locking profile that is defined in asset\n  return Boolean(getRowLockingProfile(assetContent, rowName));\n}\n\n/**\n * Checks if asset is locked, i.e. asset has `lock_all` or `locking_profile`.\n *\n * @param {object} assetContent asset's object content property\n * @returns {boolean} whether form has locking\n */\nexport function isAssetLocked(assetContent) {\n  // case 1\n  // asset has lock_all\n  if (isAssetAllLocked(assetContent)) {\n    return true;\n  }\n\n  // case 2\n  // asset has locking profile and the profile definition exist\n  return Boolean(getAssetLockingProfile(assetContent));\n}\n\n/**\n * Checks if anything in the asset is locked, i.e. asset has `lock_all` or\n * `locking_profile` is being set for it or any row.\n * @param {object} assetContent asset's object content property\n * @returns {boolean} whether form or any row has locking on it\n */\nexport function hasAssetAnyLocking(assetContent) {\n  // case 1\n  // asset is locked\n  if (isAssetLocked(assetContent)) {\n    return true;\n  }\n\n  // case 2\n  // at least one row has locking profile that is defined in asset\n  const foundRow = assetContent?.survey.find((row) => {\n    return isRowLocked(assetContent, getRowName(row));\n  });\n  return Boolean(foundRow);\n}\n\n/**\n * Checks if asset has `lock_all`, i.e. everything locked\n * NOTE: if every restriction is locked, but `lock_all` is not set, this will be false\n *\n * @param {object} assetContent asset's object content property\n * @returns {boolean}\n */\nexport function isAssetAllLocked(assetContent) {\n  return Boolean(\n    assetContent?.settings &&\n    assetContent.settings[LOCK_ALL_PROP_NAME] === true\n  );\n}\n\n/**\n * Useful to check if given asset should have the UI elements locked (e.g.\n * disabled or hidden)\n *\n * @param {string} assetType one of ASSET_TYPES\n * @returns {boolean} whether the asset can be locked\n */\nexport function isAssetLockable(assetType) {\n  // currently only surveys are lockeable\n  return assetType === ASSET_TYPES.survey.id;\n}\n\n/**\n * @param {object} assetContent\n * @param {string} rowName\n * @returns {object|null}\n */\nexport function getQuestionFeatures(assetContent, rowName) {\n  // if question does not exist then return null\n  const foundRow = assetContent.survey.find((row) => {\n    return getRowName(row) === rowName;\n  });\n  if (!foundRow) {\n    return null;\n  }\n\n  return _getFeatures(\n    QUESTION_RESTRICTIONS,\n    getRowLockingProfile(assetContent, rowName),\n    isAssetAllLocked(assetContent)\n  );\n}\n\n/**\n * @param {object} assetContent\n * @param {string} rowName\n * @returns {object}\n */\nexport function getGroupFeatures(assetContent, rowName) {\n  // if question does not exist then return null\n  const foundRow = assetContent.survey.find((row) => {\n    return getRowName(row) === rowName;\n  });\n  if (!foundRow) {\n    return null;\n  }\n\n  return _getFeatures(\n    GROUP_RESTRICTIONS,\n    getRowLockingProfile(assetContent, rowName),\n    isAssetAllLocked(assetContent)\n  );\n}\n\n/**\n * @param {object} assetContent\n * @returns {object}\n */\nexport function getFormFeatures(assetContent) {\n  return _getFeatures(\n    FORM_RESTRICTIONS,\n    getAssetLockingProfile(assetContent),\n    isAssetAllLocked(assetContent)\n  );\n}\n\n/**\n * Returns two lists - the restrictions that apply to row/asset and the one's\n * that don't\n * @param {object[]} sourceList\n * @param {object} profile\n * @param {boolean} isAllLocked\n * @returns {object} two arrays of LOCKING_RESTRICTIONS: `cans` and `cants`\n */\nfunction _getFeatures(sourceList, profile, isAllLocked) {\n  const outcome = {\n    cans: [],\n    cants: [],\n  };\n\n  sourceList.forEach((restriction) => {\n    if (isAllLocked || (profile && profile.restrictions.includes(restriction.name))) {\n      outcome.cants.push(restriction);\n    } else {\n      outcome.cans.push(restriction);\n    }\n  });\n\n  return outcome;\n}\n","/**\n * When adding or changing restrictions, plase make sure to update all the\n * arrays of restrictions below.\n *\n * NOTE: this list should match a list from:\n * https://github.com/kobotoolbox/formpack/blob/master/src/formpack/constants.py\n */\nexport const LOCKING_RESTRICTIONS = Object.freeze({\n  // question related\n  choice_add: {name: 'choice_add', label: t('Add choice to question')},\n  choice_delete: {name: 'choice_delete', label: t('Remove choice from question')},\n  choice_label_edit: {name: 'choice_label_edit', label: t('Edit choice labels')},\n  choice_order_edit: {name: 'choice_order_edit', label: t('Change choice order')},\n  choice_value_edit: {name: 'choice_value_edit', label: t('Edit choice values')},\n  question_delete: {name: 'question_delete', label: t('Delete question')},\n  question_label_edit: {name: 'question_label_edit', label: t('Edit question labels')},\n  question_settings_edit: {name: 'question_settings_edit', label: t('Edit question settings')},\n  question_skip_logic_edit: {name: 'question_skip_logic_edit', label: t('Edit skip logic')},\n  question_validation_edit: {name: 'question_validation_edit', label: t('Edit validation')},\n  // group related\n  group_delete: {name: 'group_delete', label: t('Delete entire group')},\n  group_label_edit: {name: 'group_label_edit', label: t('Edit group labels')},\n  group_question_add: {name: 'group_question_add', label: t('Add question to group')},\n  group_question_delete: {name: 'group_question_delete', label: t('Remove question from group')},\n  group_question_order_edit: {name: 'group_question_order_edit', label: t('Change question order within group')},\n  group_settings_edit: {name: 'group_settings_edit', label: t('Edit group settings')},\n  group_skip_logic_edit: {name: 'group_skip_logic_edit', label: t('Edit skip logic')},\n  group_split: {name: 'group_split', label: t('Split group')},\n  // form related\n  form_appearance: {name: 'form_appearance', label: t('Change form appearance')},\n  form_meta_edit: {name: 'form_meta_edit', label: t('Change form meta questions')},\n  form_replace: {name: 'form_replace', label: t('Replace whole form')},\n  group_add: {name: 'group_add', label: t('Add group')},\n  question_add: {name: 'question_add', label: t('Add question')},\n  question_order_edit: {name: 'question_order_edit', label: t('Change question order')},\n  language_edit: {name: 'language_edit', label: t('Change languages')},\n});\n\n// all restrictions for questions and choices\nexport const QUESTION_RESTRICTIONS = [\n  LOCKING_RESTRICTIONS.choice_add,\n  LOCKING_RESTRICTIONS.choice_delete,\n  LOCKING_RESTRICTIONS.choice_label_edit,\n  LOCKING_RESTRICTIONS.choice_order_edit,\n  LOCKING_RESTRICTIONS.choice_value_edit,\n  LOCKING_RESTRICTIONS.question_delete,\n  LOCKING_RESTRICTIONS.question_label_edit,\n  LOCKING_RESTRICTIONS.question_settings_edit,\n  LOCKING_RESTRICTIONS.question_skip_logic_edit,\n  LOCKING_RESTRICTIONS.question_validation_edit,\n];\n\n// all restrictions for groups\nexport const GROUP_RESTRICTIONS = [\n  LOCKING_RESTRICTIONS.group_delete,\n  LOCKING_RESTRICTIONS.group_label_edit,\n  LOCKING_RESTRICTIONS.group_question_add,\n  LOCKING_RESTRICTIONS.group_question_delete,\n  LOCKING_RESTRICTIONS.group_question_order_edit,\n  LOCKING_RESTRICTIONS.group_settings_edit,\n  LOCKING_RESTRICTIONS.group_skip_logic_edit,\n  LOCKING_RESTRICTIONS.group_split,\n];\n\n// all restrictions for form\nexport const FORM_RESTRICTIONS = [\n  LOCKING_RESTRICTIONS.form_appearance,\n  LOCKING_RESTRICTIONS.form_meta_edit,\n  LOCKING_RESTRICTIONS.form_replace,\n  LOCKING_RESTRICTIONS.group_add,\n  LOCKING_RESTRICTIONS.question_add,\n  LOCKING_RESTRICTIONS.question_order_edit,\n  LOCKING_RESTRICTIONS.language_edit,\n];\n\n// currently lock_all has all restrictions,\n// but we want to be flexible, so we use an array\nexport const LOCK_ALL_RESTRICTION_NAMES = [\n  LOCKING_RESTRICTIONS.choice_add.name,\n  LOCKING_RESTRICTIONS.choice_delete.name,\n  LOCKING_RESTRICTIONS.choice_label_edit.name,\n  LOCKING_RESTRICTIONS.choice_order_edit.name,\n  LOCKING_RESTRICTIONS.choice_value_edit.name,\n  LOCKING_RESTRICTIONS.question_delete.name,\n  LOCKING_RESTRICTIONS.question_label_edit.name,\n  LOCKING_RESTRICTIONS.question_settings_edit.name,\n  LOCKING_RESTRICTIONS.question_skip_logic_edit.name,\n  LOCKING_RESTRICTIONS.question_validation_edit.name,\n  LOCKING_RESTRICTIONS.group_delete.name,\n  LOCKING_RESTRICTIONS.group_label_edit.name,\n  LOCKING_RESTRICTIONS.group_question_add.name,\n  LOCKING_RESTRICTIONS.group_question_delete.name,\n  LOCKING_RESTRICTIONS.group_question_order_edit.name,\n  LOCKING_RESTRICTIONS.group_settings_edit.name,\n  LOCKING_RESTRICTIONS.group_skip_logic_edit.name,\n  LOCKING_RESTRICTIONS.group_split.name,\n  LOCKING_RESTRICTIONS.form_appearance.name,\n  LOCKING_RESTRICTIONS.form_meta_edit.name,\n  LOCKING_RESTRICTIONS.form_replace.name,\n  LOCKING_RESTRICTIONS.group_add.name,\n  LOCKING_RESTRICTIONS.question_add.name,\n  LOCKING_RESTRICTIONS.question_order_edit.name,\n  LOCKING_RESTRICTIONS.language_edit.name,\n];\n\nexport const LOCK_ALL_PROP_NAME = 'kobo--lock_all';\n\nexport const LOCKING_PROFILE_PROP_NAME = 'kobo--locking-profile';\n\nexport const LOCKING_PROFILES_PROP_NAME = 'kobo--locking-profiles';\n\nexport const LOCKING_UI_CLASSNAMES = {\n  HIDDEN: 'locking__ui-hidden',\n  DISABLED: 'locking__ui-disabled',\n};\n","import Reflux from 'reflux';\n\nclass PermConfigStore extends Reflux.Store {\n  permissions: PermissionDefinition[] = []\n\n  public setPermissions(permissions: PermissionDefinition[]) {\n    this.permissions = permissions;\n  }\n\n  public getPermissionByCodename(wantedCodename: string) {\n    this.verifyReady();\n    return this.permissions.find((perm) => perm.codename === wantedCodename);\n  }\n\n  public getPermission(wantedUrl: string) {\n    this.verifyReady();\n    return this.permissions.find((perm) => perm.url === wantedUrl);\n  }\n\n  /**\n   * Throws if trying to use permConfig before it fetches data from BE or if\n   * data given by `setPermissions` is not an array.\n   */\n  private verifyReady() {\n    if (!this.isReady()) {\n      throw new Error(t('Permission config is not ready or failed to initialize!'));\n    }\n  }\n\n  public isReady() {\n    return Array.isArray(this.permissions) && this.permissions.length !== 0;\n  }\n}\n\n/**\n * NOTE: this store relies on the app being initialized by calling\n * `actions.permissions.getConfig()` and then manually setting results here,\n * otherwise expect `verifyReady` to throw\n */\nconst permConfig = new PermConfigStore();\n\nexport default permConfig;\n","function createFunctions(Reflux, PromiseFactory) {\n\n    const _ = Reflux.utils;\n\n    /**\n     * Returns a Promise for the triggered action\n     *\n     * @return {Promise}\n     *   Resolved by completed child action.\n     *   Rejected by failed child action.\n     *   If listenAndPromise'd, then promise associated to this trigger.\n     *   Otherwise, the promise is for next child action completion.\n     */\n    function triggerPromise() {\n        var me = this;\n        var args = arguments;\n\n        var canHandlePromise =\n            this.children.indexOf('completed') >= 0 &&\n            this.children.indexOf('failed') >= 0;\n\n        var createdPromise = new PromiseFactory(function(resolve, reject) {\n            // If `listenAndPromise` is listening\n            // patch `promise` w/ context-loaded resolve/reject\n            if (me.willCallPromise) {\n                _.nextTick(function() {\n                    var previousPromise = me.promise;\n                    me.promise = function (inputPromise) {\n                        inputPromise.then(resolve, reject);\n                        // Back to your regularly schedule programming.\n                        me.promise = previousPromise;\n                        return me.promise.apply(me, arguments);\n                    };\n                    me.trigger.apply(me, args);\n                });\n                return;\n            }\n\n            if (canHandlePromise) {\n                var removeSuccess = me.completed.listen(function () {\n                    var args = Array.prototype.slice.call(arguments);\n                    removeSuccess();\n                    removeFailed();\n                    resolve(args.length > 1 ? args : args[0]);\n                });\n\n                var removeFailed = me.failed.listen(function () {\n                    var args = Array.prototype.slice.call(arguments);\n                    removeSuccess();\n                    removeFailed();\n                    reject(args.length > 1 ? args : args[0]);\n                });\n            }\n\n            _.nextTick(function () {\n                me.trigger.apply(me, args);\n            });\n\n            if (!canHandlePromise) {\n                resolve();\n            }\n        });\n\n        // Ensure that the promise does trigger \"Uncaught (in promise)\" errors in console if no error handler is added\n        // See: https://github.com/reflux/reflux-promise/issues/4\n        createdPromise.catch(function() {});\n\n        return createdPromise;\n    }\n\n    /**\n     * Attach handlers to promise that trigger the completed and failed\n     * child publishers, if available.\n     *\n     * @param {Object} p The promise to attach to\n     */\n    function promise(p) {\n        var me = this;\n\n        var canHandlePromise =\n            this.children.indexOf('completed') >= 0 &&\n            this.children.indexOf('failed') >= 0;\n\n        if (!canHandlePromise){\n            throw new Error('Publisher must have \"completed\" and \"failed\" child publishers');\n        }\n\n        p.then(function(response) {\n            return me.completed(response);\n        }, function(error) {\n            return me.failed(error);\n        });\n    }\n\n    /**\n     * Subscribes the given callback for action triggered, which should\n     * return a promise that in turn is passed to `this.promise`\n     *\n     * @param {Function} callback The callback to register as event handler\n     */\n    function listenAndPromise(callback, bindContext) {\n        var me = this;\n        bindContext = bindContext || this;\n        this.willCallPromise = (this.willCallPromise || 0) + 1;\n\n        var removeListen = this.listen(function() {\n\n            if (!callback) {\n                throw new Error('Expected a function returning a promise but got ' + callback);\n            }\n\n            var args = arguments,\n                returnedPromise = callback.apply(bindContext, args);\n            return me.promise.call(me, returnedPromise);\n        }, bindContext);\n\n        return function () {\n          me.willCallPromise--;\n          removeListen.call(me);\n        };\n\n    }\n\n    return {\n        triggerPromise: triggerPromise,\n        promise: promise,\n        listenAndPromise: listenAndPromise\n    };\n}\n\n/**\n * Sets up reflux with Promise functionality\n */\nexport default function(promiseFactory) {\n    return function(Reflux) {\n        const { triggerPromise, promise, listenAndPromise } = createFunctions(Reflux, promiseFactory);\n        Reflux.PublisherMethods.triggerAsync = triggerPromise;\n        Reflux.PublisherMethods.promise = promise;\n        Reflux.PublisherMethods.listenAndPromise = listenAndPromise;\n    };\n}\n","/**\n * permissions related actions\n */\n\nimport Reflux from 'reflux';\nimport RefluxPromise from 'js/libs/reflux-promise';\nReflux.use(RefluxPromise(window.Promise));\nimport {dataInterface} from 'js/dataInterface';\nimport {\n  notify,\n  buildUserUrl,\n} from 'utils';\nimport {\n  ANON_USERNAME,\n  PERMISSIONS_CODENAMES,\n} from 'js/constants';\nimport permConfig from 'js/components/permissions/permConfig';\n\nexport const permissionsActions = Reflux.createActions({\n  getConfig: {children: ['completed', 'failed']},\n  getAssetPermissions: {children: ['completed', 'failed']},\n  bulkSetAssetPermissions: {children: ['completed', 'failed']},\n  assignAssetPermission: {children: ['completed', 'failed']},\n  removeAssetPermission: {children: ['completed', 'failed']},\n  setAssetPublic: {children: ['completed', 'failed']},\n  copyPermissionsFrom: {children: ['completed', 'failed']},\n});\n\n/**\n * New actions\n */\n\npermissionsActions.getConfig.listen(() => {\n  dataInterface.getPermissionsConfig()\n    .done(permissionsActions.getConfig.completed)\n    .fail(permissionsActions.getConfig.failed);\n});\n\npermissionsActions.getConfig.failed.listen(() => {\n  notify('Failed to get permissions config!', 'error');\n});\n\npermissionsActions.getAssetPermissions.listen((assetUid) => {\n  dataInterface.getAssetPermissions(assetUid)\n    .done(permissionsActions.getAssetPermissions.completed)\n    .fail(permissionsActions.getAssetPermissions.failed);\n});\n\n/**\n * For bulk setting permissions - wipes all current permissions, sets given ones\n *\n * @param {string} assetUid\n * @param {Object[]} perms - permissions to set\n */\npermissionsActions.bulkSetAssetPermissions.listen((assetUid, perms) => {\n  dataInterface.bulkSetAssetPermissions(assetUid, perms)\n    .done((permissionAssignments) => {\n      permissionsActions.bulkSetAssetPermissions.completed(permissionAssignments);\n    })\n    .fail(() => {\n      permissionsActions.getAssetPermissions(assetUid);\n      permissionsActions.bulkSetAssetPermissions.failed();\n    });\n});\n\n/**\n * For adding single asset permission\n *\n * @param {string} assetUid\n * @param {Object} perm - permission to add\n */\npermissionsActions.assignAssetPermission.listen((assetUid, perm) => {\n  dataInterface.assignAssetPermission(assetUid, perm)\n    .done(() => {\n      permissionsActions.getAssetPermissions(assetUid);\n      permissionsActions.assignAssetPermission.completed(assetUid);\n    })\n    .fail(() => {\n      permissionsActions.getAssetPermissions(assetUid);\n      permissionsActions.assignAssetPermission.failed(assetUid);\n    });\n});\n\n/**\n * For removing single permission\n *\n * @param {string} assetUid\n * @param {string} perm - permission url\n */\npermissionsActions.removeAssetPermission.listen((assetUid, perm, isNonOwner) => {\n  dataInterface.removePermission(perm)\n    .done(() => {\n      // Avoid this call if a non-owner removed their own permissions as it will fail\n      if (!isNonOwner) {\n        permissionsActions.getAssetPermissions(assetUid);\n      }\n      permissionsActions.removeAssetPermission.completed(assetUid, isNonOwner);\n    })\n    .fail(() => {\n      permissionsActions.getAssetPermissions(assetUid);\n      permissionsActions.removeAssetPermission.failed(assetUid);\n    });\n});\n\n/**\n * Makes asset public or private. This is a special action that mixes\n * bulkSetAssetPermissions and removeAssetPermission to elegantly solve a\n * particular problem.\n *\n * @param {Object} asset - BE asset data\n * @param {boolean} shouldSetAnonPerms\n */\npermissionsActions.setAssetPublic.listen((asset, shouldSetAnonPerms) => {\n  if (shouldSetAnonPerms) {\n    const permsToSet = asset.permissions.filter((permissionAssignment) => {\n      return permissionAssignment.user !== asset.owner;\n    });\n    permsToSet.push({\n      user: buildUserUrl(ANON_USERNAME),\n      permission: permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.view_asset).url\n    });\n    permsToSet.push({\n      user: buildUserUrl(ANON_USERNAME),\n      permission: permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.discover_asset).url\n    });\n    dataInterface.bulkSetAssetPermissions(asset.uid, permsToSet)\n      .done(() => {permissionsActions.setAssetPublic.completed(asset.uid, shouldSetAnonPerms);})\n      .fail(() => {permissionsActions.setAssetPublic.failed(asset.uid, shouldSetAnonPerms);});\n  } else {\n    const permToRemove = asset.permissions.find((permissionAssignment) => {\n      return (\n        permissionAssignment.user === buildUserUrl(ANON_USERNAME) &&\n        permissionAssignment.permission === permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.view_asset).url\n      );\n    });\n    dataInterface.removePermission(permToRemove.url)\n      .done(() => {permissionsActions.setAssetPublic.completed(asset.uid, shouldSetAnonPerms);})\n      .fail(() => {permissionsActions.setAssetPublic.failed(asset.uid, shouldSetAnonPerms);});\n  }\n});\n\n// copies permissions from one asset to other\npermissionsActions.copyPermissionsFrom.listen(function(sourceUid, targetUid) {\n  dataInterface.copyPermissionsFrom(sourceUid, targetUid)\n    .done(() => {\n      permissionsActions.getAssetPermissions(targetUid);\n      permissionsActions.copyPermissionsFrom.completed(sourceUid, targetUid);\n    })\n    .fail(permissionsActions.copyPermissionsFrom.failed);\n});\n","/**\n * help related actions\n */\n\nimport Reflux from 'reflux';\nimport {dataInterface} from '../dataInterface';\nimport {notify} from 'utils';\n\nexport const helpActions = Reflux.createActions({\n  getInAppMessages: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  setMessageAcknowledged: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n  setMessageReadTime: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  }\n});\n\nhelpActions.getInAppMessages.listen(() => {\n  dataInterface.getHelpInAppMessages()\n    .done(helpActions.getInAppMessages.completed)\n    .fail(helpActions.getInAppMessages.failed);\n});\nhelpActions.getInAppMessages.failed.listen(() => {\n  notify(t('Failed to get in app messages.'), 'error');\n});\n\nhelpActions.setMessageReadTime.listen((uid, readTime) => {\n  dataInterface.patchHelpInAppMessage(uid, {interactions: {\n    readTime: readTime,\n    // we assume that reading messages is a conscious action\n    acknowledged: true\n  }})\n    .done(helpActions.setMessageReadTime.completed)\n    .fail(helpActions.setMessageReadTime.failed);\n});\nhelpActions.setMessageReadTime.failed.listen(() => {\n  notify(t('Failed to set message readTime.'), 'error');\n});\n\nhelpActions.setMessageAcknowledged.listen((uid, isAcknowledged) => {\n  dataInterface.patchHelpInAppMessage(uid, {interactions: {acknowledged: isAcknowledged}})\n    .done(helpActions.setMessageAcknowledged.completed)\n    .fail(helpActions.setMessageAcknowledged.failed);\n});\nhelpActions.setMessageAcknowledged.failed.listen(() => {\n  notify(t('Failed to set message acknowledged.'), 'error');\n});\n","/**\n * library specific actions\n */\n\nimport Reflux from 'reflux';\nimport {dataInterface} from 'js/dataInterface';\nimport {notify} from 'utils';\n\nconst libraryActions = Reflux.createActions({\n  searchMyCollectionAssets: {\n    children: [\n      'started',\n      'completed',\n      'failed'\n    ]\n  },\n  searchMyLibraryAssets: {\n    children: [\n      'started',\n      'completed',\n      'failed'\n    ]\n  },\n\n  searchMyCollectionMetadata: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n\n  searchMyLibraryMetadata: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n\n  searchPublicCollections: {\n    children: [\n      'started',\n      'completed',\n      'failed'\n    ]\n  },\n\n  searchPublicCollectionsMetadata: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n\n  subscribeToCollection: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n\n  unsubscribeFromCollection: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n\n  moveToCollection: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n\n  getCollections: {\n    children: [\n      'completed',\n      'failed'\n    ]\n  },\n});\n\n/**\n * Gets single collection's assets\n *\n * @param {object} params\n */\nlibraryActions.searchMyCollectionAssets.listen((params) => {\n  const xhr = dataInterface.searchMyCollectionAssets(params)\n    .done(libraryActions.searchMyCollectionAssets.completed)\n    .fail(libraryActions.searchMyCollectionAssets.failed);\n  libraryActions.searchMyCollectionAssets.started(xhr.abort);\n});\n\n/**\n * Gets library assets and metadata (with a flag)\n * Note: `started` callback returns abort method immediately\n * @param {object} params\n */\nlibraryActions.searchMyLibraryAssets.listen((params) => {\n  const xhr = dataInterface.searchMyLibraryAssets(params)\n    .done(libraryActions.searchMyLibraryAssets.completed)\n    .fail(libraryActions.searchMyLibraryAssets.failed);\n  libraryActions.searchMyLibraryAssets.started(xhr.abort);\n});\n\n\n/**\n * Gets metadata for a single collection's assets\n * @param {object} params\n */\nlibraryActions.searchMyCollectionMetadata.listen((params) => {\n  dataInterface.searchMyCollectionMetadata(params)\n    .done(libraryActions.searchMyCollectionMetadata.completed)\n    .fail(libraryActions.searchMyCollectionMetadata.failed);\n});\n\n/**\n * Gets metadata for library assets\n * @param {object} params\n */\nlibraryActions.searchMyLibraryMetadata.listen((params) => {\n  dataInterface.searchMyLibraryMetadata(params)\n    .done(libraryActions.searchMyLibraryMetadata.completed)\n    .fail(libraryActions.searchMyLibraryMetadata.failed);\n});\n\n/**\n * Gets public collections and metadata (with a flag)\n * Note: `started` callback returns abort method immediately\n * @param {object} params\n */\nlibraryActions.searchPublicCollections.listen((params) => {\n  const xhr = dataInterface.searchPublicCollections(params)\n    .done(libraryActions.searchPublicCollections.completed)\n    .fail(libraryActions.searchPublicCollections.failed);\n  libraryActions.searchPublicCollections.started(xhr.abort);\n});\n\n/**\n * Gets metadata for public collections\n * @param {object} params\n */\nlibraryActions.searchPublicCollectionsMetadata.listen((params) => {\n  dataInterface.searchPublicCollectionsMetadata(params)\n    .done(libraryActions.searchPublicCollectionsMetadata.completed)\n    .fail(libraryActions.searchPublicCollectionsMetadata.failed);\n});\n\n/**\n * @param {string} assetUrl - url of target collection.\n */\nlibraryActions.subscribeToCollection.listen((assetUrl) => {\n  dataInterface.subscribeToCollection(assetUrl)\n    .done(libraryActions.subscribeToCollection.completed)\n    .fail(libraryActions.subscribeToCollection.failed);\n});\n\n/**\n * @param {string} assetUid - uid of target collection.\n */\nlibraryActions.unsubscribeFromCollection.listen((assetUid) => {\n  dataInterface.unsubscribeFromCollection(assetUid)\n    .done(libraryActions.unsubscribeFromCollection.completed)\n    .fail(libraryActions.unsubscribeFromCollection.failed);\n});\n\n/**\n * Moves asset to a collection.\n * @param {string} assetUid\n * @param {string} collectionUrl\n */\nlibraryActions.moveToCollection.listen((assetUid, collectionUrl) => {\n  dataInterface.patchAsset(assetUid, {parent: collectionUrl})\n    .done(libraryActions.moveToCollection.completed)\n    .fail(libraryActions.moveToCollection.failed);\n});\n\n/**\n * Gets a list of collections.\n * @param {object} params\n * @param {string} [params.owner]\n * @param {number} [params.pageSize]\n * @param {number} [params.page]\n */\nlibraryActions.getCollections.listen((params) => {\n  dataInterface.getCollections(params)\n    .done(libraryActions.getCollections.completed)\n    .fail(libraryActions.getCollections.failed);\n});\n\n// global notifications for actions\n\nlibraryActions.moveToCollection.completed.listen((asset) => {\n  if (asset.parent === null) {\n    notify(t('Successfuly removed from collection'));\n  } else {\n    notify(t('Successfuly moved to collection'));\n  }\n});\nlibraryActions.moveToCollection.failed.listen(() => {\n  notify(t('Move to collection failed'), 'error');\n});\n\nconst onAnySearchFailed = (response) => {\n  if (response.statusText !== 'abort') {\n    notify(response.responseJSON?.detail || t('Failed to get the results'), 'error');\n  }\n};\n\nlibraryActions.searchMyLibraryAssets.failed.listen(onAnySearchFailed);\nlibraryActions.searchMyLibraryMetadata.failed.listen(onAnySearchFailed);\nlibraryActions.searchPublicCollections.failed.listen(onAnySearchFailed);\nlibraryActions.searchPublicCollectionsMetadata.failed.listen(onAnySearchFailed);\n\nexport default libraryActions;\n","/**\n * submissions related actions\n */\n\nimport Reflux from 'reflux';\nimport {dataInterface} from 'js/dataInterface';\nimport {notify} from 'utils';\n\nconst submissionsActions = Reflux.createActions({\n  getSubmissions: {children: ['completed', 'failed']},\n  bulkDeleteStatus: {children: ['completed', 'failed']},\n  bulkPatchStatus: {children: ['completed', 'failed']},\n  bulkPatchValues: {children: ['completed', 'failed']},\n  bulkDelete: {children: ['completed', 'failed']},\n});\n\n/**\n * @typedef SortObj\n * @param {string} id - column name\n * @param {boolean} desc - `true` for descending and `false` for ascending\n */\n\n/**\n * NOTE: all of the parameters have their default values defined for\n * `dataInterface` function.\n *\n * @param {object} options\n * @param {string} options.uid - the asset uid\n * @param {number} [options.pageSize]\n * @param {number} [options.page]\n * @param {SortObj[]} [options.sort]\n * @param {string[]} [options.fields]\n * @param {string} [options.filter]\n */\nsubmissionsActions.getSubmissions.listen((options) => {\n  dataInterface.getSubmissions(\n    options.uid,\n    options.pageSize,\n    options.page,\n    options.sort,\n    options.fields,\n    options.filter\n  )\n    .done((response) => {\n      submissionsActions.getSubmissions.completed(response, options);\n    })\n    .fail((response) => {\n      submissionsActions.getSubmissions.failed(response, options);\n    });\n});\n\nsubmissionsActions.bulkDeleteStatus.listen((uid, data) => {\n  dataInterface.bulkRemoveSubmissionsValidationStatus(uid, data)\n    .done(submissionsActions.bulkDeleteStatus.completed)\n    .fail(submissionsActions.bulkDeleteStatus.failed);\n});\nsubmissionsActions.bulkDeleteStatus.failed.listen(() => {\n  notify(t('Failed to update submissions.'), 'error');\n});\n\nsubmissionsActions.bulkPatchStatus.listen((uid, data) => {\n  dataInterface.bulkPatchSubmissionsValidationStatus(uid, data)\n    .done(submissionsActions.bulkPatchStatus.completed)\n    .fail(submissionsActions.bulkPatchStatus.failed);\n});\nsubmissionsActions.bulkPatchStatus.failed.listen(() => {\n  notify(t('Failed to update submissions.'), 'error');\n});\n\n/**\n * @param {string} uid - project unique id\n * @param {string[]} submissionIds - selected submissions\n * @param {object} data\n * @param {string} data.<field_name_to_update> - with a new value, repeat with different fields if necessary\n */\nsubmissionsActions.bulkPatchValues.listen((uid, submissionIds, data) => {\n  dataInterface.bulkPatchSubmissionsValues(uid, submissionIds, data)\n    .done(submissionsActions.bulkPatchValues.completed)\n    .fail(submissionsActions.bulkPatchValues.failed);\n});\nsubmissionsActions.bulkPatchValues.completed.listen((response) => {\n  if (response.failures !== 0) {\n    notify(t('Failed to update some submissions values.'), 'error');\n  }\n});\nsubmissionsActions.bulkPatchValues.failed.listen(() => {\n  notify(t('Failed to update submissions values.'), 'error');\n});\n\nsubmissionsActions.bulkDelete.listen((uid, data) => {\n  dataInterface.bulkDeleteSubmissions(uid, data)\n    .done(submissionsActions.bulkDelete.completed)\n    .fail(submissionsActions.bulkDelete.failed);\n});\nsubmissionsActions.bulkDelete.failed.listen(() => {\n  notify(t('Failed to delete submissions.'), 'error');\n});\n\nexport default submissionsActions;\n","/**\n * Form Media related actions\n */\n\nimport alertify from 'alertifyjs';\nimport Reflux from 'reflux';\nimport {dataInterface} from 'js/dataInterface';\n\nconst FORM_MEDIA_FILE_TYPE = 'form_media';\n\nconst formMediaActions = Reflux.createActions({\n  loadMedia: {children: ['completed', 'failed']},\n  uploadMedia: {children: ['completed', 'failed']},\n  deleteMedia: {children: ['completed', 'failed']},\n});\n\nformMediaActions.uploadMedia.listen((uid, formMediaJSON) => {\n  dataInterface.postFormMedia(uid, formMediaJSON)\n    .done(() => {\n      formMediaActions.uploadMedia.completed(uid);\n    })\n    .fail(formMediaActions.uploadMedia.failed);\n});\nformMediaActions.uploadMedia.completed.listen((uid) => {\n  formMediaActions.loadMedia(uid);\n});\nformMediaActions.uploadMedia.failed.listen(() => {\n  alertify.error(t('Could not upload your media'));\n});\n\nformMediaActions.loadMedia.listen((uid) => {\n  dataInterface.getAssetFiles(uid, FORM_MEDIA_FILE_TYPE)\n    .done(formMediaActions.loadMedia.completed)\n    .fail(formMediaActions.loadMedia.failed);\n});\nformMediaActions.loadMedia.failed.listen(() => {\n  alertify.error(t('Something went wrong with getting your media'));\n});\n\nformMediaActions.deleteMedia.listen((uid, url) => {\n  dataInterface.deleteFormMedia(url)\n    .done(() => {\n      formMediaActions.deleteMedia.completed(uid);\n    })\n    .fail(formMediaActions.deleteMedia.failed);\n});\nformMediaActions.deleteMedia.completed.listen((uid) => {\n  alertify.success(t('Successfully deleted media'));\n  formMediaActions.loadMedia(uid);\n});\nformMediaActions.deleteMedia.failed.listen(() => {\n  alertify.error(t('Failed to delete media!'));\n});\n\nexport default formMediaActions;\n","/**\n * exports related actions\n */\n\nimport Reflux from 'reflux';\nimport {dataInterface} from 'js/dataInterface';\nimport {notify} from 'utils';\n\nconst exportsActions = Reflux.createActions({\n  getExport: {children: ['completed', 'failed']},\n  getExports: {children: ['completed', 'failed']},\n  createExport: {children: ['completed', 'failed']},\n  deleteExport: {children: ['completed', 'failed']},\n  getExportSettings: {children: ['completed', 'failed']},\n  getExportSetting: {children: ['completed', 'failed']},\n  updateExportSetting: {children: ['completed', 'failed']},\n  createExportSetting: {children: ['completed', 'failed']},\n  deleteExportSetting: {children: ['completed', 'failed']},\n});\n\n/**\n * @param {string} assetUid\n */\nexportsActions.getExports.listen((assetUid) => {\n  dataInterface.getAssetExports(assetUid)\n    .done(exportsActions.getExports.completed)\n    .fail(exportsActions.getExports.failed);\n});\n\n/**\n * @param {string} assetUid\n * @param {string} exportUid\n */\nexportsActions.getExport.listen((assetUid, exportUid) => {\n  dataInterface.getAssetExport(assetUid, exportUid)\n    .done(exportsActions.getExport.completed)\n    .fail(exportsActions.getExport.failed);\n});\n\n/**\n * @param {string} assetUid\n * @param {object} data\n * @param {string} data.source - asset uid\n * …and the rest of parameters should match export_settings\n */\nexportsActions.createExport.listen((assetUid, data) => {\n  dataInterface.createAssetExport(assetUid, data)\n    .done(exportsActions.createExport.completed)\n    .fail(exportsActions.createExport.failed);\n});\nexportsActions.createExport.failed.listen(() => {\n  notify(t('Failed to create export'), 'error');\n});\n\n/**\n * @param {string} assetUid\n * @param {string} exportUid\n */\nexportsActions.deleteExport.listen((assetUid, exportUid) => {\n  dataInterface.deleteAssetExport(assetUid, exportUid)\n    .done(exportsActions.deleteExport.completed)\n    .fail(exportsActions.deleteExport.failed);\n});\nexportsActions.deleteExport.failed.listen(() => {\n  notify(t('Failed to delete export'), 'error');\n});\n\n/**\n * @param {string} assetUid\n * @param {object} [passData] - object with custom properties to be passed to\n *                              success response\n */\nexportsActions.getExportSettings.listen((assetUid, passData = {}) => {\n  dataInterface.getExportSettings(assetUid)\n    .done((response) => {\n      exportsActions.getExportSettings.completed(response, passData);\n    })\n    .fail(exportsActions.getExportSettings.failed);\n});\n\n/**\n * @param {string} assetUid\n * @param {string} settingUid\n */\nexportsActions.getExportSetting.listen((assetUid, settingUid) => {\n  dataInterface.getExportSetting(assetUid, settingUid)\n    .done(exportsActions.getExportSetting.completed)\n    .fail(exportsActions.getExportSetting.failed);\n});\n\n/**\n * @param {string} assetUid\n * @param {string} settingUid\n * @param {object} data\n */\nexportsActions.updateExportSetting.listen((assetUid, settingUid, data) => {\n  const cleanData = {\n    name: data.name,\n    export_settings: JSON.stringify(data.export_settings),\n  };\n  dataInterface.updateExportSetting(assetUid, settingUid, cleanData)\n    .done(exportsActions.updateExportSetting.completed)\n    .fail(exportsActions.updateExportSetting.failed);\n});\nexportsActions.updateExportSetting.failed.listen(() => {\n  notify(t('Failed to update export setting'), 'error');\n});\n\n/**\n * @param {string} assetUid\n * @param {object} data\n */\nexportsActions.createExportSetting.listen((assetUid, data) => {\n  const cleanData = {\n    name: data.name,\n    export_settings: JSON.stringify(data.export_settings),\n  };\n  dataInterface.createExportSetting(assetUid, cleanData)\n    .done(exportsActions.createExportSetting.completed)\n    .fail(exportsActions.createExportSetting.failed);\n});\nexportsActions.createExportSetting.failed.listen(() => {\n  notify(t('Failed to create export setting'), 'error');\n});\n\n/**\n * @param {string} assetUid\n * @param {string} settingUid\n */\nexportsActions.deleteExportSetting.listen((assetUid, settingUid) => {\n  dataInterface.deleteExportSetting(assetUid, settingUid)\n    .done(exportsActions.deleteExportSetting.completed)\n    .fail(exportsActions.deleteExportSetting.failed);\n});\nexportsActions.deleteExportSetting.failed.listen(() => {\n  notify(t('Failed to delete export setting'), 'error');\n});\n\nexport default exportsActions;\n","/**\n * Dynamic data attachment related actions\n */\n\nimport Reflux from 'reflux';\nimport alertify from 'alertifyjs';\nimport {dataInterface} from 'js/dataInterface';\nimport {MAX_DISPLAYED_STRING_LENGTH} from 'js/constants';\nimport {\n  getAssetUIDFromUrl,\n  truncateFile,\n  truncateString,\n} from 'js/utils';\n\nconst dataShareActions = Reflux.createActions({\n  attachToSource: {children: ['started', 'completed', 'failed']},\n  detachSource: {children: ['completed', 'failed']},\n  patchSource: {children: ['started', 'completed', 'failed']},\n  getAttachedSources: {children: ['completed', 'failed']},\n  getSharingEnabledAssets: {children: ['completed', 'failed']},\n  toggleDataSharing: {children: ['completed', 'failed']},\n  updateColumnFilters: {children: ['completed', 'failed']},\n});\n\ndataShareActions.attachToSource.listen((assetUid, data) => {\n  dataInterface.attachToSource(assetUid, data)\n    .done(dataShareActions.attachToSource.completed)\n    .fail(dataShareActions.attachToSource.failed);\n  dataShareActions.attachToSource.started();\n});\ndataShareActions.attachToSource.failed.listen((response) => {\n  alertify.error(\n    response?.responseJSON?.filename[0] ||\n      response?.responseJSON ||\n      t('Failed to attach to source')\n  );\n});\n\ndataShareActions.detachSource.listen((attachmentUrl) => {\n  dataInterface.detachSource(attachmentUrl)\n    .done(dataShareActions.detachSource.completed)\n    .fail(dataShareActions.detachSource.failed);\n});\ndataShareActions.detachSource.failed.listen((response) => {\n  alertify.error(response?.responseJSON || t('Failed to detach from source'));\n});\n\ndataShareActions.patchSource.listen((attachmentUrl, data) => {\n  dataInterface.patchSource(attachmentUrl, data)\n    .done(dataShareActions.patchSource.completed)\n    .fail(dataShareActions.patchSource.failed);\n  dataShareActions.patchSource.started();\n});\ndataShareActions.patchSource.failed.listen((response) => {\n  alertify(response?.responseJSON || t('Failed to patch source'));\n});\n\ndataShareActions.getAttachedSources.listen((assetUid) => {\n  dataInterface.getAttachedSources(assetUid)\n    .done((response) => {\n      // We create our own object from backend response because:\n      // 1. We need to truncate the filename and display this instead\n      // 2. We need both the current asset URL as well as it's source data URL\n      let allSources = [];\n\n      // TODO: Check is pagination is an issue, if so we should try to use the\n      //       backend response directly\n      response.results.forEach((source) => {\n        let sourceUid = getAssetUIDFromUrl(source.source);\n        allSources.push({\n          sourceName: truncateString(\n            source.source__name,\n            MAX_DISPLAYED_STRING_LENGTH.connect_projects,\n          ),\n          // Source's asset url\n          sourceUrl: source.source,\n          sourceUid: sourceUid,\n          // Fields that the connecting project has selected to import\n          linkedFields: source.fields,\n          filename: truncateFile(\n            source.filename,\n            MAX_DISPLAYED_STRING_LENGTH.connect_projects,\n          ),\n          // Source project attachment endpoint\n          attachmentUrl: source.url,\n        });\n      });\n\n      dataShareActions.getAttachedSources.completed(allSources);\n    })\n    .fail(dataShareActions.getAttachedSources.failed);\n});\n\ndataShareActions.getSharingEnabledAssets.listen(() => {\n  dataInterface.getSharingEnabledAssets()\n    .done(dataShareActions.getSharingEnabledAssets.completed)\n    .fail(dataShareActions.getSharingEnabledAssets.failed);\n});\ndataShareActions.getSharingEnabledAssets.failed.listen(() => {\n  alertify.error(t('Failed to retrieve sharing enabled assets'));\n});\n\n// The next two actions have the same endpoint but must be handled very\n// differently so we leave them as seperate actions\n\n// TODO: Improve the parameters so these functions are clearly different from\n//       each other\ndataShareActions.toggleDataSharing.listen((uid, data) => {\n  dataInterface.patchDataSharing(uid, data)\n    .done(dataShareActions.toggleDataSharing.completed)\n    .fail(dataShareActions.toggleDataSharing.failed);\n});\ndataShareActions.toggleDataSharing.failed.listen((response) => {\n  alertify.error(response?.responseJSON?.detail || t('Failed to toggle sharing'))\n});\n\ndataShareActions.updateColumnFilters.listen((uid, data) => {\n  dataInterface.patchDataSharing(uid, data)\n    .done(dataShareActions.updateColumnFilters.completed)\n    .fail(dataShareActions.updateColumnFilters.failed);\n});\ndataShareActions.updateColumnFilters.failed.listen((response) => {\n  alertify.error(response?.responseJSON || t('Failed to update column filters'));\n});\n\nexport default dataShareActions;\n","/**\n * A bundle file for all Reflux actions. This is the only place that React\n * components should be talking to Backend.\n *\n * You can observe action result through Reflux callbacks in your component, or\n * more preferably (where applicable) use the update eveont of one of the stores\n * from `jsapp/js/stores.es6`\n *\n * TODO: Group and split actions to separate files. For a working example see `./actions/help`.\n */\n\nimport alertify from 'alertifyjs';\nimport Reflux from 'reflux';\nimport RefluxPromise from './libs/reflux-promise';\nimport {dataInterface} from './dataInterface';\nimport {permissionsActions} from './actions/permissions';\nimport {helpActions} from './actions/help';\nimport libraryActions from './actions/library';\nimport submissionsActions from './actions/submissions';\nimport formMediaActions from './actions/mediaActions';\nimport exportsActions from './actions/exportsActions';\nimport dataShareActions from './actions/dataShareActions';\nimport {\n  notify,\n  replaceSupportEmail,\n} from 'utils';\n\n// Configure Reflux\nReflux.use(RefluxPromise(window.Promise));\n\nexport const actions = {\n  permissions: permissionsActions,\n  help: helpActions,\n  library: libraryActions,\n  submissions: submissionsActions,\n  media: formMediaActions,\n  exports: exportsActions,\n  dataShare: dataShareActions,\n};\n\nactions.navigation = Reflux.createActions([\n  'transitionStart',\n  'transitionEnd',\n  'routeUpdate',\n  'documentTitleUpdate'\n]);\n\nactions.auth = Reflux.createActions({\n  verifyLogin: {children: ['loggedin', 'anonymous', 'failed']},\n  logout: {children: ['completed', 'failed']},\n  changePassword: {children: ['completed', 'failed']},\n  getEnvironment: {children: ['completed', 'failed']},\n  getApiToken: {children: ['completed', 'failed']},\n});\n\nactions.survey = Reflux.createActions({\n  addExternalItemAtPosition: {children: ['completed', 'failed']}\n});\n\nactions.search = Reflux.createActions({\n  assets: {children: ['completed', 'failed']}\n});\n\nactions.resources = Reflux.createActions({\n  createImport: {children: ['completed', 'failed']},\n  loadAsset: {children: ['completed', 'failed']},\n  deployAsset: {children: ['completed', 'failed']},\n  setDeploymentActive: {children: ['completed', 'failed']},\n  createSnapshot: {children: ['completed', 'failed']},\n  cloneAsset: {children: ['completed', 'failed']},\n  deleteAsset: {children: ['completed', 'failed']},\n  listTags: {children: ['completed', 'failed']},\n  createResource: {asyncResult: true},\n  updateAsset: {asyncResult: true},\n  updateSubmissionValidationStatus: {children: ['completed', 'failed']},\n  removeSubmissionValidationStatus: {children: ['completed', 'failed']},\n  deleteSubmission: {children: ['completed', 'failed']},\n  duplicateSubmission: {children: ['completed', 'failed',]},\n  refreshTableSubmissions: {children: ['completed', 'failed',]},\n  getAssetFiles: {children: ['completed', 'failed']},\n});\n\nactions.hooks = Reflux.createActions({\n  getAll: {children: ['completed', 'failed']},\n  add: {children: ['completed', 'failed']},\n  update: {children: ['completed', 'failed']},\n  delete: {children: ['completed', 'failed']},\n  getLogs: {children: ['completed', 'failed']},\n  retryLog: {children: ['completed', 'failed']},\n  retryLogs: {children: ['completed', 'failed']},\n});\n\nactions.misc = Reflux.createActions({\n  getUser: {children: ['completed', 'failed']},\n  checkUsername: {asyncResult: true, children: ['completed', 'failed']},\n  updateProfile: {children: ['completed', 'failed']},\n});\n\n// TODO move these callbacks to `actions/permissions.es6` after moving\n// `actions.resources` to separate file (circular dependency issue)\npermissionsActions.assignAssetPermission.failed.listen(() => {\n  notify(t('Failed to update permissions'), 'error');\n});\npermissionsActions.removeAssetPermission.failed.listen(() => {\n  notify(t('Failed to remove permissions'), 'error');\n});\npermissionsActions.bulkSetAssetPermissions.failed.listen(() => {\n  notify(t('Failed to update permissions'), 'error');\n});\npermissionsActions.assignAssetPermission.completed.listen((uid) => {\n  // needed to update publicShareSettings after enabling link sharing\n  actions.resources.loadAsset({id: uid});\n});\npermissionsActions.copyPermissionsFrom.completed.listen((sourceUid, targetUid) => {\n  actions.resources.loadAsset({id: targetUid});\n});\npermissionsActions.setAssetPublic.completed.listen((uid) => {\n  actions.resources.loadAsset({id: uid});\n});\npermissionsActions.removeAssetPermission.completed.listen((uid, isNonOwner) => {\n  // Avoid this call if a non-owner removed their own permissions as it will fail\n  if (!isNonOwner) {\n    // needed to update publicShareSettings after disabling link sharing\n    actions.resources.loadAsset({id: uid});\n  }\n});\n\nactions.misc.getUser.listen((userUrl) => {\n  dataInterface.getUser(userUrl)\n    .done(actions.misc.getUser.completed)\n    .fail(actions.misc.getUser.failed);\n});\n\nactions.misc.checkUsername.listen(function(username){\n  dataInterface.queryUserExistence(username)\n    .done(actions.misc.checkUsername.completed)\n    .fail(actions.misc.checkUsername.failed);\n});\n\nactions.misc.updateProfile.listen(function(data, callbacks={}){\n  dataInterface.patchProfile(data)\n    .done((...args) => {\n      actions.misc.updateProfile.completed(...args)\n      if (callbacks.onComplete) {\n        callbacks.onComplete(...args);\n      }\n    })\n    .fail((...args) => {\n      actions.misc.updateProfile.failed(...args)\n      if (callbacks.onFail) {\n        callbacks.onFail(...args);\n      }\n    });\n});\nactions.misc.updateProfile.completed.listen(function(){\n  notify(t('updated profile successfully'));\n});\nactions.misc.updateProfile.failed.listen(function(data) {\n  let hadFieldsErrors = false;\n  for (const [errorProp, errorValue] of Object.entries(data.responseJSON)){\n    if (errorProp !== 'non_fields_error') {\n      hadFieldsErrors = true;\n    }\n  }\n\n  if (hadFieldsErrors) {\n    notify(t('Some fields contain errors'), 'error');\n  } else {\n    notify(t('failed to update profile'), 'error');\n  }\n});\n\nactions.resources.createImport.listen((params, onCompleted, onFailed) => {\n  dataInterface.createImport(params)\n    .done((response) => {\n      actions.resources.createImport.completed(response);\n      if (typeof onCompleted === 'function') {onCompleted(response);}\n    })\n    .fail((response) => {\n      actions.resources.createImport.failed(response);\n      if (typeof onFailed === 'function') {onFailed(response);}\n    });\n});\n\nactions.resources.createSnapshot.listen(function(details){\n  dataInterface.createAssetSnapshot(details)\n    .done(actions.resources.createSnapshot.completed)\n    .fail(actions.resources.createSnapshot.failed);\n});\n\nactions.resources.listTags.listen(function(data){\n  dataInterface.listTags(data)\n    .done(actions.resources.listTags.completed)\n    .fail(actions.resources.listTags.failed);\n});\n\nactions.resources.listTags.completed.listen(function(results){\n  if (results.next && window.Raven) {\n    Raven.captureMessage('MAX_TAGS_EXCEEDED: Too many tags');\n  }\n});\n\nactions.resources.updateAsset.listen(function(uid, values, params={}) {\n  dataInterface.patchAsset(uid, values)\n    .done((asset) => {\n      actions.resources.updateAsset.completed(asset);\n      if (typeof params.onComplete === 'function') {\n        params.onComplete(asset, uid, values);\n      }\n      notify(t('successfully updated'));\n    })\n    .fail(function(resp){\n      actions.resources.updateAsset.failed(resp);\n      if (params.onFailed) {\n        params.onFailed(resp);\n      }\n    });\n});\n\nactions.resources.deployAsset.listen(function(asset, redeployment, params={}){\n  dataInterface.deployAsset(asset, redeployment)\n    .done((data) => {\n      actions.resources.deployAsset.completed(data.asset);\n      if (typeof params.onDone === 'function') {\n        params.onDone(data, redeployment);\n      }\n    })\n    .fail((data) => {\n      actions.resources.deployAsset.failed(data, redeployment);\n      if (typeof params.onFail === 'function') {\n        params.onFail(data,  redeployment);\n      }\n    });\n});\n\nactions.resources.deployAsset.failed.listen(function(data, redeployment){\n  // report the problem to the user\n  let failure_message = null;\n\n  if(!data.responseJSON || (!data.responseJSON.xform_id_string &&\n                            !data.responseJSON.detail)) {\n    // failed to retrieve a valid response from the server\n    // setContent() removes the input box, but the value is retained\n    var msg;\n    if (data.status == 500 && data.responseJSON && data.responseJSON.error) {\n      msg = `<pre>${data.responseJSON.error}</pre>`;\n    } else if (data.status == 500 && data.responseText) {\n      msg = `<pre>${data.responseText}</pre>`;\n    } else {\n      msg = t('please check your connection and try again.');\n    }\n    failure_message = `\n      <p>${replaceSupportEmail(t('if this problem persists, contact help@kobotoolbox.org'))}</p>\n      <p>${msg}</p>\n    `;\n  } else if(!!data.responseJSON.xform_id_string){\n    // TODO: now that the id_string is automatically generated, this failure\n    // mode probably doesn't need special handling\n    failure_message = `\n      <p>${t('your form id was not valid:')}</p>\n      <p><pre>${data.responseJSON.xform_id_string}</pre></p>\n      <p>${replaceSupportEmail(t('if this problem persists, contact help@kobotoolbox.org'))}</p>\n    `;\n  } else if(!!data.responseJSON.detail) {\n    failure_message = `\n      <p>${t('your form cannot be deployed because it contains errors:')}</p>\n      <p><pre>${data.responseJSON.detail}</pre></p>\n    `;\n  }\n  alertify.alert(t('unable to deploy'), failure_message);\n});\n\nactions.resources.setDeploymentActive.listen(function(details) {\n  dataInterface.setDeploymentActive(details)\n    .done((data) => {\n      actions.resources.setDeploymentActive.completed(data.asset);\n    })\n    .fail(actions.resources.setDeploymentActive.failed);\n});\nactions.resources.setDeploymentActive.completed.listen((result) => {\n  if (result.deployment__active) {\n    notify(t('Project unarchived successfully'));\n  } else {\n    notify(t('Project archived successfully'));\n  }\n});\n\nactions.resources.getAssetFiles.listen(function(assetId, fileType) {\n  dataInterface\n    .getAssetFiles(assetId, fileType)\n    .done(actions.resources.getAssetFiles.completed)\n    .fail(actions.resources.getAssetFiles.failed);\n});\n\n\nactions.reports = Reflux.createActions({\n  setStyle: {\n    children: [\n      'completed',\n      'failed',\n    ]\n  },\n  setCustom: {\n    children: [\n      'completed',\n      'failed',\n    ]\n  }\n});\n\nactions.reports.setStyle.listen(function(assetId, details){\n  dataInterface.patchAsset(assetId, {report_styles: details})\n    .done((asset) => {\n      actions.reports.setStyle.completed(asset);\n      actions.resources.updateAsset.completed(asset);\n    })\n    .fail(actions.reports.setStyle.failed);\n});\n\nactions.reports.setCustom.listen(function(assetId, details){\n  dataInterface.patchAsset(assetId, {report_custom: details})\n    .done((asset) => {\n      actions.reports.setCustom.completed(asset);\n      actions.resources.updateAsset.completed(asset);\n    })\n    .fail(actions.reports.setCustom.failed);\n});\n\nactions.table = Reflux.createActions({\n  updateSettings: {children: ['completed', 'failed']},\n});\n\n/**\n * @param {string} assetUid\n * @param {object} settings\n * @param {string[]} [settings.selected-columns]\n * @param {string} [settings.frozen-column]\n * @param {boolean} [settings.show-group-name]\n * @param {number} [settings.translation-index]\n * @param {boolean} [settings.show-hxl-tags]\n * @param {object} [settings.sort-by]\n * @param {string} [settings.sort-by.fieldId]\n * @param {string} [settings.sort-by.sortValue]\n */\nactions.table.updateSettings.listen((assetUid, settings) => {\n  dataInterface.patchAsset(assetUid, {settings: settings})\n    .done((asset) => {\n      actions.table.updateSettings.completed(asset);\n      actions.resources.updateAsset.completed(asset);\n    })\n    .fail(actions.table.updateSettings.failed);\n});\n\n\nactions.map = Reflux.createActions({\n  setMapStyles: {\n    children: ['started', 'completed', 'failed']\n  }\n});\n\n/**\n * Note: `started` callback returns parameters with wich the action was called\n * @param {string} assetUid\n * @param {object} mapStyles\n */\nactions.map.setMapStyles.listen(function(assetUid, mapStyles) {\n  dataInterface.patchAsset(assetUid, {map_styles: mapStyles})\n    .done((asset) => {\n      actions.map.setMapStyles.completed(asset);\n      actions.resources.updateAsset.completed(asset);\n    })\n    .fail(actions.map.setMapStyles.failed);\n  actions.map.setMapStyles.started(assetUid, mapStyles);\n});\n\n\nactions.resources.createResource.listen(function(details){\n  dataInterface.createResource(details)\n    .done(function(asset){\n      actions.resources.createResource.completed(asset);\n    })\n    .fail(function(...args){\n      actions.resources.createResource.failed(...args);\n    });\n});\n\nactions.resources.deleteAsset.listen(function(details, params={}){\n  dataInterface.deleteAsset(details)\n    .done(() => {\n      actions.resources.deleteAsset.completed(details);\n      if (typeof params.onComplete === 'function') {\n        params.onComplete(details);\n      }\n    })\n    .fail((err) => {\n      actions.resources.deleteAsset.failed(details);\n      alertify.alert(\n        t('Unable to delete asset!'),\n        `<p>${t('Error details:')}</p><pre style='max-height: 200px;'>${err.responseText}</pre>`\n      );\n    });\n});\n\nactions.resources.cloneAsset.listen(function(details, params={}){\n  dataInterface.cloneAsset(details)\n    .done((asset) => {\n      actions.resources.cloneAsset.completed(asset);\n      if (typeof params.onComplete === 'function') {\n        params.onComplete(asset);\n      }\n    })\n    .fail(actions.resources.cloneAsset.failed);\n});\nactions.resources.cloneAsset.failed.listen(() => {\n  notify(t('Could not create project!'), 'error');\n});\n\nactions.search.assets.listen(function(searchData, params = {}){\n  dataInterface.searchAssets(searchData)\n    .done(function(response){\n      actions.search.assets.completed(searchData, response);\n      if (typeof params.onComplete === 'function') {\n        params.onComplete(searchData, response);\n      }\n    })\n    .fail(function(response){\n      actions.search.assets.failed(searchData, response);\n      if (typeof params.onFailed === 'function') {\n        params.onFailed(searchData, response);\n      }\n    });\n});\n\n// reload so a new csrf token is issued\nactions.auth.logout.completed.listen(function(){\n  window.setTimeout(function(){\n    window.location.replace('', '');\n  }, 1);\n});\n\nactions.auth.logout.listen(function(){\n  dataInterface.logout().done(actions.auth.logout.completed).fail(function(){\n    console.error('logout failed for some reason. what should happen now?');\n  });\n});\nactions.auth.verifyLogin.listen(function(){\n    dataInterface.selfProfile()\n        .done((data/*, msg, req*/)=>{\n          if (data.username) {\n            actions.auth.verifyLogin.loggedin(data);\n          } else {\n            actions.auth.verifyLogin.anonymous(data);\n          }\n        })\n        .fail(actions.auth.verifyLogin.failed);\n});\n\nactions.auth.changePassword.listen((currentPassword, newPassword) => {\n  dataInterface.patchProfile({\n    current_password: currentPassword,\n    new_password: newPassword\n  })\n  .done(actions.auth.changePassword.completed)\n  .fail(actions.auth.changePassword.failed);\n});\nactions.auth.changePassword.completed.listen(() => {\n  notify(t('changed password successfully'));\n});\nactions.auth.changePassword.failed.listen(() => {\n  notify(t('failed to change password'), 'error');\n});\n\nactions.auth.getEnvironment.listen(function(){\n  dataInterface.environment()\n    .done((data)=>{\n      actions.auth.getEnvironment.completed(data);\n    })\n    .fail(actions.auth.getEnvironment.failed);\n});\nactions.auth.getEnvironment.failed.listen(() => {\n  notify(t('failed to load environment data'), 'error');\n});\n\nactions.auth.getApiToken.listen(() => {\n  dataInterface.apiToken()\n    .done((response) => {\n      actions.auth.getApiToken.completed(response.token);\n    })\n    .fail(actions.auth.getApiToken.failed);\n});\nactions.auth.getApiToken.failed.listen(() => {\n  notify(t('failed to load API token'), 'error');\n});\n\nactions.resources.loadAsset.listen(function(params){\n  dataInterface.getAsset(params)\n    .done(actions.resources.loadAsset.completed)\n    .fail(actions.resources.loadAsset.failed);\n});\n\nactions.resources.updateSubmissionValidationStatus.listen(function(uid, sid, data){\n  dataInterface.updateSubmissionValidationStatus(uid, sid, data).done((result) => {\n    actions.resources.updateSubmissionValidationStatus.completed(result, sid);\n  }).fail((error)=>{\n    console.error(error);\n    actions.resources.updateSubmissionValidationStatus.failed(error);\n  });\n});\n\nactions.resources.removeSubmissionValidationStatus.listen((uid, sid) => {\n  dataInterface.removeSubmissionValidationStatus(uid, sid).done((result) => {\n    actions.resources.removeSubmissionValidationStatus.completed(result, sid);\n  }).fail((error)=>{\n    console.error(error);\n    actions.resources.removeSubmissionValidationStatus.failed(error);\n  });\n});\n\nactions.resources.deleteSubmission.listen((uid, sid) => {\n  dataInterface.deleteSubmission(uid, sid)\n    .done(() => {\n      notify(t('submission deleted'));\n      actions.resources.deleteSubmission.completed();\n      actions.resources.loadAsset({id: uid});\n    })\n    .fail(() => {\n      alertify.error(t('failed to delete submission'));\n      actions.resources.deleteSubmission.failed();\n    });\n});\n\nactions.resources.duplicateSubmission.listen((uid, sid, duplicatedSubmission) => {\n  dataInterface.duplicateSubmission(uid, sid)\n    .done((response) => {\n      notify(t('Successfully duplicated submission'));\n      actions.resources.duplicateSubmission.completed(uid, response._id, duplicatedSubmission);\n      actions.resources.loadAsset({id: uid});\n    })\n    .fail((response) => {\n      alertify.error(t('Failed to duplicate submission'));\n      actions.resources.duplicateSubmission.failed(response);\n    });\n});\n\nactions.hooks.getAll.listen((assetUid, callbacks = {}) => {\n  dataInterface.getHooks(assetUid)\n    .done((...args) => {\n      actions.hooks.getAll.completed(...args);\n      if (typeof callbacks.onComplete === 'function') {\n        callbacks.onComplete(...args);\n      }\n    })\n    .fail((...args) => {\n      actions.hooks.getAll.failed(...args);\n      if (typeof callbacks.onFail === 'function') {\n        callbacks.onFail(...args);\n      }\n    });\n});\n\nactions.hooks.add.listen((assetUid, data, callbacks = {}) => {\n  dataInterface.addExternalService(assetUid, data)\n    .done((...args) => {\n      actions.hooks.getAll(assetUid);\n      actions.hooks.add.completed(...args);\n      if (typeof callbacks.onComplete === 'function') {\n        callbacks.onComplete(...args);\n      }\n    })\n    .fail((...args) => {\n      actions.hooks.add.failed(...args);\n      if (typeof callbacks.onFail === 'function') {\n        callbacks.onFail(...args);\n      }\n    });\n});\nactions.hooks.add.completed.listen((response) => {\n  notify(t('REST Service added successfully'));\n});\nactions.hooks.add.failed.listen((response) => {\n  notify(t('Failed adding REST Service'), 'error');\n});\n\nactions.hooks.update.listen((assetUid, hookUid, data, callbacks = {}) => {\n  dataInterface.updateExternalService(assetUid, hookUid, data)\n    .done((...args) => {\n      actions.hooks.getAll(assetUid);\n      actions.hooks.update.completed(...args);\n      if (typeof callbacks.onComplete === 'function') {\n        callbacks.onComplete(...args);\n      }\n    })\n    .fail((...args) => {\n      actions.hooks.update.failed(...args);\n      if (typeof callbacks.onFail === 'function') {\n        callbacks.onFail(...args);\n      }\n    });\n});\nactions.hooks.update.completed.listen(() => {\n  notify(t('REST Service updated successfully'));\n});\nactions.hooks.update.failed.listen(() => {\n  alertify.error(t('Failed saving REST Service'));\n});\n\nactions.hooks.delete.listen((assetUid, hookUid, callbacks = {}) => {\n  dataInterface.deleteExternalService(assetUid, hookUid)\n    .done((...args) => {\n      actions.hooks.getAll(assetUid);\n      actions.hooks.delete.completed(...args);\n      if (typeof callbacks.onComplete === 'function') {\n        callbacks.onComplete(...args);\n      }\n    })\n    .fail((...args) => {\n      actions.hooks.delete.failed(...args);\n      if (typeof callbacks.onFail === 'function') {\n        callbacks.onFail(...args);\n      }\n    });\n});\nactions.hooks.delete.completed.listen((response) => {\n  notify(t('REST Service deleted permanently'));\n});\nactions.hooks.delete.failed.listen((response) => {\n  notify(t('Could not delete REST Service'), 'error');\n});\n\nactions.hooks.getLogs.listen((assetUid, hookUid, callbacks = {}) => {\n  dataInterface.getHookLogs(assetUid, hookUid)\n    .done((...args) => {\n      actions.hooks.getLogs.completed(...args);\n      if (typeof callbacks.onComplete === 'function') {\n        callbacks.onComplete(...args);\n      }\n    })\n    .fail((...args) => {\n      actions.hooks.getLogs.failed(...args);\n      if (typeof callbacks.onFail === 'function') {\n        callbacks.onFail(...args);\n      }\n    });\n});\n\nactions.hooks.retryLog.listen((assetUid, hookUid, lid, callbacks = {}) => {\n  dataInterface.retryExternalServiceLog(assetUid, hookUid, lid)\n    .done((...args) => {\n      actions.hooks.getLogs(assetUid, hookUid);\n      actions.hooks.retryLog.completed(...args);\n      if (typeof callbacks.onComplete === 'function') {\n        callbacks.onComplete(...args);\n      }\n    })\n    .fail((...args) => {\n      actions.hooks.retryLog.failed(...args);\n      if (typeof callbacks.onFail === 'function') {\n        callbacks.onFail(...args);\n      }\n    });\n});\nactions.hooks.retryLog.completed.listen((response) => {\n  notify(t('Submission retry requested successfully'));\n});\nactions.hooks.retryLog.failed.listen((response) => {\n  notify(t('Submission retry request failed'), 'error');\n});\n\nactions.hooks.retryLogs.listen((assetUid, hookUid, callbacks = {}) => {\n  dataInterface.retryExternalServiceLogs(assetUid, hookUid)\n    .done((...args) => {\n      actions.hooks.retryLogs.completed(...args);\n      if (typeof callbacks.onComplete === 'function') {\n        callbacks.onComplete(...args);\n      }\n    })\n    .fail((...args) => {\n      actions.hooks.getLogs(assetUid, hookUid);\n      actions.hooks.retryLogs.failed(...args);\n      if (typeof callbacks.onFail === 'function') {\n        callbacks.onFail(...args);\n      }\n    });\n});\nactions.hooks.retryLogs.completed.listen((response) => {\n  notify(response.detail, 'warning');\n});\nactions.hooks.retryLogs.failed.listen((response) => {\n  notify(t('Retrying all submissions failed'), 'error');\n});\n","###\ndkobo_xlform.model[...]\n###\n\n_ = require 'underscore'\n$survey = require './model.survey'\n$utils = require './model.utils'\n$row = require './model.row'\n$rowDetailsSkipLogic = require './model.rowDetails.skipLogic'\n$configs = require './model.configs'\n\nmodule.exports = do ->\n\n  model = {}\n\n  _.extend(model, $survey, $row)\n\n  model._keys = _.keys(model)\n  model.rowDetailsSkipLogic = $rowDetailsSkipLogic\n  model.utils = $utils\n  model.configs = $configs\n\n  model\n","###\nfixtures of surveys, wrapped in javascript objects.\n(Probably overcomplicated, but at the core they're\nsample surveys for tests.)\n###\n\n_ = require(\"underscore\")\n\nclass SurveyFixture\n  constructor: (@name)->\n    @equivs = []\n    @invals = []\n  _append: (o, att)->\n    if o instanceof Array\n      @_append(_o, att)  for _o in o\n    else\n      @[att].push(o)\n    @\n  equiv: (o...)-> @_append(o, 'equivs')\n  inval: (o...)-> @_append(o, 'invals')\n  main: (m)->\n    if m\n      @_main = m\n      @\n    else\n      @_main\n\nsurveys = {}\n\nsurveys.cascading =\n  choices: (_.object([\"list_name\", \"name\", \"label\", \"state\", \"county\"], x) \\\n                  for x in [\n                    [\"state\", \"texas\", \"Texas\", null, null],\n                    [\"state\", \"washington\", \"Washington\", null, null],\n                    [\"county\", \"king\", \"King\", \"washington\", null],\n                    [\"county\", \"pierce\", \"Pierce\", \"washington\", null],\n                    [\"county\", \"king\", \"King\", \"texas\", null],\n                    [\"county\", \"cameron\", \"Cameron\", \"texas\", null],\n                    [\"city\", \"dumont\", \"Dumont\", null, \"king\"],\n                    [\"city\", \"finney\", \"Finney\", null, \"king\"],\n                    [\"city\", \"brownsville\", \"brownsville\", null, \"cameron\"],\n                    [\"city\", \"harlingen\", \"harlingen\", null, \"cameron\"],\n                    [\"city\", \"seattle\", \"Seattle\", null, \"king\"],\n                    [\"city\", \"redmond\", \"Redmond\", null, \"king\"],\n                    [\"city\", \"tacoma\", \"Tacoma\", null, \"pierce\"],\n                    [\"city\", \"puyallup\", \"Puyallup\", null, \"pierce\"]])\n\nsurveys.pizza_survey = do->\n  csv = \"\"\"\n  survey,,,\n  ,type,name,label\n  ,select_one yes_no,likes_pizza,Do you like pizza?\n  choices,,,\n  ,list name,name,label\n  ,yes_no,yes,Yes\n  ,yes_no,no,No\n  \"\"\"\n\n  xlf1 =\n    survey: [\n      type:\n        select_one: \"yes_no\"\n\n      name: \"likes_pizza\"\n      label: \"Do you like pizza?\"\n    ]\n    choices:\n      yes_no: [\n        {\n          name: \"yes\"\n          label: \"Yes\"\n        }\n        {\n          name: \"no\"\n          label: \"No\"\n        }\n      ]\n\n  xlf2 =\n    survey: [\n      type: \"select_one yes_no\"\n      name: \"likes_pizza\"\n      label: \"Do you like pizza?\"\n    ]\n    choices:\n      yes_no: [\n        {\n          name: \"yes\"\n          label: \"Yes\"\n        }\n        {\n          name: \"no\"\n          label: \"No\"\n        }\n      ]\n\n  new SurveyFixture(\"pizza_survey\").equiv(xlf1, xlf2, csv).main(xlf1)\n\nsurveys.groups = do ->\n  csv = \"\"\"\n  survey,,,\n  ,type,name,label\n  ,text,q1,Question1\n  ,begin group,grp,\n  ,text,g1q1,Group1Question1\n  ,text,g1q2,Group1Question2\n  ,end group,,\n  \"\"\"\n\n  xlf1 = survey: [\n    {\n      type: \"text\"\n      name: \"q1\"\n      label: \"Question1\"\n    }\n    {\n      type: \"begin group\"\n      name: \"grp\"\n    }\n    {\n      type: \"text\"\n      name: \"g1q1\"\n      label: \"Group1Question1\"\n    }\n    {\n      type: \"text\"\n      name: \"g1q2\"\n      label: \"Group1Question2\"\n    }\n    {\n      type: \"end group\"\n    }\n  ]\n\n  xlf2 = survey: [\n    {\n      type: \"text\"\n      name: \"q1\"\n      label: \"Question1\"\n    }\n    {\n      type: \"group\"\n      name: \"grp\"\n      rows: [\n        {\n          type: \"text\"\n          name: \"g1q1\"\n          label: \"Group1Question1\"\n        }\n        {\n          type: \"text\"\n          name: \"g1q2\"\n          label: \"Group1Question2\"\n        }\n      ]\n    }\n    {\n      type: \"end group\"\n    }\n  ]\n\n  new SurveyFixture('groups').equiv(csv, xlf1, xlf2).main(xlf1)\n\nmodule.exports = surveys\n","/* global viewUtils */\n'use strict';\n\n/*\n    Options:\n        Validations: array containing validation descriptors:\n            name:string - the name of the validator function to invoke\n            failureMessage:string - the message passed to the callback when validation fails\n            args:array - additional arguments to pass into the validation function\n*/\nmodule.exports = (function(){\n\nreturn (function () {\n    var singleton = {\n            create: function (options) {\n                return new Validator(options);\n            },\n            __validators: {\n                invalidChars: function (value, chars) {\n                    var matcher = new RegExp('[' + chars + ']');\n                    return !matcher.test(value);\n                },\n                unique: function (value, list) {\n                    return _.filter(list, function (item) { return item === value; }).length === 0;\n                }\n            }\n        };\n\n\n    var Validator = function (options) {\n        this.options = options;\n    };\n\n    Validator.prototype.validate = function (value) {\n        var validationsLength = this.options.validations.length,\n            validations = this.options.validations;\n\n        for (var i = 0; i < validationsLength; i++) {\n            var currentValidation = validations[i];\n            if (!currentValidation.args) {\n                currentValidation.args = [];\n            }\n            currentValidation.args.unshift(value);\n\n            if (!singleton.__validators[currentValidation.name].apply(this, currentValidation.args)) {\n                return currentValidation.failureMessage;\n            }\n        }\n        return true;\n    };\n\n    return singleton;\n\n} ());\n\n})();\n","$skipLogicHelpers = require './mv.skipLogicHelpers'\n$modelRowDetailsSkipLogic = require './model.rowDetails.skipLogic'\n$viewRowDetailSkipLogic = require './view.rowDetail.SkipLogic'\n$modelUtils = require './model.utils'\n$validationLogicHelpers = require './mv.validationLogicHelpers'\n$modelRowDetailValidationLogic = require './model.rowDetail.validationLogic'\n$viewRowDetailValidationLogic = require './view.rowDetail.ValidationLogic'\n\nmodule.exports = do ->\n  # To be extended ontop of a RowDetail when the key matches\n  # the attribute in XLF.RowDetailMixin\n  SkipLogicDetailMixin =\n    getValue: ()->\n      v = @serialize()\n      if v is \"undefined\"\n        Raven?.captureException(\"Serialized value is returning a string, undefined\")\n        v = \"\"\n      v\n\n    postInitialize: ()->\n      # TODO: get skip logic factories connected\n      survey = @getSurvey()\n      model_factory = new $modelRowDetailsSkipLogic.SkipLogicFactory survey\n      view_factory = new $viewRowDetailSkipLogic.SkipLogicViewFactory survey\n      helper_factory = new $skipLogicHelpers.SkipLogicHelperFactory model_factory, view_factory, survey, @_parent, @.get('value')\n\n      @facade = new $skipLogicHelpers.SkipLogicPresentationFacade model_factory, helper_factory, view_factory\n\n    serialize: ()->\n      # @hidden = false\n      # note: reimplement \"hidden\" if response is invalid\n      @facade.serialize()\n\n    parse: ()->\n\n    linkUp: (ctx)->\n      @facade.initialize()\n\n  ValidationLogicMixin =\n    getValue: () ->\n      v = @serialize()\n      if v is \"undefined\"\n        Raven?.captureException(\"Serialized value is returning a string, undefined\")\n        v = \"\"\n      v\n\n    postInitialize: () ->\n      survey = @getSurvey()\n      model_factory = new $modelRowDetailValidationLogic.ValidationLogicModelFactory survey\n      view_factory = new $viewRowDetailValidationLogic.ValidationLogicViewFactory survey\n      helper_factory = new $validationLogicHelpers.ValidationLogicHelperFactory model_factory, view_factory, survey, @_parent, @.get('value')\n\n      @facade = new $skipLogicHelpers.SkipLogicPresentationFacade model_factory, helper_factory, view_factory\n\n    serialize: ()->\n      # @hidden = false\n      # note: reimplement \"hidden\" if response is invalid\n      @facade.serialize()\n\n    parse: ()->\n\n    linkUp: (ctx)->\n      @facade.initialize()\n\n  rowDetailMixins =\n    relevant: SkipLogicDetailMixin\n    constraint: ValidationLogicMixin\n    label:\n      postInitialize: ()->\n        # When the row's name changes, trigger the row's [finalize] function.\n        return\n    name:\n      deduplicate: (survey) ->\n        names = []\n        survey.forEachRow (r)=>\n          if r.get('name') != @\n            name = r.getValue(\"name\")\n            names.push(name)\n        , includeGroups: true\n\n        $modelUtils.sluggifyLabel @get('value'), names\n  rowDetailMixins\n","$validationLogicParser = require './model.validationLogicParser'\n$skipLogicHelpers = require './mv.skipLogicHelpers'\n\nmodule.exports = do ->\n  validationLogicHelpers = {}\n\n  class validationLogicHelpers.ValidationLogicHelperFactory extends $skipLogicHelpers.SkipLogicHelperFactory\n    create_presenter: (criterion_model, criterion_view) ->\n      return new validationLogicHelpers.ValidationLogicPresenter criterion_model, criterion_view, @current_question, @survey, @view_factory\n    create_builder: () ->\n      return new validationLogicHelpers.ValidationLogicBuilder @model_factory, @view_factory, @survey, @current_question, @\n    create_context: () ->\n      return new validationLogicHelpers.ValidationLogicHelperContext @model_factory, @view_factory, @, @serialized_criteria\n\n  class validationLogicHelpers.ValidationLogicPresenter extends $skipLogicHelpers.SkipLogicPresenter\n    change_question: () -> return\n\n  class validationLogicHelpers.ValidationLogicBuilder extends $skipLogicHelpers.SkipLogicBuilder\n    _parse_skip_logic_criteria: (criteria) ->\n      return $validationLogicParser criteria\n\n    _get_question: () ->\n      @current_question\n\n    build_empty_criterion: () ->\n      operator_picker_view = @view_factory.create_operator_picker @current_question.get_type()\n\n      response_value_view = @view_factory.create_response_value_view @current_question, @current_question.get_type(), @_operator_type()\n\n      presenter = @build_criterion_logic @model_factory.create_operator('empty'), operator_picker_view, response_value_view\n\n      presenter.model.change_question @current_question.cid\n\n      return presenter\n\n    questions: () ->\n      return [@current_question]\n\n    _operator_type: () ->\n      operator_type = super()\n\n      if not operator_type?\n        operator_type_id = @current_question.get_type().operators[0]\n        operator_type = $skipLogicHelpers.operator_types[if operator_type_id == 1 then @current_question.get_type().operators[1] else operator_type_id]\n      return operator_type\n\n  class validationLogicHelpers.ValidationLogicHelperContext extends $skipLogicHelpers.SkipLogicHelperContext\n    use_mode_selector_helper: () ->\n      @state = new validationLogicHelpers.ValidationLogicModeSelectorHelper @view_factory, @\n      @render @destination\n    use_hand_code_helper: () ->\n      @state = new validationLogicHelpers.ValidationLogicHandCodeHelper(@state.serialize(), @builder, @view_factory, @)\n      if @questionTypeHasNoValidationOperators()\n        @state.button = @view_factory.create_empty()\n      @render @destination\n      return\n    constructor: (model_factory, view_factory, helper_factory, serialized_criteria) ->\n      @model_factory = model_factory\n      @view_factory = view_factory\n      @helper_factory = helper_factory\n\n      @state = serialize: () -> return serialized_criteria\n      if @questionTypeHasNoValidationOperators()\n        @use_hand_code_helper()\n      else\n        super(model_factory, view_factory, helper_factory, serialized_criteria)\n\n    questionTypeHasNoValidationOperators: () ->\n      typeId = @helper_factory.current_question.get('type').get('typeId')\n      if !typeId\n        return console.error('no type id found for question', @helper_factory.current_question)\n      operators = $skipLogicHelpers.question_types[typeId]?.operators\n      if !operators\n        operators = $skipLogicHelpers.question_types['default'].operators\n      operators.length == operators[0]\n\n  class validationLogicHelpers.ValidationLogicModeSelectorHelper extends $skipLogicHelpers.SkipLogicModeSelectorHelper\n    constructor: (view_factory, context) ->\n      @context = context\n      super(view_factory, context)\n      @handcode_button = view_factory.create_button '<i>${}</i> ' + t(\"Manually enter your validation logic in XLSForm code\"), 'kobo-button kobo-button--blue'\n\n  class validationLogicHelpers.ValidationLogicHandCodeHelper extends $skipLogicHelpers.SkipLogicHandCodeHelper\n    render: ($destination) ->\n      $destination.replaceWith(@$handCode)\n      @button.render().attach_to @$handCode\n      @button.bind_event 'click', () =>\n        @$handCode.replaceWith($destination)\n        @context.use_mode_selector_helper()\n      @$handCode.on('change', () =>\n        @context.view_factory.survey.trigger('change')\n      )\n    serialize: () ->\n      @textarea.val()\n    constructor: (criteria, builder, view_factory, context) ->\n      super(criteria, builder, view_factory, context)\n      @$handCode = $(\"\"\"\n        <div class=\"card__settings__fields__field\">\n          <label for=\"#{@context.helper_factory.current_question.cid}-handcode\">#{t(\"Validation Code:\")}</label>\n          <span class=\"settings__input\">\n            <input type=\"text\" name=\"constraint\" id=\"#{@context.helper_factory.current_question.cid}-handcode\" class=\"text\" value=\"\">\n          </span>\n        </div>\n      \"\"\")\n      @textarea = @$handCode.find('#' + @context.helper_factory.current_question.cid + '-handcode')\n      # Textarea starts with empty value - setting it in HTML caused error with\n      # mangled values (due to \" character). Set initial value here, so all the\n      # special characters are saved.\n      @textarea.val(@criteria)\n      return\n\n\n  validationLogicHelpers\n","Backbone = require 'backbone'\n$skipLogicModel = require './model.rowDetails.skipLogic'\n\nmodule.exports = do ->\n  rowDetailValidationLogic = {}\n  class rowDetailValidationLogic.ValidationLogicModelFactory extends $skipLogicModel.SkipLogicFactory\n    create_operator: (type, symbol, id) ->\n      operator = null\n      switch type\n        when 'text' then operator = new rowDetailValidationLogic.ValidationLogicTextOperator symbol\n        when 'date' then operator = new rowDetailValidationLogic.ValidationLogicDateOperator symbol\n        when 'basic' then operator = new rowDetailValidationLogic.ValidationLogicBasicOperator symbol\n        when 'existence' then operator = new rowDetailValidationLogic.ValidationLogicExistenceOperator symbol\n        when 'select_multiple' then operator = new rowDetailValidationLogic.ValidationLogicSelectMultipleOperator symbol\n        when 'empty' then return new $skipLogicModel.EmptyOperator()\n\n      operator.set 'id', id\n      return operator\n    create_criterion_model: () ->\n      new rowDetailValidationLogic.ValidationLogicCriterion(@, @survey)\n\n  class rowDetailValidationLogic.ValidationLogicBasicOperator extends $skipLogicModel.SkipLogicOperator\n    serialize: (question_name, response_value) ->\n      return '. ' + this.get('symbol') + ' ' + response_value\n  class rowDetailValidationLogic.ValidationLogicTextOperator extends rowDetailValidationLogic.ValidationLogicBasicOperator\n    serialize: (question_name, response_value) ->\n      return super '', ' ' + \"'\" + response_value.replace(/'/g, \"\\\\'\") + \"'\"\n  class rowDetailValidationLogic.ValidationLogicDateOperator extends rowDetailValidationLogic.ValidationLogicBasicOperator\n    serialize: (question_name, response_value) ->\n      if response_value.indexOf('date') == -1\n        response_value = \"date('\" + response_value + \"')\"\n      return super '', ' ' + response_value\n  class rowDetailValidationLogic.ValidationLogicExistenceOperator extends rowDetailValidationLogic.ValidationLogicBasicOperator\n    serialize: () ->\n      return super '', \"''\"\n  class rowDetailValidationLogic.ValidationLogicSelectMultipleOperator extends $skipLogicModel.SelectMultipleSkipLogicOperator\n    serialize: (question_name, response_value) ->\n      selected = \"selected(., '\" + response_value + \"')\"\n      if this.get 'is_negated'\n          return 'not(' + selected + ')'\n      return selected\n\n  class rowDetailValidationLogic.ValidationLogicCriterion extends $skipLogicModel.SkipLogicCriterion\n    change_question: (cid) ->\n      old_question_type = if @_get_question() then @_get_question().get_type() else name: null\n      @set \"question_cid\", cid\n      question_type = @_get_question().get_type()\n\n      if @get(\"operator\").get_id()? && !(@get(\"operator\").get_id() in question_type.operators)\n        @change_operator if question_type.operators[0] != 1 then question_type.operators[0] else question_type.operators[1]\n      else if old_question_type.name != question_type.name\n        @change_operator @get(\"operator\").get_value()\n      if (@get(\"operator\").get_type().response_type == null) && @_get_question().response_type != @get(\"response_value\")?.get_type()\n        @change_response @get(\"response_value\").get(\"value\")\n\n  rowDetailValidationLogic\n","_ = require 'underscore'\n$skipLogicView = require './view.rowDetail.SkipLogic'\n$viewWidgets = require './view.widgets'\n$skipLogicHelpers = require './mv.skipLogicHelpers'\n\nmodule.exports = do ->\n  viewRowDetailValidationLogic = {}\n  class viewRowDetailValidationLogic.ValidationLogicViewFactory extends $skipLogicView.SkipLogicViewFactory\n    create_criterion_builder_view: () ->\n      return new viewRowDetailValidationLogic.ValidationLogicCriterionBuilder()\n    create_question_picker: () ->\n      return new viewRowDetailValidationLogic.ValidationLogicQuestionPicker\n    create_operator_picker: (question_type) ->\n      operators = _.filter($skipLogicHelpers.operator_types, (op_type) -> op_type.id != 1 && op_type.id in question_type.operators)\n      return new $skipLogicView.OperatorPicker operators\n\n  class viewRowDetailValidationLogic.ValidationLogicCriterionBuilder extends $skipLogicView.SkipLogicCriterionBuilderView\n    render: () ->\n      super()\n      @$el.html(@$el.html().replace 'only be displayed', 'be valid only')\n\n      @\n\n  class viewRowDetailValidationLogic.ValidationLogicQuestionPicker extends $viewWidgets.Label\n    constructor: () ->\n      super(\"This question's response has to be\")\n    attach_to: (target) ->\n      target.find('.skiplogic__rowselect').remove()\n      super(target)\n\n  viewRowDetailValidationLogic\n","\n_ = require 'underscore'\nBackbone = require 'backbone'\n$base = require './model.base'\n$row = require './model.row'\n$aliases = require './model.aliases'\n$utils = require './model.utils'\n$configs = require './model.configs'\n$surveyDetail = require './model.surveyDetail'\n$skipLogicHelpers = require './mv.skipLogicHelpers'\n\nmodule.exports = do ->\n  _t = require(\"utils\").t\n\n  surveyFragment = {}\n\n  class KobomatrixRow extends Backbone.Model\n    _isSelectQuestion: -> false\n\n  class KobomatrixRows extends Backbone.Collection\n    model: KobomatrixRow\n\n  class KobomatrixMixin\n    constructor: (rr)->\n      @_kobomatrix_columns = new KobomatrixRows()\n      @_rowAttributeName = '_kobomatrix_columns'\n\n      extend_to_row = (val, key)=>\n        if _.isFunction(val)\n          rr[key] = (args...)->\n            val.apply(rr, args)\n        else\n          rr[key] = val\n      _.each @, extend_to_row\n      extend_to_row(@forEachRow, 'forEachRow')\n\n      _begin_kuid = rr.getValue('$kuid', false)\n      _end_json = {\n        \"type\": \"end_#{@_beginEndKey()}\"\n        \"$kuid\": \"/#{_begin_kuid}\"\n      }\n      rr._afterIterator = (cb, ctxt)->\n        obj =\n          export_relevant_values: (surv, addl)->\n            surv.push _.extend({}, _end_json)\n          toJSON: ->\n            _.extend({}, _end_json)\n\n        cb(obj)  if ctxt.includeGroupEnds\n\n      _toJSON = rr.toJSON\n\n      rr.clone = ()->\n        console.error('clone kobomatrix rows')\n\n      rr.toJSON = ()->\n        _.extend _toJSON.call(rr), {\n          'type': \"begin_#{rr._beginEndKey()}\"\n        }, @_additionalJson?()\n\n      _.each @constructor.prototype, extend_to_row\n\n      if rr.attributes.__rows\n        for subrow in rr.attributes.__rows\n          @[@_rowAttributeName].add(subrow)\n        delete rr.attributes.__rows\n\n\n    _kobomatrix_cols: ->\n      @rows\n\n    _isSelectQuestion: -> false\n    get_type: -> $skipLogicHelpers.question_types['default']\n    _beginEndKey: ->\n      'kobomatrix'\n\n    linkUp: (ctx)->\n      @getList = ()=> @items\n      items = {}\n      kobomatrix_list = @get('kobo--matrix_list')?.get('value')\n\n      if kobomatrix_list\n        items[kobomatrix_list] = @getSurvey().choices.get(kobomatrix_list)\n      else\n        kobomatrix_list = @.set('kobo--matrix_list', \"matrix_#{$utils.txtid()}\")\n        items[kobomatrix_list] = @getSurvey().choices.create()\n\n      @rows.each (row)=>\n        if listName = row.get('select_from_list_name')?.get('value')\n          items[listName] = @getSurvey().choices.get(listName)\n\n      @items = items\n      @items\n\n\n  passFunctionToMetaModel = (obj, fname)->\n    obj[\"__#{fname}\"] = obj[fname]\n    obj[fname] = (args...) -> obj._meta[fname].apply(obj._meta, args)\n\n  _forEachRow = (cb, ctx)->\n    @_beforeIterator(cb, ctx)  if '_beforeIterator' of @\n    unless 'includeErrors' of ctx\n      ctx.includeErrors = false\n    @rows.each (r, index, list)->\n      if typeof r.forEachRow is 'function'\n        if ctx.includeGroups\n          cb(r)\n        if not ctx.flat\n          r.forEachRow cb, ctx\n      else if r.isError()\n        cb(r)  if ctx.includeErrors\n      else\n        cb(r)\n    @_afterIterator(cb, ctx)  if '_afterIterator' of @\n    return\n\n  class surveyFragment.SurveyFragment extends $base.BaseCollection\n    constructor: (a,b)->\n      @rows = new Rows([], _parent: @)\n      @_meta = new Backbone.Model()\n      passFunctionToMetaModel(@, \"set\")\n      passFunctionToMetaModel(@, \"get\")\n      passFunctionToMetaModel(@, \"on\")\n      passFunctionToMetaModel(@, \"off\")\n      passFunctionToMetaModel(@, \"trigger\")\n      super(a,b)\n    _validate: ->\n      @clearErrors()\n      isValid = true\n      if !@settings.get('form_id')\n        @addError('form id must not be empty')\n        isValid = false\n\n      if !@settings.get('form_title')\n        @addError('form title must not be empty')\n        isValid = false\n\n      return isValid\n    clearErrors: () ->\n      @errors = []\n    addError: (message) ->\n      @errors.push message\n    linkUp: (ctx)-> @invoke('linkUp', ctx)\n    forEachRow: (cb, ctx={})->\n      _forEachRow.apply(@, [cb, ctx])\n    getRowDescriptors: () ->\n      descriptors = []\n      @forEachRow (row) ->\n        descriptor =\n          label: row.getValue('label')\n          name: row.getValue('name')\n        descriptors.push(descriptor)\n      descriptors\n    findRowByCid: (cid, options={})->\n      match = false\n      fn = (row)->\n        if row.cid is cid\n          match = row\n        # maybe implement a way to bust out\n        # of this loop with false response.\n        !match\n      @forEachRow fn, options\n      match\n\n    findRowByName: (name, opts)->\n      match = false\n      @forEachRow (row)->\n        if (row.getValue(\"name\") || $utils.sluggifyLabel row.getValue('label')) is name\n          match = row\n        # maybe implement a way to bust out\n        # of this loop with false response.\n        !match\n      ,opts\n      match\n    addRowAtIndex: (r, index)-> @addRow(r, at: index)\n    addRow: (r, opts={})->\n      if (afterRow = opts.after)\n        delete opts.after\n        opts._parent = afterRow._parent\n        index = 1 + opts._parent.models.indexOf(afterRow)\n        opts.at = index\n      else if (beforeRow = opts.before)\n        delete opts.before\n        opts._parent = beforeRow._parent\n        index = opts._parent.models.indexOf(beforeRow)\n        opts.at = index\n      else\n        opts._parent = @rows\n      opts._parent.add r, opts\n\n    detach: ->\n      @_parent.remove(@)\n      ``\n\n    remove: (item)->\n      item.detach()\n\n    _addGroup: (opts)->\n      # move to surveyFrag\n      opts._parent = @rows\n\n      unless 'type' of opts\n        opts.type = 'group'\n\n      unless '__rows' of opts\n        opts.__rows = []\n\n      opts.__rows = [].concat.apply([], opts.__rows)\n\n      rowCids = []\n      @forEachRow (\n          (r)->\n            rowCids.push(r.cid)\n        ), includeGroups: true, includeErrors: true\n\n      lowest_i = false\n      for row in opts.__rows\n        row_i = rowCids.indexOf row.cid\n        if (lowest_i is false) or (row_i < lowest_i)\n          lowest_i = row_i\n          first_row = row\n\n      addOpts =\n        previous: first_row.precedingRow()\n        parent: first_row.parentRow()\n      for row in opts.__rows\n        row.detach(silent: true)\n\n      unless opts.label?\n        opts.label = $configs.newGroupDetails.label.value\n      grp = new surveyFragment.Group(opts)\n      @getSurvey()._insertRowInPlace grp, addOpts\n      par = addOpts.parent or @getSurvey().rows\n      par.trigger('add', grp)\n\n    _allRows: ->\n      # move to surveyFrag\n      rows = []\n      @forEachRow ((r)-> rows.push(r)  if r.constructor.kls is \"Row\"), {}\n      rows\n\n    finalize: ->\n      # move to surveyFrag\n      @forEachRow ((r)=> r.finalize()), includeGroups: true\n      @\n\n  class surveyFragment.Group extends $row.BaseRow\n    @kls = \"Group\"\n    @key = \"group\"\n    constructor: (a={}, b)->\n      __rows = a.__rows or []\n      if a.label == undefined\n        a.label = ''\n      @_parent = a._parent\n      delete a.__rows\n      @rows = new Rows([], _parent: @)\n      super(a,b)\n      @rows.add __rows  if __rows\n      for row in __rows\n        row._parent = row.collection = @rows\n\n    _isSelectQuestion: -> false\n    get_type: -> $skipLogicHelpers.question_types['default']\n\n    initialize: ->\n      grpDefaults = $configs.newGroupDetails\n      for key, obj of grpDefaults\n        if !@has key\n          if typeof obj.value is 'function'\n            @set key, obj.value(@)\n          else\n            @set key, obj\n      @ensureKuid()\n      typeIsRepeat = @get('type') is 'repeat'\n      @set('_isRepeat', typeIsRepeat)\n      @convertAttributesToRowDetails()\n      if @getValue('type') is 'kobomatrix'\n        new KobomatrixMixin(@)\n\n    addRowAtIndex: (row, index) ->\n      row._parent = @rows\n      @rows.add(row, at:index)\n    _isRepeat: ()->\n      !!(@get(\"_isRepeat\")?.get(\"value\"))\n\n    autoname: ->\n      name = @getValue('name')\n      if name in [undefined, '']\n        slgOpts =\n          lowerCase: false\n          stripSpaces: true\n          lrstrip: true\n          incrementorPadding: 3\n          validXmlTag: true\n        new_name = $utils.sluggify(@getValue('label'), slgOpts)\n        @setDetail('name', new_name)\n\n    finalize: ->\n      @autoname()\n\n    detach: (opts)->\n      @_parent.remove(@, opts)\n\n    splitApart: ->\n      startingIndex = @_parent.models.indexOf(@)\n      @detach()\n      for row, n in @rows.models\n        row._parent = @_parent\n        @_parent._parent.addRowAtIndex(row, startingIndex + n)\n      return\n\n    _beforeIterator: (cb, ctxt)->\n      cb(@groupStart())  if ctxt.includeGroupEnds\n    _afterIterator: (cb, ctxt)->\n      cb(@groupEnd())  if ctxt.includeGroupEnds\n\n    forEachRow: (cb, ctx={})->\n      _forEachRow.apply(@, [cb, ctx])\n\n    _groupOrRepeatKey: ->\n      if @_isRepeat() then \"repeat\" else \"group\"\n\n    groupStart: ->\n      group = @\n      export_relevant_values: (surv, shts)-> surv.push(@toJSON())\n      toJSON: ->\n        out = {}\n        for k, val of group.attributes\n          if k isnt '_isRepeat'\n            out[k] = val.getValue()\n        out.type = \"begin_#{group._groupOrRepeatKey()}\"\n        out\n    groupEnd: ->\n      group = @\n      _kuid = @getValue(\"$kuid\")\n      _as_json =\n        type: \"end_#{@_groupOrRepeatKey()}\"\n        $kuid: \"/#{_kuid}\"\n\n      export_relevant_values: (surv, shts)->\n        surv.push _.extend {}, _as_json\n      toJSON: ()->\n        _.extend {}, _as_json\n\n  INVALID_TYPES_AT_THIS_STAGE = ['begin_group', 'end_group', 'begin_repeat', 'end_repeat']\n  _determineConstructorByParams = (obj)->\n    formSettingsTypes = do ->\n      for key, val of $configs.defaultSurveyDetails\n        val.name\n    type = obj?.type\n    if type in INVALID_TYPES_AT_THIS_STAGE\n      # inputParser should have converted groups and repeats into a structure by this point\n      throw new Error(\"Invalid type at this stage: #{type}\")\n\n    if type in formSettingsTypes\n      # e.g. \"today\"\n      throw new Error(\"#{type} is not properly handled as a SurveyDetail\")\n      $surveyDetail.SurveyDetail\n    else if type is 'score'\n      $row.Row\n    else if type in ['group', 'repeat', 'kobomatrix']\n      surveyFragment.Group\n    else\n      $row.Row\n\n  class Rows extends $base.BaseCollection\n    constructor: (args...)->\n      super(args...)\n      @on('add', (a,b,c) => @_parent.getSurvey().trigger('rows-add', a,b,c))\n      @on('remove', (a,b,c) => @_parent.getSurvey().trigger('rows-remove', a,b,c))\n    model: (obj, ctxt)->\n      RowConstructor = _determineConstructorByParams(obj)\n      try\n        new RowConstructor(obj, _.extend({}, ctxt, _parent: ctxt.collection))\n      catch e\n        # Store exceptions in with the survey\n        new $row.RowError(obj, _.extend({}, ctxt, error: e, _parent: ctxt.collection))\n    comparator: (m)-> m.ordinal\n\n  surveyFragment\n","$base = require './model.base'\n\nmodule.exports = do ->\n  RowDetail: $base.RowDetail\n","csv = require './csv'\n\nmodule.exports = do ->\n\n  markdownTable = {}\n  ###\n  this markdownTable is not meant to be used in production for real surveys.\n  It's simply here because it provides a clean way to display xlsforms in the source code.\n  ###\n\n  markdownTable.mdSurveyStructureToObject = (md)->\n    _trim = (s)-> String(s).replace(/^\\s+|\\s+$/g, '')\n    shtName = false\n    curSheet = false\n    sObj = {}\n    _pushSheet = ->\n      cols = curSheet[0]\n      sheetObjs = []\n      for row in curSheet.slice(1)\n        rowObj = {}\n        for cell, n in row when cols[n]\n          rowObj[cols[n]] = cell\n        sheetObjs.push(rowObj)\n      sObj[shtName] = sheetObjs\n      curSheet = []\n    for row in md.split('\\n')\n      _r = []\n      rcells = _trim(row).split('|')\n      for cell, i in rcells when i > 0\n        _r.push _trim(cell)\n      if _r[0]\n        _pushSheet()  if curSheet\n        shtName = _r[0]\n        curSheet = []\n      else if curSheet\n        curSheet.push(_r.slice(1, _r.length-1))\n      _r\n    _pushSheet()\n    sObj\n\n\n  markdownTable.csvJsonToMarkdown = (csvJson)->\n    _lengths = []\n    _record_max = (val, index)->\n      if !_lengths[index]\n        (_lengths[index] = 0)\n      if val > _lengths[index]\n        (_lengths[index] = val)\n      ``\n    _ljust = (str, n) ->\n      (str = '')  if !str\n      diff = n - str.length\n      if diff > 0\n        str += (new Array(diff+1)).join(' ')\n      str\n    _append_line_arr = (_arr, preceding=0)->\n      for i in [0...preceding]\n        _arr.unshift('')\n      _arr.length = _lengths.length\n      for x, i in _arr\n        _arr[i] = _ljust(x, _lengths[i])\n      outstr += \"| #{_arr.join(' | ')} |\\n\"\n      ``\n\n    sheeted = csv.sheeted()\n    outstr = \"\\n\"\n\n    for shtName, content of csvJson\n      _record_max(shtName.length, 0)\n      _sht = sheeted.sheet shtName, csv(content)\n      for cell, i in content.columns\n        _record_max(cell.length, i+1)\n      for row in _sht.rowArray\n        for cell, i in row\n          _record_max(cell.length, i+1)\n\n    for shtName, sheet of sheeted._sheets\n      _append_line_arr([shtName])\n      _append_line_arr(sheet.columns, 1)\n      _append_line_arr(row, 1)  for row in sheet.rowArray\n\n    outstr\n\n  markdownTable\n","import clonedeep from 'lodash.clonedeep';\nimport {ASSET_TYPES} from 'js/constants';\n\n/**\n * Asset type could be either the loaded asset type (editing an existing form)\n * or the desired asset type (creating a new form)\n *\n * @returns {object|null} one of ASSET_TYPES\n */\nexport function getFormBuilderAssetType(assetType, desiredAssetType) {\n  if (assetType && ASSET_TYPES[assetType]) {\n    return ASSET_TYPES[assetType];\n  } else if (desiredAssetType && ASSET_TYPES[desiredAssetType]) {\n    return ASSET_TYPES[desiredAssetType];\n  }\n  return null;\n}\n\nexport function surveyToValidJson(survey) {\n  // HACK: This is done as a fix for https://github.com/kobotoolbox/kpi/pull/735\n  // I'm not entirely sure what this is about but definitely BAD CODE™!\n  //\n  // skip logic references only preserved after initial call\n  // to \"survey.toFlatJSON()\"\n  survey.toFlatJSON();\n  // returning the result of the second call to \"toFlatJSON()\"\n  return JSON.stringify(survey.toFlatJSON());\n}\n\n/**\n * This function reverses what `nullifyTranslations` did to the form data.\n * @param {string} surveyDataJSON\n * @param {object} assetContent\n * @return {string} fixed surveyDataJSON\n */\nexport function unnullifyTranslations(surveyDataJSON, assetContent) {\n  let surveyData = JSON.parse(surveyDataJSON);\n\n  let translatedProps = [];\n  if (assetContent.translated) {\n     translatedProps = assetContent.translated;\n  }\n\n  // TRANSLATIONS HACK (Part 2/2):\n  // set default_language\n  let defaultLang = assetContent.translations_0;\n  if (!defaultLang) {\n    defaultLang = null;\n  }\n  if (!surveyData.settings[0].default_language && defaultLang !== null) {\n    surveyData.settings[0].default_language = defaultLang;\n  }\n\n  if (defaultLang !== null) {\n    // replace every \"translatedProp\" with \"translatedProp::defaultLang\"\n    if (surveyData.choices) {\n      surveyData.choices.forEach((choice) => {\n        translatedProps.forEach((translatedProp) => {\n          if (typeof choice[translatedProp] !== 'undefined') {\n            choice[`${translatedProp}::${defaultLang}`] = choice[translatedProp];\n            delete choice[translatedProp];\n          }\n        });\n      });\n    }\n    if (surveyData.survey) {\n      surveyData.survey.forEach((surveyRow) => {\n        translatedProps.forEach((translatedProp) => {\n          if (typeof surveyRow[translatedProp] !== 'undefined') {\n            if (typeof surveyData.settings[0] !== 'undefined'\n                && typeof surveyData.settings[0].style === 'string'\n                && surveyData.settings[0].style.includes('theme-grid')\n                && surveyRow.type === 'begin_group'\n                && (surveyRow[translatedProp] === null || surveyRow[translatedProp] === '')) {\n              delete surveyRow[translatedProp];\n            }\n            surveyRow[`${translatedProp}::${defaultLang}`] = surveyRow[translatedProp];\n            delete surveyRow[translatedProp];\n          }\n        });\n      });\n    }\n  }\n\n  return JSON.stringify(surveyData);\n}\n\n/**\n * @typedef NullifiedTranslations\n * @property {object} survey - Modified survey.\n * @property {Array<string|null>} translations - Modified translations.\n * @property {Array<string|null>} translations_0 - The original default language name.\n */\n\n/**\n * A function that adjust the translations data to the Form Builder code.\n * Requires the sibling `unnullifyTranslations` function to be called before\n * saving the form.\n * @param {Array<string|null>} [translations]\n * @param {Array<string>} translatedProps\n * @param {Array<object>} survey\n * @param {object} baseSurvey\n * @return {NullifiedTranslations}\n */\nexport function nullifyTranslations(translations, translatedProps, survey, baseSurvey) {\n  const data = {\n    survey: clonedeep(survey),\n    translations: clonedeep(translations)\n  };\n\n  if (typeof translations === 'undefined') {\n    data.translations = [null];\n    return data;\n  }\n\n  if (data.translations.length > 1 && data.translations.indexOf(null) !== -1) {\n    throw new Error('There is an unnamed translation in your form definition.\\nPlease give a name to all translations in your form.\\nUse \"Manage Translations\" option from form landing page.');\n  }\n\n  /*\n  TRANSLATIONS HACK (Part 1/2):\n  all the coffee code assumes first language to be null, and we don't want\n  to introduce potential code-breaking refactor in old code, so we store\n  first language, then replace with null and reverse this just before saving\n  NOTE: when importing assets from Library into form, we need to make sure\n  the default language is the same (or force baseSurvey default language)\n  */\n  if (baseSurvey) {\n    const formDefaultLang = baseSurvey._initialParams.translations_0 || null;\n    if (data.translations[0] === formDefaultLang) {\n      // case 1: nothing to do - same default language in both\n    } else if (data.translations.includes(formDefaultLang)) {\n      // case 2: imported asset has form default language but not as first, so\n      // we need to reorder things\n      const defaultLangIndex = data.translations.indexOf(formDefaultLang);\n      data.translations.unshift(data.translations.pop(defaultLangIndex));\n      data.survey.forEach((row) => {\n        translatedProps.forEach((translatedProp) => {\n          const transletedPropArr = row[translatedProp];\n          if (transletedPropArr) {\n            transletedPropArr.unshift(transletedPropArr.pop(defaultLangIndex));\n          }\n        });\n      });\n    }\n\n    if (!data.translations.includes(formDefaultLang)) {\n      // case 3: imported asset doesn't have form default language, so we\n      // force it onto the asset as the first language and try setting some\n      // meaningful property value\n      data.translations.unshift(formDefaultLang);\n      data.survey.forEach((row) => {\n        translatedProps.forEach((translatedProp) => {\n          if (row[translatedProp]) {\n            let propVal = null;\n            if (row.name) {\n              propVal = row.name;\n            } else if (row.$autoname) {\n              propVal = row.$autoname;\n            }\n            row[translatedProp].unshift(propVal);\n          }\n        });\n      });\n    }\n  }\n\n  // no need to nullify null\n  if (data.translations[0] !== null) {\n    data.translations_0 = data.translations[0];\n    data.translations[0] = null;\n  }\n\n  return data;\n}\n\nexport function koboMatrixParser(params) {\n  let content = {};\n  if (params.content)\n    content = JSON.parse(params.content);\n  if (params.source)\n    content = JSON.parse(params.source);\n\n  if (!content.survey)\n    return params;\n\n  var hasMatrix = false;\n  var surveyLength = content.survey.length;\n\n  // add open/close tags for kobomatrix groups\n  for (var i = 0; i < surveyLength; i++) {\n    if (content.survey[i].type === 'kobomatrix') {\n      content.survey[i].type = 'begin_kobomatrix';\n      content.survey[i].appearance = 'field-list';\n      surveyLength++;\n      content.survey.splice(i + 1, 0, {type: 'end_kobomatrix', '$kuid': `/${content.survey[i].$kuid}`});\n    }\n  }\n\n  // add columns as items in the group\n  for (i = 0; i < surveyLength; i++) {\n    if (content.survey[i].type === 'begin_kobomatrix') {\n      var j = i;\n      hasMatrix = true;\n      var matrix = localStorage.getItem(`koboMatrix.${content.survey[i].$kuid}`);\n\n      if (matrix != null) {\n        matrix = JSON.parse(matrix);\n        for (var kuid of matrix.cols) {\n          i++;\n          surveyLength++;\n          content.survey.splice(i, 0, matrix[kuid]);\n        }\n\n        for (var k of Object.keys(matrix.choices)) {\n          content.choices.push(matrix.choices[k]);\n        }\n      }\n      // TODO: handle corrupt matrix data\n    }\n  }\n\n  if (hasMatrix) {\n    if (params.content)\n      params.content = JSON.stringify(content);\n    if (params.source)\n      params.source = JSON.stringify(content);\n  }\n  return params;\n}\n\nexport function readParameters(str) {\n  if (typeof str !== 'string') {\n    return null;\n  }\n\n  const params = {};\n\n  let separator = ' ';\n  if (str.includes(';')) {\n    separator = ';';\n  } else if (str.includes(',')) {\n    separator = ',';\n  }\n  const otherSeparators = ';, '.replace(separator, '');\n  const cleanStr = str.replace(new RegExp(' *= *', 'g'), '=');\n  const parts = cleanStr.split(new RegExp(`[${otherSeparators}]*${separator}[${otherSeparators}]*`, 'g'));\n\n  parts.forEach((part) => {\n    if (part.includes('=')) {\n      const key = part.slice(0, part.indexOf('='));\n      const value = part.slice(key.length + 1);\n      params[key] = value;\n    }\n  });\n\n  if (Object.keys(params).length < 1) {\n    return null;\n  }\n  return params;\n}\n\nexport function writeParameters(obj) {\n  let params = [];\n  Object.keys(obj).forEach((key) => {\n    if (obj[key] !== undefined && obj[key] !== null) {\n      let value = obj[key];\n      if (typeof value === 'object') {\n        value = JSON.stringify(value);\n      }\n      params.push(`${key}=${value}`);\n    }\n  });\n  return params.join(';');\n}\n","var map = {\n\t\"./af\": 172,\n\t\"./af.js\": 172,\n\t\"./ar\": 173,\n\t\"./ar-dz\": 174,\n\t\"./ar-dz.js\": 174,\n\t\"./ar-kw\": 175,\n\t\"./ar-kw.js\": 175,\n\t\"./ar-ly\": 176,\n\t\"./ar-ly.js\": 176,\n\t\"./ar-ma\": 177,\n\t\"./ar-ma.js\": 177,\n\t\"./ar-sa\": 178,\n\t\"./ar-sa.js\": 178,\n\t\"./ar-tn\": 179,\n\t\"./ar-tn.js\": 179,\n\t\"./ar.js\": 173,\n\t\"./az\": 180,\n\t\"./az.js\": 180,\n\t\"./be\": 181,\n\t\"./be.js\": 181,\n\t\"./bg\": 182,\n\t\"./bg.js\": 182,\n\t\"./bm\": 183,\n\t\"./bm.js\": 183,\n\t\"./bn\": 184,\n\t\"./bn.js\": 184,\n\t\"./bo\": 185,\n\t\"./bo.js\": 185,\n\t\"./br\": 186,\n\t\"./br.js\": 186,\n\t\"./bs\": 187,\n\t\"./bs.js\": 187,\n\t\"./ca\": 188,\n\t\"./ca.js\": 188,\n\t\"./cs\": 189,\n\t\"./cs.js\": 189,\n\t\"./cv\": 190,\n\t\"./cv.js\": 190,\n\t\"./cy\": 191,\n\t\"./cy.js\": 191,\n\t\"./da\": 192,\n\t\"./da.js\": 192,\n\t\"./de\": 193,\n\t\"./de-at\": 194,\n\t\"./de-at.js\": 194,\n\t\"./de-ch\": 195,\n\t\"./de-ch.js\": 195,\n\t\"./de.js\": 193,\n\t\"./dv\": 196,\n\t\"./dv.js\": 196,\n\t\"./el\": 197,\n\t\"./el.js\": 197,\n\t\"./en-au\": 198,\n\t\"./en-au.js\": 198,\n\t\"./en-ca\": 199,\n\t\"./en-ca.js\": 199,\n\t\"./en-gb\": 200,\n\t\"./en-gb.js\": 200,\n\t\"./en-ie\": 201,\n\t\"./en-ie.js\": 201,\n\t\"./en-il\": 202,\n\t\"./en-il.js\": 202,\n\t\"./en-in\": 203,\n\t\"./en-in.js\": 203,\n\t\"./en-nz\": 204,\n\t\"./en-nz.js\": 204,\n\t\"./en-sg\": 205,\n\t\"./en-sg.js\": 205,\n\t\"./eo\": 206,\n\t\"./eo.js\": 206,\n\t\"./es\": 207,\n\t\"./es-do\": 208,\n\t\"./es-do.js\": 208,\n\t\"./es-us\": 209,\n\t\"./es-us.js\": 209,\n\t\"./es.js\": 207,\n\t\"./et\": 210,\n\t\"./et.js\": 210,\n\t\"./eu\": 211,\n\t\"./eu.js\": 211,\n\t\"./fa\": 212,\n\t\"./fa.js\": 212,\n\t\"./fi\": 213,\n\t\"./fi.js\": 213,\n\t\"./fil\": 214,\n\t\"./fil.js\": 214,\n\t\"./fo\": 215,\n\t\"./fo.js\": 215,\n\t\"./fr\": 216,\n\t\"./fr-ca\": 217,\n\t\"./fr-ca.js\": 217,\n\t\"./fr-ch\": 218,\n\t\"./fr-ch.js\": 218,\n\t\"./fr.js\": 216,\n\t\"./fy\": 219,\n\t\"./fy.js\": 219,\n\t\"./ga\": 220,\n\t\"./ga.js\": 220,\n\t\"./gd\": 221,\n\t\"./gd.js\": 221,\n\t\"./gl\": 222,\n\t\"./gl.js\": 222,\n\t\"./gom-deva\": 223,\n\t\"./gom-deva.js\": 223,\n\t\"./gom-latn\": 224,\n\t\"./gom-latn.js\": 224,\n\t\"./gu\": 225,\n\t\"./gu.js\": 225,\n\t\"./he\": 226,\n\t\"./he.js\": 226,\n\t\"./hi\": 227,\n\t\"./hi.js\": 227,\n\t\"./hr\": 228,\n\t\"./hr.js\": 228,\n\t\"./hu\": 229,\n\t\"./hu.js\": 229,\n\t\"./hy-am\": 230,\n\t\"./hy-am.js\": 230,\n\t\"./id\": 231,\n\t\"./id.js\": 231,\n\t\"./is\": 232,\n\t\"./is.js\": 232,\n\t\"./it\": 233,\n\t\"./it-ch\": 234,\n\t\"./it-ch.js\": 234,\n\t\"./it.js\": 233,\n\t\"./ja\": 235,\n\t\"./ja.js\": 235,\n\t\"./jv\": 236,\n\t\"./jv.js\": 236,\n\t\"./ka\": 237,\n\t\"./ka.js\": 237,\n\t\"./kk\": 238,\n\t\"./kk.js\": 238,\n\t\"./km\": 239,\n\t\"./km.js\": 239,\n\t\"./kn\": 240,\n\t\"./kn.js\": 240,\n\t\"./ko\": 241,\n\t\"./ko.js\": 241,\n\t\"./ku\": 242,\n\t\"./ku.js\": 242,\n\t\"./ky\": 243,\n\t\"./ky.js\": 243,\n\t\"./lb\": 244,\n\t\"./lb.js\": 244,\n\t\"./lo\": 245,\n\t\"./lo.js\": 245,\n\t\"./lt\": 246,\n\t\"./lt.js\": 246,\n\t\"./lv\": 247,\n\t\"./lv.js\": 247,\n\t\"./me\": 248,\n\t\"./me.js\": 248,\n\t\"./mi\": 249,\n\t\"./mi.js\": 249,\n\t\"./mk\": 250,\n\t\"./mk.js\": 250,\n\t\"./ml\": 251,\n\t\"./ml.js\": 251,\n\t\"./mn\": 252,\n\t\"./mn.js\": 252,\n\t\"./mr\": 253,\n\t\"./mr.js\": 253,\n\t\"./ms\": 254,\n\t\"./ms-my\": 255,\n\t\"./ms-my.js\": 255,\n\t\"./ms.js\": 254,\n\t\"./mt\": 256,\n\t\"./mt.js\": 256,\n\t\"./my\": 257,\n\t\"./my.js\": 257,\n\t\"./nb\": 258,\n\t\"./nb.js\": 258,\n\t\"./ne\": 259,\n\t\"./ne.js\": 259,\n\t\"./nl\": 260,\n\t\"./nl-be\": 261,\n\t\"./nl-be.js\": 261,\n\t\"./nl.js\": 260,\n\t\"./nn\": 262,\n\t\"./nn.js\": 262,\n\t\"./oc-lnc\": 263,\n\t\"./oc-lnc.js\": 263,\n\t\"./pa-in\": 264,\n\t\"./pa-in.js\": 264,\n\t\"./pl\": 265,\n\t\"./pl.js\": 265,\n\t\"./pt\": 266,\n\t\"./pt-br\": 267,\n\t\"./pt-br.js\": 267,\n\t\"./pt.js\": 266,\n\t\"./ro\": 268,\n\t\"./ro.js\": 268,\n\t\"./ru\": 269,\n\t\"./ru.js\": 269,\n\t\"./sd\": 270,\n\t\"./sd.js\": 270,\n\t\"./se\": 271,\n\t\"./se.js\": 271,\n\t\"./si\": 272,\n\t\"./si.js\": 272,\n\t\"./sk\": 273,\n\t\"./sk.js\": 273,\n\t\"./sl\": 274,\n\t\"./sl.js\": 274,\n\t\"./sq\": 275,\n\t\"./sq.js\": 275,\n\t\"./sr\": 276,\n\t\"./sr-cyrl\": 277,\n\t\"./sr-cyrl.js\": 277,\n\t\"./sr.js\": 276,\n\t\"./ss\": 278,\n\t\"./ss.js\": 278,\n\t\"./sv\": 279,\n\t\"./sv.js\": 279,\n\t\"./sw\": 280,\n\t\"./sw.js\": 280,\n\t\"./ta\": 281,\n\t\"./ta.js\": 281,\n\t\"./te\": 282,\n\t\"./te.js\": 282,\n\t\"./tet\": 283,\n\t\"./tet.js\": 283,\n\t\"./tg\": 284,\n\t\"./tg.js\": 284,\n\t\"./th\": 285,\n\t\"./th.js\": 285,\n\t\"./tk\": 286,\n\t\"./tk.js\": 286,\n\t\"./tl-ph\": 287,\n\t\"./tl-ph.js\": 287,\n\t\"./tlh\": 288,\n\t\"./tlh.js\": 288,\n\t\"./tr\": 289,\n\t\"./tr.js\": 289,\n\t\"./tzl\": 290,\n\t\"./tzl.js\": 290,\n\t\"./tzm\": 291,\n\t\"./tzm-latn\": 292,\n\t\"./tzm-latn.js\": 292,\n\t\"./tzm.js\": 291,\n\t\"./ug-cn\": 293,\n\t\"./ug-cn.js\": 293,\n\t\"./uk\": 294,\n\t\"./uk.js\": 294,\n\t\"./ur\": 295,\n\t\"./ur.js\": 295,\n\t\"./uz\": 296,\n\t\"./uz-latn\": 297,\n\t\"./uz-latn.js\": 297,\n\t\"./uz.js\": 296,\n\t\"./vi\": 298,\n\t\"./vi.js\": 298,\n\t\"./x-pseudo\": 299,\n\t\"./x-pseudo.js\": 299,\n\t\"./yo\": 300,\n\t\"./yo.js\": 300,\n\t\"./zh-cn\": 301,\n\t\"./zh-cn.js\": 301,\n\t\"./zh-hk\": 302,\n\t\"./zh-hk.js\": 302,\n\t\"./zh-mo\": 303,\n\t\"./zh-mo.js\": 303,\n\t\"./zh-tw\": 304,\n\t\"./zh-tw.js\": 304\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 393;","/**\n * A collection of miscellaneous utility functions.\n *\n * NOTE: these are used also by the Form Builder coffee code (see\n * `jsapp/xlform/src/view.surveyApp.coffee`)\n *\n * TODO: group these functions by what are they doing or where are they mostly\n * (or uniquely) used, and split to smaller files.\n */\n\nimport moment from 'moment';\nimport alertify from 'alertifyjs';\nimport {Cookies} from 'react-cookie';\nimport { hashHistory } from 'react-router';\n// importing whole constants, as we override ROOT_URL in tests\nimport constants from 'js/constants';\n\nexport const LANGUAGE_COOKIE_NAME = 'django_language';\n\nexport var assign = require('object-assign');\n\nalertify.defaults.notifier.delay = 10;\nalertify.defaults.notifier.position = 'bottom-left';\nalertify.defaults.notifier.closeButton = true;\n\nconst cookies = new Cookies();\n\nexport function notify(msg: string, atype='success') {\n  alertify.notify(msg, atype);\n}\n\n/**\n * Returns something like \"Today at 4:06 PM\", \"Yesterday at 5:46 PM\", \"Last Saturday at 5:46 PM\" or \"February 11, 2021\"\n */\nexport function formatTime(timeStr: string): string {\n  var _m = moment(timeStr);\n  return _m.calendar(null, {sameElse: 'LL'});\n}\n\n/**\n * Returns something like \"March 15, 2021 4:06 PM\"\n */\nexport function formatTimeDate(timeStr: string): string {\n  var _m = moment(timeStr);\n  return _m.format('LLL');\n}\n\n/**\n * Returns something like \"Sep 4, 1986 8:30 PM\"\n */\nexport function formatTimeDateShort(timeStr: string): string {\n  const _m = moment(timeStr)\n  return _m.format('lll')\n}\n\n/**\n * Returns something like \"Mar 15, 2021\"\n */\nexport function formatDate(timeStr: string): string {\n  var _m = moment(timeStr);\n  return _m.format('ll');\n}\n\n// works universally for v1 and v2 urls\nexport function getUsernameFromUrl(userUrl: string): string | null {\n  const matched = userUrl.match(/\\/users\\/(.*)\\//);\n  if (matched !== null) {\n    return matched[1];\n  }\n  return null;\n}\n\n// TODO: Test if works for both form and library routes, if not make it more general\nexport function getAssetUIDFromUrl(assetUrl: string): string | null {\n  const matched = assetUrl.match(/.*\\/([^/]+)\\//);\n  if (matched !== null) {\n    return matched[1];\n  }\n  return null\n}\n\nexport function buildUserUrl(username: string): string {\n  if (username.startsWith(window.location.protocol)) {\n    console.error(\"buildUserUrl() called with URL instead of username (incomplete v2 migration)\");\n    return username;\n  }\n  return `${constants.ROOT_URL}/api/v2/users/${username}/`;\n}\n\ndeclare global {\n  interface Window {\n    log: any\n  }\n}\n\nexport var log = (function(){\n  var _log: any = function(...args: any[]) {\n    console.log.apply(console, args);\n    return args[0];\n  };\n  _log.profileSeconds = function(n=1) {\n    console.profile();\n    window.setTimeout(function(){\n      console.profileEnd();\n    }, n * 1000);\n  };\n  return _log;\n})();\nwindow.log = log;\n\nconst originalSupportEmail = 'help@kobotoolbox.org';\n\n// use this utility function to replace hardcoded email in transifex translations\n//\n// TODO: make this use environment endpoint's `support_email` property.\n// Currently no place is using this correctly.\nexport function replaceSupportEmail(str: string, newEmail?: string): string {\n  if (typeof newEmail === 'string') {\n    return str.replace(originalSupportEmail, newEmail);\n  } else {\n    return str;\n  }\n}\n\n// returns an HTML string where [bracket] notation is replaced with a hyperlink\nexport function replaceBracketsWithLink(str: string, url?: string): string {\n  const bracketRegex = /\\[([^\\]]+)\\]/g;\n  if (!url) {\n    return str.replace(bracketRegex, '$1');\n  }\n  const linkHtml = `<a href=\"${url}\" target=\"_blank\">$1</a>`;\n  return str.replace(bracketRegex, linkHtml);\n}\n\nexport function currentLang(): string {\n  return cookies.get(LANGUAGE_COOKIE_NAME) || 'en';\n}\n\ninterface LangObject {\n  code: string\n  name: string\n}\n\n// langString contains name and code e.g. \"English (en)\"\nexport function getLangAsObject(langString: string): LangObject | undefined {\n  const openingIndex = langString.indexOf('(');\n  const closingIndex = langString.indexOf(')');\n\n  const langCode = langString.substring(openingIndex + 1, closingIndex);\n\n  const langName = langString.substring(0, openingIndex).trim();\n\n  if (\n    langCode &&\n    langName &&\n    // make sure langString contains just name and bracket-wrapped code\n    langName.length + langCode.length + 3 === langString.length\n  ) {\n    return {\n      code: langCode,\n      name: langName\n    };\n  } else {\n    return undefined;\n  }\n}\n\nexport function getLangString(obj: LangObject): string | undefined {\n  if (typeof obj === 'object' && obj.name && obj.code) {\n    return `${obj.name} (${obj.code})`;\n  } else {\n    return undefined;\n  }\n}\n\nexport function stringToColor(str: string, prc: number) {\n  // Higher prc = lighter color, lower = darker\n  prc = typeof prc === 'number' ? prc : -15;\n  var hash = function(word: string) {\n      var h = 0;\n      for (var i = 0; i < word.length; i++) {\n          h = word.charCodeAt(i) + ((h << 5) - h);\n      }\n      return h;\n  };\n  var shade = function(color: string, prc: number) {\n      var num = parseInt(color, 16),\n          amt = Math.round(2.55 * prc),\n          R = (num >> 16) + amt,\n          G = (num >> 8 & 0x00FF) + amt,\n          B = (num & 0x0000FF) + amt;\n      return (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +\n          (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +\n          (B < 255 ? B < 1 ? 0 : B : 255))\n          .toString(16)\n          .slice(1);\n  };\n  var int_to_rgba = function(i: number) {\n      var color = ((i >> 24) & 0xFF).toString(16) +\n          ((i >> 16) & 0xFF).toString(16) +\n          ((i >> 8) & 0xFF).toString(16) +\n          (i & 0xFF).toString(16);\n      return color;\n  };\n  return shade(int_to_rgba(hash(str)), prc);\n}\n\nexport function isAValidUrl(url: string) {\n  try {\n    new URL(url);\n    return true;\n  } catch(e) {\n    return false;\n  }\n}\n\nexport function checkLatLng(geolocation: any[]) {\n  if (geolocation && geolocation[0] && geolocation[1]) return true;\n  else return false;\n}\n\n\nexport function validFileTypes() {\n  const VALID_ASSET_UPLOAD_FILE_TYPES = [\n    '.xls',\n    '.xlsx',\n    'application/xls',\n    'application/vnd.ms-excel',\n    'application/octet-stream',\n    'application/vnd.openxmlformats',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    '' // Keep this to fix issue with IE Edge sending an empty MIME type\n  ];\n  return VALID_ASSET_UPLOAD_FILE_TYPES.join(',');\n}\n\nexport function escapeHtml(str: string): string {\n  const div = document.createElement('div');\n  div.appendChild(document.createTextNode(str));\n  return div.innerHTML;\n}\n\nexport function renderCheckbox(id: string, label: string, isImportant: boolean) {\n  let additionalClass = '';\n  if (isImportant) {\n    additionalClass += 'alertify-toggle-important';\n  }\n  return `<div class=\"alertify-toggle checkbox ${additionalClass}\"><label class=\"checkbox__wrapper\"><input type=\"checkbox\" class=\"checkbox__input\" id=\"${id}\"><span class=\"checkbox__label\">${label}</span></label></div>`;\n}\n\nexport function hasLongWords(text: string, limit: number = 25): boolean {\n  const textArr = text.split(' ');\n  const maxLength = Math.max(...(textArr.map((el) => {return el.length;})));\n  return maxLength >= limit;\n}\n\nexport function hasVerticalScrollbar(element: HTMLElement): boolean {\n  return element.scrollHeight > element.offsetHeight;\n}\n\nexport function getScrollbarWidth(): number {\n  // Creating invisible container\n  const outer: any = document.createElement('div');\n  outer.style.visibility = 'hidden';\n  outer.style.overflow = 'scroll'; // forcing scrollbar to appear\n  outer.style.msOverflowStyle = 'scrollbar'; // needed for WinJS apps\n  document.body.appendChild(outer);\n\n  // Creating inner element and placing it in the container\n  const inner = document.createElement('div');\n  outer.appendChild(inner);\n\n  // Calculating difference between container's full width and the child width\n  const scrollbarWidth = (outer.offsetWidth - inner.offsetWidth);\n\n  // Removing temporary elements from the DOM\n  if (outer.parentNode !== null) {\n    outer.parentNode.removeChild(outer);\n  }\n\n  return scrollbarWidth;\n}\n\nexport function toTitleCase(str: string): string {\n  return str.replace(/(^|\\s)\\S/g, (t) => {return t.toUpperCase();});\n}\n\nexport function launchPrinting() {\n  window.print();\n}\n\n/**\n * Trunactes strings to specified length\n */\nexport function truncateString(str: string, length: number): string {\n  let truncatedString = str;\n  const halfway = Math.trunc(length / 2);\n\n  if (length < truncatedString.length) {\n    let truncatedStringFront = truncatedString.substring(0, halfway);\n    let truncatedStringBack = truncatedString.slice(\n      truncatedString.length - halfway\n    );\n    truncatedString = truncatedStringFront + '…' + truncatedStringBack;\n  }\n\n  return truncatedString;\n}\n\n/**\n * Removes protocol then calls truncateString()\n */\nexport function truncateUrl(str: string, length: number): string {\n  let truncatedString = str.replace('https://', '').replace('http://', '');\n\n  return truncateString(truncatedString, length);\n}\n\n/**\n * Removes file extension then calls truncateString()\n */\nexport function truncateFile(str: string, length: number) {\n  // Remove file extension with simple regex that truncates everything past\n  // the last occurance of `.` inclusively\n  let truncatedString = str.replace(/\\.[^/.]+$/, '');\n\n  return truncateString(truncatedString, length);\n}\n\n/**\n * Generates a simple lowercase, underscored version of a string. Useful for\n * quick filename generation\n *\n * Inspired by the way backend handles generating autonames for translations:\n * https://github.com/kobotoolbox/kpi/blob/27220c2e65b47a7f150c5bef64db97226987f8fc/kpi/utils/autoname.py#L132-L138\n */\nexport function generateAutoname(str: string, startIndex: number = 0, endIndex: number = str.length) {\n  return str\n  .toLowerCase()\n  .substring(startIndex, endIndex)\n  .replace(/(\\ |\\.)/g, \"_\");\n}\n\nexport function csrfSafeMethod(method: string) {\n  // these HTTP methods do not require CSRF protection\n  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);\n}\n","_ = require 'underscore'\n$skipLogicParser = require './model.skipLogicParser'\n$validationLogicParser = require './model.validationLogicParser'\n\nmodule.exports = do ->\n\n  utils =\n    skipLogicParser: $skipLogicParser\n    validationLogicParser: $validationLogicParser\n\n  _trim = (str)->\n    str.replace(/^[\\s\\t\\uFEFF\\xA0]+|[\\s\\t\\uFEFF\\xA0]+$/g, '')\n\n  utils.split_paste = (str)->\n    out = []\n    for row in str.split('\\n')\n      trimmed = _trim(row)\n      unless trimmed.match(/^\\s*$/)\n        out.push(trimmed.split(/\\t/))\n    out_out = []\n    for row in out[1..]\n      orow = []\n      for n in [0...row.length]\n        key = out[0][n]\n        val = row[n]\n        if val.length > 0\n          orow.push([key, val])\n      out_out.push(_.object(orow))\n    out_out\n\n  utils.txtid = ()->\n    # a is text\n    # b is numeric or text\n    # c is mishmash\n    o = 'AAnCAnn'.replace /[AaCn]/g, (c)->\n      randChar= ()->\n        charI = Math.floor(Math.random()*52)\n        charI += (if charI <= 25 then 65 else 71)\n        String.fromCharCode charI\n\n      r = Math.random()\n      if c is 'a'\n        randChar()\n      else if c is 'A'\n        String.fromCharCode 65+(r*26|0)\n      else if c is 'C'\n        newI = Math.floor(r*62)\n        if newI > 52 then (newI - 52) else randChar()\n      else if c is 'n'\n        Math.floor(r*10)\n    o.toLowerCase()\n\n  utils.parseHelper =\n    parseSkipLogic: (collection, value, parent_row) ->\n      collection.meta.set(\"rawValue\", value)\n      try\n        parsedValues = $skipLogicParser(value)\n        collection.reset()\n        collection.parseable = true\n        for crit in parsedValues.criteria\n          opts = {\n            name: crit.name\n            expressionCode: crit.operator\n          }\n          if crit.operator is \"multiplechoice_selected\"\n            opts.criterionOption = collection.getSurvey().findRowByName(crit.name).getList().options.get(crit.response_value)\n          else\n            opts.criterion = crit.response_value\n          collection.add(opts, silent: true, _parent: parent_row)\n        if parsedValues.operator\n          collection.meta.set(\"delimSelect\", parsedValues.operator.toLowerCase())\n        ``\n      catch e\n        collection.parseable = false\n\n  utils.sluggifyLabel = (str, other_names=[])->\n    utils.sluggify(str, {\n        preventDuplicates: other_names\n        lowerCase: false\n        preventDuplicateUnderscores: true\n        stripSpaces: true\n        lrstrip: true\n        incrementorPadding: 3\n        validXmlTag: true\n      })\n\n  utils.isValidXmlTag = (str)->\n    str.search(/^[a-zA-Z_:]([a-zA-Z0-9_:.])*$/) is 0\n\n  utils.sluggify = (str, opts={})->\n    if str == ''\n      return ''\n    # Convert text to a friendly format. Rules are passed as options\n    opts = _.defaults(opts, {\n        # l/r strip: strip spaces from begin/end of string\n        lrstrip: false\n        lstrip: false\n        rstrip: false\n        # descriptor: used in error messages\n        descriptor: \"slug\"\n        lowerCase: true\n        replaceNonWordCharacters: true\n        nonWordCharsExceptions: false\n        preventDuplicateUnderscores: false\n        validXmlTag: false\n        underscores: true\n        characterLimit: 30\n        # preventDuplicates: an array with a list of values that should be avoided\n        preventDuplicates: false\n        incrementorPadding: false\n      })\n\n    if opts.lrstrip\n      opts.lstrip = true\n      opts.rstrip = true\n\n    if opts.lstrip\n      str = str.replace(/^\\s+/, \"\")\n\n    if opts.rstrip\n      str = str.replace(/\\s+$/, \"\")\n\n    if opts.lowerCase\n      str = str.toLowerCase()\n\n    if opts.underscores\n      str = str.replace(/\\s/g, \"_\").replace(/[_]+/g, \"_\")\n\n    if opts.replaceNonWordCharacters\n      if opts.nonWordCharsExceptions\n        regex = ///\\W^[#{opts.nonWordCharsExceptions}]///g\n      else\n        regex = /\\W+/g\n      str = str.replace(regex, '_')\n      # possibly a bit specific, but removes an underscore from the end\n      # of the string\n      if str.match(/._$/)\n        str = str.replace(/_$/, '')\n\n    if _.isNumber opts.characterLimit\n      str = str.slice(0, opts.characterLimit)\n\n    if opts.validXmlTag\n      if str[0].match(/^\\d/)\n        str = \"_\" + str\n\n    if opts.preventDuplicateUnderscores\n      while str.search(/__/) isnt -1\n        str = str.replace(/__/, '_')\n\n    if _.isArray(opts.preventDuplicates)\n      str = do ->\n        names_lc = (name.toLowerCase()  for name in opts.preventDuplicates when name)\n        attempt_base = str\n\n        if attempt_base.length is 0\n          throw new Error(\"Renaming Error: #{opts.descriptor} is empty\")\n\n        attempt = attempt_base\n        increment = 0\n        while attempt.toLowerCase() in names_lc\n          increment++\n          increment_str = \"#{increment}\"\n          if opts.incrementorPadding and increment < Math.pow(10, opts.incrementorPadding)\n            increment_str = (\"000000000000\" + increment).slice(-1 * opts.incrementorPadding)\n          attempt = \"#{attempt_base}_#{increment_str}\"\n        attempt\n\n    str\n\n  utils\n","import permConfig from './permConfig';\nimport {\n  ANON_USERNAME,\n  PERMISSIONS_CODENAMES,\n} from 'js/constants';\nimport {\n  SUFFIX_PARTIAL,\n  SUFFIX_USERS,\n  PARTIAL_CHECKBOX_PAIRS,\n  PARTIAL_PERM_PAIRS,\n  CHECKBOX_NAMES,\n  CHECKBOX_PERM_PAIRS,\n  PERM_CHECKBOX_PAIRS,\n} from './permConstants';\nimport {\n  buildUserUrl,\n  getUsernameFromUrl,\n} from 'utils';\n\n/**\n * @typedef {Object} BackendPerm\n * @property {string} user - User url.\n * @property {string} permission - Permission url.\n */\n\n/**\n * @typedef {Object} FormData  - Object containing data from the UserAssetPermsEditor form.\n * @property {string} data.username - Who give permissions to.\n * @property {boolean} data.formView\n * @property {boolean} data.formEdit\n * @property {boolean} data.formManage\n * @property {boolean} data.submissionsAdd\n * @property {boolean} data.submissionsView\n * @property {boolean} data.submissionsViewPartial\n * @property {string[]} data.submissionsViewPartialUsers\n * @property {boolean} data.submissionsEdit\n * @property {boolean} data.submissionsEditPartial\n * @property {string[]} data.submissionsEditPartialUsers\n * @property {boolean} data.submissionsDelete\n * @property {boolean} data.submissionsDeletePartial\n * @property {string[]} data.submissionsDeletePartialUsers\n * @property {boolean} data.submissionsValidate\n * @property {boolean} data.submissionsValidatePartial\n * @property {string[]} data.submissionsValidatePartialUsers\n */\n\n/**\n * @typedef {Object} UserPerm\n * @property {string} url - Url of given permission instance (permission x user).\n * @property {string} permission - Url of given permission type.\n */\n\n/**\n * @typedef {Object} UserWithPerms\n * @property {Object} user\n * @property {string} user.url - User url (identifier).\n * @property {string} user.name - User name.\n * @property {boolean} user.isOwner - Marks user that owns an asset that the permissions are for.\n * @property {UserPerm[]} permissions - A list of permissions for that user.\n */\n\n/**\n * Builds an object understandable by Backend endpoints from form data.\n * Removes contradictory and implied permissions from final output.\n *\n * @param {FormData} data\n * @returns {BackendPerm[]} - An array of permissions to be given.\n */\nfunction parseFormData(data) {\n  let parsed = [];\n  // Gather all partial permissions first, and then build a partial_submissions\n  // grouped permission to add it to final data.\n  let partialPerms = [];\n\n  [\n    CHECKBOX_NAMES.formView,\n    CHECKBOX_NAMES.formEdit,\n    CHECKBOX_NAMES.formManage,\n    CHECKBOX_NAMES.submissionsAdd,\n    CHECKBOX_NAMES.submissionsView,\n    CHECKBOX_NAMES.submissionsEdit,\n    CHECKBOX_NAMES.submissionsValidate,\n    CHECKBOX_NAMES.submissionsDelete,\n  ].forEach((checkboxName) => {\n    const partialCheckboxName = PARTIAL_CHECKBOX_PAIRS[checkboxName];\n\n    if (data[partialCheckboxName]) {\n      const permCodename = PARTIAL_PERM_PAIRS[partialCheckboxName];\n      partialPerms.push({\n        url: permConfig.getPermissionByCodename(permCodename).url,\n        filters: [{'_submitted_by': {'$in': data[partialCheckboxName + SUFFIX_USERS]}}],\n      });\n    } else if (data[checkboxName]) {\n      parsed.push(buildBackendPerm(data.username, CHECKBOX_PERM_PAIRS[checkboxName]));\n    }\n  });\n\n  if (partialPerms.length >= 1) {\n    const permObj = buildBackendPerm(data.username, PERMISSIONS_CODENAMES.partial_submissions);\n    permObj.partial_permissions = partialPerms;\n    parsed.push(permObj);\n  }\n\n  parsed = removeContradictoryPerms(parsed);\n  parsed = removeImpliedPerms(parsed);\n\n  return parsed;\n}\n\n/**\n * Removes contradictory permissions from the parsed list of BackendPerms.\n *\n * @param {BackendPerm[]} parsed - A list of permissions.\n */\nfunction removeContradictoryPerms(parsed) {\n  let contraPerms = new Set();\n  parsed.forEach((backendPerm) => {\n    const permDef = permConfig.getPermission(backendPerm.permission);\n    permDef.contradictory.forEach((contraPerm) => {\n      contraPerms.add(contraPerm);\n    });\n  });\n  parsed = parsed.filter((backendPerm) => {\n    return !contraPerms.has(backendPerm.permission);\n  });\n  return parsed;\n}\n\n/**\n * Removes implied permissions from the parsed list of BackendPerms.\n *\n * @param {BackendPerm[]} parsed - A list of permissions.\n */\nfunction removeImpliedPerms(parsed) {\n  let impliedPerms = new Set();\n  parsed.forEach((backendPerm) => {\n    const permDef = permConfig.getPermission(backendPerm.permission);\n    permDef.implied.forEach((impliedPerm) => {\n      impliedPerms.add(impliedPerm);\n    });\n  });\n  parsed = parsed.filter((backendPerm) => {\n    return !impliedPerms.has(backendPerm.permission);\n  });\n  return parsed;\n}\n\n/**\n * @param {string} username\n * @param {string} permissionCodename\n * @returns {BackendPerm}\n */\nfunction buildBackendPerm(username, permissionCodename) {\n  return {\n    user: buildUserUrl(username),\n    permission: permConfig.getPermissionByCodename(permissionCodename).url,\n  };\n}\n\n/**\n * Builds form data from list of permissions.\n *\n * @param {UserPerm[]} permissions\n * @returns {FormData}\n */\nfunction buildFormData(permissions) {\n  const formData = {};\n\n  permissions.forEach((perm) => {\n    if (perm.permission === permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.view_asset).url) {\n      formData.formView = true;\n    }\n    if (perm.permission === permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.change_asset).url) {\n      formData.formEdit = true;\n    }\n    if (perm.permission === permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.manage_asset).url) {\n      formData.formManage = true;\n    }\n    if (perm.permission === permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.partial_submissions).url) {\n      perm.partial_permissions.forEach((partial) => {\n        const permDef = permConfig.getPermission(partial.url);\n        const checkboxName = PERM_CHECKBOX_PAIRS[permDef.codename] + SUFFIX_PARTIAL;\n\n        formData[checkboxName] = true;\n\n        partial.filters.forEach((filter) => {\n          if (filter._submitted_by) {\n            formData[checkboxName + SUFFIX_USERS] = filter._submitted_by.$in;\n          }\n        });\n      });\n    }\n    if (perm.permission === permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.add_submissions).url) {\n      formData.submissionsAdd = true;\n    }\n    if (perm.permission === permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.view_submissions).url) {\n      formData.submissionsView = true;\n    }\n    if (perm.permission === permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.change_submissions).url) {\n      formData.submissionsEdit = true;\n    }\n    if (perm.permission === permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.delete_submissions).url) {\n      formData.submissionsDelete = true;\n    }\n    if (perm.permission === permConfig.getPermissionByCodename(PERMISSIONS_CODENAMES.validate_submissions).url) {\n      formData.submissionsValidate = true;\n    }\n  });\n\n  return formData;\n}\n\n/**\n * Builds a flat array of permissions for Backend endpoint\n *\n * @param {UserWithPerms[]} data - The one you get from parseBackendData\n * @returns {BackendPerm[]} A flat list of BackendPerms\n */\nfunction parseUserWithPermsList(data) {\n  const output = [];\n  data.forEach((item) => {\n    item.permissions.forEach((itemPerm) => {\n      const outputPerm = {\n        user: item.user.url,\n        permission: itemPerm.permission,\n      };\n      if (itemPerm.partial_permissions) {\n        outputPerm.partial_permissions = itemPerm.partial_permissions;\n      }\n      output.push(outputPerm);\n    });\n  });\n  return output;\n}\n\n/**\n * Groups raw Backend permissions list data into array of users who have a list of permissions.\n *\n * @param {Object} data - Permissions array (results property from endpoint response).\n * @param {string} ownerUrl - Asset owner url (used as identifier).\n * @param {boolean} includeAnon - Whether to include permissions assigned to the anonymous user.\n *\n * @returns {UserWithPerms[]} An ordered list of users with all their permissions.\n */\nfunction parseBackendData(data, ownerUrl, includeAnon = false) {\n  const output = [];\n\n  const groupedData = {};\n  data.forEach((item) => {\n    // anonymous user permissions are our inner way of handling public sharing\n    if (getUsernameFromUrl(item.user) === ANON_USERNAME && !includeAnon) {\n      return;\n    }\n    if (!groupedData[item.user]) {\n      groupedData[item.user] = [];\n    }\n    groupedData[item.user].push({\n      url: item.url,\n      permission: item.permission,\n      partial_permissions: item.partial_permissions ? item.partial_permissions : undefined,\n    });\n  });\n\n  Object.keys(groupedData).forEach((userUrl) => {\n    output.push({\n      user: {\n        url: userUrl,\n        name: getUsernameFromUrl(userUrl),\n        // not all endpoints return user url in the v2 format, so as a fallback\n        // we also check plain old usernames\n        isOwner: (\n          userUrl === ownerUrl ||\n          getUsernameFromUrl(userUrl) === getUsernameFromUrl(ownerUrl)\n        ),\n      },\n      permissions: groupedData[userUrl],\n    });\n  });\n\n  return sortParseBackendOutput(output);\n}\n\n/**\n * Sort by abcs but keep the owner at the top.\n *\n * @param {UserWithPerms[]} output - Possibly unsorted.\n * @returns {UserWithPerms[]} - Definitely sorted.\n */\nfunction sortParseBackendOutput(output) {\n  return output.sort((a, b) => {\n    if (a.user.isOwner) {\n      return -1;\n    } else if (b.user.isOwner) {\n      return 1;\n    } else if (a.user.url < b.user.url) {\n      return -1;\n    } else if (a.user.url > b.user.url) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n}\n\nexport const permParser = {\n  parseFormData: parseFormData,\n  buildFormData: buildFormData,\n  parseBackendData: parseBackendData,\n  parseUserWithPermsList: parseUserWithPermsList,\n  sortParseBackendOutput: sortParseBackendOutput, // for testing purposes\n};\n","###\ndefaultSurveyDetails\n--------------------\nThese values will be populated in the form builder and the user\nwill have the option to turn them on or off.\n\nDetails pulled from ODK documents / google docs. Notably this one:\n  https://docs.google.com/spreadsheet/ccc?key=0AgpC5gsTSm_4dDRVOEprRkVuSFZUWTlvclJ6UFRvdFE#gid=0\n###\n\n_ = require 'underscore'\nBackbone = require 'backbone'\n$utils = require './model.utils'\n\nmodule.exports = do ->\n  configs = {}\n  configs.defaultSurveyDetails =\n    start_time:\n      name: \"start\"\n      label: \"start time\"\n      description: \"Records when the survey was begun\"\n      default: true\n    end_time:\n      name: \"end\"\n      label: \"end time\"\n      description: \"records when the survey was marked as completed\"\n      default: true\n    today:\n      name: \"today\"\n      label: \"today\"\n      description: \"includes today's date\"\n      default: false\n    username:\n      name: \"username\"\n      label: \"username\"\n      description: \"includes interviewer's username\"\n      default: false\n    simserial:\n      name: \"simserial\"\n      label: \"sim serial\"\n      description: \"records the serial number of the network sim card\"\n      default: false\n    subscriberid:\n      name: \"subscriberid\"\n      label: \"subscriber id\"\n      description: \"records the subscriber id of the sim card\"\n      default: false\n    deviceid:\n      name: \"deviceid\"\n      label: \"device id\"\n      aliases: [\"imei\"]\n      description: \"Records the internal device ID number (works on Android phones)\"\n      default: false\n    phoneNumber:\n      name: \"phonenumber\"\n      label: \"phone number\"\n      description: \"Records the device's phone number, when available\"\n      default: false\n    audit:\n      name: \"audit\"\n      label: \"audit\"\n      description: \"Records the behavior of enumerators as they navigate through a form\"\n      default: false\n    bg_aud:\n      name: \"background-audio\"\n      label: \"background audio\"\n      description: \"record bg audio\"\n      default: false\n\n  do ->\n    class SurveyDetailSchemaItem extends Backbone.Model\n      _forSurvey: ()->\n        name: @get(\"name\")\n        label: @get(\"label\")\n        description: @get(\"description\")\n\n    class configs.SurveyDetailSchema extends Backbone.Collection\n      model: SurveyDetailSchemaItem\n      typeList: ()->\n        unless @_typeList\n          @_typeList = (item.get(\"name\")  for item in @models)\n        @_typeList\n\n  configs.surveyDetailSchema = new configs.SurveyDetailSchema(_.values(configs.defaultSurveyDetails))\n\n  ###\n  Default values for rows of each question type\n  ###\n  configs.defaultsGeneral =\n    label:\n      value: 'New Question'\n  configs.defaultsForType =\n    geotrace:\n      label:\n        value: \"Record a line\"\n      required:\n        value: false\n        _hideUnlessChanged: true\n    geoshape:\n      label:\n        value: \"Record an area\"\n      required:\n        value: false\n        _hideUnlessChanged: true\n    geopoint:\n      label:\n        value: \"Record your current location\"\n      required:\n        value: false\n        _hideUnlessChanged: true\n    image:\n      label:\n        value: \"Point and shoot! Use the camera to take a photo\"\n    video:\n      label:\n        value: \"Use the camera to record a video\"\n    audio:\n      label:\n        value: \"Use the camera's microphone to record a sound\"\n    file:\n      label:\n        value: \"Upload a file\"\n    note:\n      label:\n        value: \"This note can be read out loud\"\n      required:\n        value: false\n        _hideUnlessChanged: true\n    integer:\n      label:\n        value: \"Enter a number\"\n    barcode:\n      label:\n        value: \"Use the camera to scan a barcode\"\n    decimal:\n      label:\n        value: \"Enter a number\"\n    date:\n      label:\n        value: \"Enter a date\"\n    range:\n      label:\n        value: \"Enter a number within a specified range\"\n    calculate:\n      calculation:\n        value: \"\"\n      label:\n        value: \"calculation\"\n      required:\n        value: false\n        _hideUnlessChanged: true\n    hidden:\n      label:\n        value: \"hidden\"\n      required:\n        value: false\n        _hideUnlessChanged: true\n    datetime:\n      label:\n        value: \"Enter a date and time\"\n    time:\n      label:\n        value: \"Enter a time\"\n    acknowledge:\n      label:\n        value: \"Acknowledge\"\n    'xml-external':\n      label:\n        value: \"File_name\"\n      required:\n        value: false\n        _hideUnlessChanged: true\n\n  configs.paramTypes = {\n    number: 'number',\n    boolean: 'boolean'\n  }\n\n  configs.questionParams = {\n    range: {\n      start: {\n        type: configs.paramTypes.number\n        defaultValue: 0\n      }\n      end: {\n        type: configs.paramTypes.number\n        defaultValue: 10\n      }\n      step: {\n        type: configs.paramTypes.number\n        defaultValue: 1\n      }\n    }\n    image: {\n      'max-pixels': {\n        type: configs.paramTypes.number\n        defaultValue: 1024\n      }\n    }\n    select_one: {\n      randomize: {\n        type: configs.paramTypes.boolean\n      }\n      seed: {\n        type: configs.paramTypes.number\n      }\n    }\n    select_multiple: {\n      randomize: {\n        type: configs.paramTypes.boolean\n      }\n      seed: {\n        type: configs.paramTypes.number\n      }\n    }\n  }\n\n  configs.columns = [\n    \"type\",\n    \"name\",\n    \"label\",\n    \"hint\",\n    \"guidance_hint\",\n    \"required\",\n    \"relevant\",\n    \"default\",\n    \"constraint\"\n  ]\n\n  configs.lookupRowType = do->\n    typeLabels = [\n      [\"note\", \"Note\", preventRequired: true],\n      [\"acknowledge\", \"Acknowledge\"],\n      [\"text\", \"Text\"], # expects text\n      [\"integer\", \"Integer\"], #e.g. 42\n      [\"decimal\", \"Decimal\"], #e.g. 3.14\n      [\"range\", \"Range\"], #e.g. 1-5\n      [\"geopoint\", \"Geopoint (GPS)\"], # Can use satelite GPS coordinates\n      [\"geotrace\", \"Geotrace (GPS)\"], # Can use satelite GPS coordinates\n      [\"geoshape\", \"Geoshape (GPS)\"], # Can use satelite GPS coordinates\n      [\"image\", \"Image\", isMedia: true], # Can use phone camera, for example\n      [\"barcode\", \"Barcode / QR code\"], # Can scan a barcode using the phone camera\n      [\"date\", \"Date\"], #e.g. (4 July, 1776)\n      [\"time\", \"Time\"], #e.g. (4 July, 1776)\n      [\"datetime\", \"Date and Time\"], #e.g. (2012-Jan-4 3:04PM)\n      [\"audio\", \"Audio\", isMedia: true], # Can use phone microphone to record audio\n      [\"video\", \"Video\", isMedia: true], # Can use phone camera to record video\n      [\"file\", \"File\"],\n      [\"calculate\", \"Calculate\"],\n      [\"hidden\", \"Hidden\"],\n      [\"select_one\", \"Select\", orOtherOption: true, specifyChoice: true],\n      [\"score\", \"Score\"],\n      [\"score__row\", \"Score Row\"],\n      [\"rank\", \"Rank\"],\n      [\"kobomatrix\", \"Advanced Matrix\"],\n      [\"rank__level\", \"Rank Level\"],\n      [\"select_multiple\", \"Multiple choice\", orOtherOption: true, specifyChoice: true]\n      [\"xml-external\", \"External XML\"],\n    ]\n\n    class Type\n      constructor: ([@name, @label, opts])->\n        opts = {}  unless opts\n        _.extend(@, opts)\n\n    types = (new Type(arr) for arr in typeLabels)\n\n    exp = (typeId)->\n      for tp in types when tp.name is typeId\n        output = tp\n      output\n\n    exp.typeSelectList = do ->\n      () -> types\n\n    exp\n\n  configs.autoset_kuid = true\n\n  configs.columnOrder = do ->\n    (key)->\n      if -1 is configs.columns.indexOf key\n        configs.columns.push(key)\n      configs.columns.indexOf key\n\n  configs.newRowDetails =\n    name:\n      value: \"\"\n    type:\n      value: \"text\"\n    hint:\n      value: \"\"\n      _hideUnlessChanged: true\n    guidance_hint:\n      value: \"\"\n    required:\n      value: false\n      _hideUnlessChanged: true\n    relevant:\n      value: \"\"\n      _hideUnlessChanged: true\n    default:\n      value: \"\"\n      _hideUnlessChanged: true\n    constraint:\n      value: \"\"\n      _hideUnlessChanged: true\n    constraint_message:\n      value: \"\"\n      _hideUnlessChanged: true\n    tags:\n      value: ''\n      _hideUnlessChanged: true\n    appearance:\n      value: ''\n      _hideUnlessChanged: true\n\n  configs.newGroupDetails =\n    name:\n      value: ->\n        \"group_#{$utils.txtid()}\"\n    label:\n      value: \"Group\"\n    type:\n      value: \"group\"\n    _isRepeat:\n      value: false\n    relevant:\n      value: \"\"\n      _hideUnlessChanged: true\n    appearance:\n      value: ''\n      _hideUnlessChanged: true\n\n\n  configs.question_types = {}\n\n  ###\n  String representations of boolean values which are accepted as true from the XLSForm.\n  ###\n\n  configs.truthyValues = [\n    \"yes\",\n    \"YES\",\n    \"true\",\n    \"true()\",\n    \"TRUE\",\n  ]\n  configs.falsyValues = [\n    \"no\",\n    \"NO\",\n    \"false\",\n    \"false()\",\n    \"FALSE\",\n  ]\n\n  # Alternative: XLF.configs.boolOutputs = {\"true\": \"yes\", \"false\": \"no\"}\n  configs.boolOutputs = {\"true\": \"true\", \"false\": \"false\"}\n\n  configs\n","/**\n * Reflux stores for keeping all the user data.\n *\n * Using it in multiple components helps with keeping whole application up to\n * date and avoids making unnecessary calls to Backend.\n *\n * It is tightly connected to actions and the most kosher way of handling data\n * would be to trigger Backend calls through actions but to observe the results\n * throught stores not actions callbacks (for applicable stores of course - not\n * every action is connected to a store).\n *\n * TODO: it would be best to split these to separate files within `jsapp/js/stores`\n * directory and probably import all of them here and keep this file as a single\n * source for all stores(?).\n */\n\nimport Reflux from 'reflux';\nimport {Cookies} from 'react-cookie';\nimport {parsed, parseTags} from './assetParserUtils';\nimport {actions} from './actions';\nimport {\n  log,\n  notify,\n  assign,\n} from 'utils';\nimport {ANON_USERNAME} from 'js/constants';\n\nconst cookies = new Cookies();\n\nfunction changes(orig_obj, new_obj) {\n  var out = {},\n      any = false;\n  Object.keys(new_obj).forEach(function(key) {\n    if (orig_obj[key] !== new_obj[key]) {\n      out[key] = new_obj[key];\n      any = true;\n    }\n  });\n  if (!any) {\n    return false;\n  }\n  return out;\n}\n\nexport var stores = {};\n\nstores.tags = Reflux.createStore({\n  init () {\n    this.queries = {};\n    this.listenTo(actions.resources.listTags.completed, this.listTagsCompleted);\n  },\n  listTagsCompleted (data) {\n    this.trigger(data.results);\n  }\n});\n\nconst MAX_SEARCH_AGE = (5 * 60); // seconds\n\nstores.surveyState = Reflux.createStore({\n  init () {\n    this.state = {};\n  },\n  setState (state) {\n    var chz = changes(this.state, state);\n    if (chz) {\n      assign(this.state, state);\n      this.trigger(chz);\n    }\n  },\n});\n\nstores.assetSearch = Reflux.createStore({\n  init () {\n    this.queries = {};\n    this.listenTo(actions.search.assets.completed, this.onSearchAssetsCompleted);\n  },\n  getRecentSearch (queryString) {\n    if (queryString in this.queries) {\n      var age = new Date().getTime() - this.queries[queryString][1].getTime();\n      if (age < MAX_SEARCH_AGE * 1000) {\n        return this.queries[queryString][0];\n      }\n    }\n    return false;\n  },\n  onSearchAssetsCompleted (searchData, response) {\n    response.query = searchData.q;\n    this.queries[searchData.q] = [response, new Date()];\n    if(response.count > 0) {\n      this.trigger(response);\n    }\n  }\n});\n\nstores.translations = Reflux.createStore({\n  init() {\n    this.state = {\n      isTranslationTableUnsaved: false\n    }\n  },\n  setState (change) {\n    const changed = changes(this.state, change);\n    if (changed) {\n      assign(this.state, changed);\n      this.trigger(changed);\n    }\n  },\n  setTranslationTableUnsaved (isUnsaved) {\n    this.setState({\n      isTranslationTableUnsaved: isUnsaved\n    });\n  },\n});\n\nstores.pageState = Reflux.createStore({\n  init () {\n    this.state = {\n      assetNavExpanded: false,\n      showFixedDrawer: false\n    };\n  },\n  setState (chz) {\n    var changed = changes(this.state, chz);\n    if (changed) {\n      assign(this.state, changed);\n      this.trigger(changed);\n    }\n  },\n  toggleFixedDrawer () {\n    var _changes = {};\n    var newval = !this.state.showFixedDrawer;\n    _changes.showFixedDrawer = newval;\n    assign(this.state, _changes);\n    this.trigger(_changes);\n  },\n  showModal (params) {\n    this.setState({\n      modal: params\n    });\n  },\n  hideModal () {\n    if (this._onHideModal) {\n      this._onHideModal();\n    }\n    this.setState({\n      modal: false\n    });\n  },\n  // use it when you have one modal opened and want to display different one\n  // because just calling showModal has weird outcome\n  switchModal (params) {\n    this.hideModal();\n    // HACK switch to setState callback after updating to React 16+\n    window.setTimeout(() => {\n      this.showModal(params);\n    }, 0);\n  },\n  switchToPreviousModal() {\n    this.switchModal({\n      type: this.state.modal.previousType\n    });\n  },\n  hasPreviousModal() {\n    return this.state.modal && this.state.modal.previousType;\n  }\n});\n\nstores.snapshots = Reflux.createStore({\n  init () {\n    this.listenTo(actions.resources.createSnapshot.completed, this.snapshotCreated);\n    this.listenTo(actions.resources.createSnapshot.failed, this.snapshotCreationFailed);\n  },\n  snapshotCreated (snapshot) {\n    this.trigger(assign({success: true}, snapshot));\n  },\n  snapshotCreationFailed (jqxhr) {\n    this.trigger(assign({success: false}, jqxhr.responseJSON));\n  },\n});\n\nstores.session = Reflux.createStore({\n  // start up with \"fake\" current account\n  currentAccount: {\n    username: ANON_USERNAME,\n  },\n  isAuthStateKnown: false,\n  isLoggedIn: false,\n\n  init() {\n    actions.misc.updateProfile.completed.listen(this.onUpdateProfileCompleted);\n    this.listenTo(actions.auth.verifyLogin.loggedin, this.onLoggedIn);\n    this.listenTo(actions.auth.verifyLogin.anonymous, this.onNotLoggedIn);\n    this.listenTo(actions.auth.verifyLogin.failed, this.onVerifyLoginFailed);\n    actions.auth.verifyLogin();\n  },\n\n  onUpdateProfileCompleted(response) {\n    this.currentAccount = response;\n    this.trigger({currentAccount: this.currentAccount});\n  },\n\n  onLoggedIn(account) {\n    this.isAuthStateKnown = true;\n    this.isLoggedIn = true;\n    this.currentAccount = account;\n    this.trigger();\n  },\n\n  onNotLoggedIn(data) {\n    log('login confirmed anonymous', data.message);\n    this.isAuthStateKnown = true;\n    this.trigger();\n  },\n\n  onVerifyLoginFailed(xhr) {\n    log('login not verified', xhr.status, xhr.statusText);\n  },\n});\n\n/**\n * NOTE: this is not a reliable source of complete assets (i.e. ones with\n * `content`) as `onListAssetsCompleted` will overwrite asset-with-content with\n * one without it.\n */\nstores.allAssets = Reflux.createStore({\n  init() {\n    this.data = [];\n    this.byUid = {};\n    this._waitingOn = {};\n\n    this.listenTo(actions.search.assets.completed, this.onListAssetsCompleted);\n    this.listenTo(actions.search.assets.failed, this.onListAssetsFailed);\n    this.listenTo(actions.resources.updateAsset.completed, this.onUpdateAssetCompleted);\n    this.listenTo(actions.resources.deleteAsset.completed, this.onDeleteAssetCompleted);\n    this.listenTo(actions.resources.cloneAsset.completed, this.onCloneAssetCompleted);\n    this.listenTo(actions.resources.loadAsset.completed, this.onLoadAssetCompleted);\n    this.listenTo(actions.permissions.removeAssetPermission.completed, this.onDeletePermissionCompleted);\n  },\n  /**\n   * Either calls immediately if data already exists, or makes a call to get\n   * asset and then calls.\n   *\n   * @param {string} uid\n   * @param {function} cb\n   */\n  whenLoaded(uid, cb) {\n    if (typeof uid !== 'string' || typeof cb !== 'function') {\n      return;\n    }\n\n    if (this.byUid[uid] && this.byUid[uid].content) {\n      cb.call(this, this.byUid[uid]);\n    } else {\n      if (!this._waitingOn[uid]) {\n        this._waitingOn[uid] = [];\n      }\n      this._waitingOn[uid].push(cb);\n      actions.resources.loadAsset({id: uid});\n    }\n  },\n\n  /**\n   * @param {string} assetUid\n   * @returns {object|undefined}\n   */\n  getAsset(assetUid) {\n    return this.byUid[assetUid];\n  },\n\n  onUpdateAssetCompleted (asset) {\n    this.registerAsset(asset);\n    this.data.forEach((dataAsset, index) => {\n      if (dataAsset.uid === asset.uid) {\n        this.data[index] = asset;\n      }\n    });\n  },\n  onLoadAssetCompleted (asset) {\n    this.registerAsset(asset);\n  },\n  onCloneAssetCompleted (asset) {\n    this.registerAsset(asset);\n    this.byUid[asset.uid] = asset;\n    this.data.unshift(asset);\n    this.trigger(this.data);\n  },\n  onDeleteAssetCompleted (asset) {\n    if (this.byUid[asset.uid]) {\n      // We append `deleted: true` to the asset after the asset is removed in\n      // the backend because the asset still exists in the frontend,\n      // specifically in the search store's lists.\n      // We do this so that the deleted asset doesn't show up in the asset list\n      // during the same search store instance\n      this.byUid[asset.uid].deleted = 'true';\n      this.trigger(this.data);\n      window.setTimeout(()=> {\n        this.data = this.data.filter(function(item){\n          return item.uid !== asset.uid;\n        });\n        this.trigger(this.data);\n      }, 500);\n    }\n  },\n  onDeletePermissionCompleted (assetUid, isNonOwner) {\n    // When non owner self removes all his asset permissions, it's as if the\n    // asset was deleted for them\n    if (isNonOwner) {\n      this.onDeleteAssetCompleted({uid: assetUid});\n    }\n  },\n  registerAsset (asset) {\n    const parsedObj = parseTags(asset);\n    asset.tags = parsedObj.tags;\n    this.byUid[asset.uid] = asset;\n    if (asset.content) {\n      this.callCallbacks(asset);\n    }\n  },\n  callCallbacks (asset) {\n    if (this._waitingOn[asset.uid]) {\n      while (this._waitingOn[asset.uid].length > 0) {\n        var cb = this._waitingOn[asset.uid].pop();\n        cb.call(this, asset);\n      }\n    }\n  },\n  onListAssetsCompleted: function(searchData, response) {\n    response.results.forEach(this.registerAsset);\n    this.data = response.results;\n    this.trigger(this.data);\n  },\n  onListAssetsFailed: function (searchData, response) {\n    notify(response?.responseJSON?.detail || t('failed to list assets'));\n  }\n});\n\nstores.selectedAsset = Reflux.createStore({\n  init () {\n    this.uid = cookies.get('selectedAssetUid');\n    this.listenTo(actions.resources.cloneAsset.completed, this.onCloneAssetCompleted);\n  },\n  onCloneAssetCompleted (asset) {\n    this.uid = asset.uid;\n    this.asset = stores.allAssets.byUid[asset.uid];\n    if (!this.asset) {\n      console.error('selectedAssetStore error');\n    }\n    this.trigger(this.asset);\n  },\n  toggleSelect (uid, forceSelect=false) {\n    if (forceSelect || this.uid !== uid) {\n      this.uid = uid;\n      this.asset = stores.allAssets.byUid[uid];\n    } else {\n      this.uid = false;\n      this.asset = {};\n    }\n    cookies.set('selectedAssetUid', this.uid);\n    this.trigger({\n      selectedAssetUid: this.uid,\n    });\n    return this.uid !== false;\n  }\n});\n\nstores.userExists = Reflux.createStore({\n  init () {\n    this.checked = {};\n    this.listenTo(actions.misc.checkUsername.completed, this.usernameExists);\n    this.listenTo(actions.misc.checkUsername.failed, this.usernameDoesntExist);\n  },\n  checkUsername (username) {\n    if (username in this.checked) {\n      return this.checked[username];\n    }\n  },\n  usernameExists (username) {\n    this.checked[username] = true;\n    this.trigger(this.checked, username);\n  },\n  usernameDoesntExist (username) {\n    this.checked[username] = false;\n    this.trigger(this.checked, username);\n  }\n});\n","import {\n  getRowName,\n  getTranslatedRowLabel,\n  getSurveyFlatPaths,\n  isRowSpecialLabelHolder,\n} from 'js/assetUtils';\nimport {\n  createEnum,\n  SCORE_ROW_TYPE,\n  RANK_LEVEL_TYPE,\n  MATRIX_PAIR_PROPS,\n  GROUP_TYPES_BEGIN,\n  QUESTION_TYPES,\n  CHOICE_LISTS,\n  AnyRowTypeName,\n} from 'js/constants';\n\nenum DisplayGroupTypeName {\n  group_root = 'group_root',\n  group_repeat = 'group_repeat',\n  group_regular = 'group_regular',\n  group_matrix = 'group_matrix',\n  group_matrix_row = 'group_matrix_row',\n}\n\nexport const DISPLAY_GROUP_TYPES = createEnum([\n  DisplayGroupTypeName.group_root,\n  DisplayGroupTypeName.group_repeat,\n  DisplayGroupTypeName.group_regular,\n  DisplayGroupTypeName.group_matrix,\n  DisplayGroupTypeName.group_matrix_row,\n]) as {[P in DisplayGroupTypeName]: DisplayGroupTypeName};;\n\nclass DisplayGroup {\n  public type: DisplayGroupTypeName;\n  /** Localized display label */\n  public label: string | null = null;\n  /** Unique identifier */\n  public name: string | null = null;\n  /** List of groups and responses */\n  public children: Array<DisplayResponse|DisplayGroup> = [];\n\n  constructor(\n    type: DisplayGroupTypeName,\n    label?: string | null,\n    name?: string | null\n  ) {\n    this.type = type;\n    if (label) {\n      this.label = label;\n    }\n    if (name) {\n      this.name = name;\n    }\n  }\n\n  addChild(child: DisplayResponse|DisplayGroup) {\n    this.children.push(child);\n  }\n}\n\n/**\n * @typedef {Object} DisplayResponse\n * @property {string} type - One of QUESTION_TYPES\n * @property {string} label - Localized display label\n * @property {string} name - Unique identifier\n * @property {string|undefined} listName - Unique identifier of a choices list,\n *                                         only applicable for question types\n *                                         that uses choices lists\n * @property {string|null} data - User response, `null` for no response\n */\nclass DisplayResponse {\n  public type: AnyRowTypeName;\n  /** Localized display label */\n  public label: string | null;\n  /** Unique identifier */\n  public name: string;\n  /**\n   * Unique identifier of a choices list, only applicable for question types\n   * that uses choices lists.\n   */\n  public listName: string | undefined;\n  /** User response, `null` for no response */\n  public data: string | null = null;\n\n  constructor(\n    type: AnyRowTypeName,\n    label: string | null,\n    name: string,\n    listName: string | undefined,\n    data?: string | null\n  ) {\n    this.type = type;\n    this.label = label;\n    this.name = name;\n    if (data) {\n      this.data = data;\n    }\n    if (listName) {\n      this.listName = listName;\n    }\n  }\n}\n\n/**\n * Returns a root group with everything inside\n */\nexport function getSubmissionDisplayData(\n  survey: SurveyRow[],\n  choices: SurveyChoice[],\n  /** for choosing label to display */\n  translationIndex: number,\n  submissionData: SubmissionResponse\n) {\n  const flatPaths = getSurveyFlatPaths(survey, true);\n\n  // let's start with a root of survey being a group with special flag\n  const output = new DisplayGroup(DISPLAY_GROUP_TYPES.group_root);\n\n  /**\n   * Recursively generates a nested architecture of survey with data.\n   */\n  function traverseSurvey(\n    /** Rows and groups will be added to it as children. */\n    parentGroup: DisplayGroup,\n    /** The submissionData scoped by parent (useful for repeat groups). */\n    parentData: SubmissionResponse,\n    /** Inside a repeat group this is the current repeat submission index. */\n    repeatIndex: number | null = null\n  ) {\n    for (let rowIndex = 0; rowIndex < survey.length; rowIndex++) {\n      const row = survey[rowIndex];\n\n      const rowName = getRowName(row);\n      let rowListName = getRowListName(row);\n      const rowLabel = getTranslatedRowLabel(rowName, survey, translationIndex);\n\n      let parentGroupPath = null;\n      if (parentGroup.name !== null) {\n        parentGroupPath = flatPaths[parentGroup.name];\n      }\n\n      let isRowCurrentLevel = isRowFromCurrentGroupLevel(\n        rowName,\n        parentGroupPath,\n        survey\n      );\n\n      // we are interested only in questions from this group level\n      if (!isRowCurrentLevel) {\n        continue;\n      }\n      // let's hide rows that don't carry any submission data\n      if (\n        row.type === QUESTION_TYPES.note.id ||\n        row.type === QUESTION_TYPES.hidden.id\n      ) {\n        continue;\n      }\n      /*\n       * For a complex form items (e.g. rating) Backend constructs a pair of\n       * group and a row. The row serves a purpose of a label and we don't want\n       * it here as `getTranslatedRowLabel` handles this already. We check\n       * previous row.\n       */\n      if (isRowSpecialLabelHolder(survey[rowIndex - 1], row)) {\n        continue;\n      }\n\n      let rowData = getRowData(rowName, survey, parentData);\n\n      if (row.type === GROUP_TYPES_BEGIN.begin_repeat) {\n        if (Array.isArray(rowData)) {\n          rowData.forEach((item, itemIndex) => {\n            let itemObj = new DisplayGroup(\n              DISPLAY_GROUP_TYPES.group_repeat,\n              rowLabel,\n              rowName\n            );\n            parentGroup.addChild(itemObj);\n            /*\n             * Start whole process again starting at this place in survey,\n             * with current group as parent element and new repeat index\n             * being used.\n             */\n            traverseSurvey(itemObj, item, itemIndex);\n          });\n        }\n      } else if (row.type === GROUP_TYPES_BEGIN.begin_kobomatrix) {\n        let matrixGroupObj = new DisplayGroup(\n          DISPLAY_GROUP_TYPES.group_matrix,\n          rowLabel,\n          rowName,\n        );\n        parentGroup.addChild(matrixGroupObj);\n\n        if (Array.isArray(choices)) {\n          /*\n           * For matrixes we generate a group of subgroups - each subgroup\n           * corresponds to a matrix item from choices.\n           */\n          choices.forEach((item) => {\n            if (\n              item[MATRIX_PAIR_PROPS.inChoices as keyof SurveyChoice] ===\n              row[MATRIX_PAIR_PROPS.inSurvey as keyof SurveyRow]\n            ) {\n              // Matrix is only one level deep, so we can use a \"simpler\"\n              // non-recursive special function\n              populateMatrixData(\n                survey,\n                choices,\n                submissionData,\n                translationIndex,\n                matrixGroupObj,\n                getRowName(item),\n                parentData\n              );\n            }\n          });\n        }\n      } else if (\n        row.type === GROUP_TYPES_BEGIN.begin_group ||\n        row.type === GROUP_TYPES_BEGIN.begin_score ||\n        row.type === GROUP_TYPES_BEGIN.begin_rank\n      ) {\n        let rowObj = new DisplayGroup(\n          DISPLAY_GROUP_TYPES.group_regular,\n          rowLabel,\n          rowName,\n        );\n        parentGroup.addChild(rowObj);\n        /*\n         * Start whole process again starting at this place in survey,\n         * with current group as parent element and pass current repeat index.\n         */\n        traverseSurvey(rowObj, rowData, repeatIndex);\n      } else if (\n        Object.keys(QUESTION_TYPES).includes(row.type) ||\n        row.type === SCORE_ROW_TYPE ||\n        row.type === RANK_LEVEL_TYPE\n      ) {\n        // for repeat groups, we are interested in current repeat item's data\n        if (Array.isArray(rowData) && repeatIndex !== null) {\n          rowData = rowData[repeatIndex];\n        }\n\n        // score and rank don't have list name on them and they need to use\n        // the one of their parent\n        if (row.type === SCORE_ROW_TYPE || row.type === RANK_LEVEL_TYPE) {\n          const parentGroupRow = survey.find((row) =>\n            getRowName(row) === parentGroup.name\n          );\n          rowListName = getRowListName(parentGroupRow);\n        }\n\n        let rowObj = new DisplayResponse(\n          row.type,\n          rowLabel,\n          rowName,\n          rowListName,\n          rowData\n        );\n        parentGroup.addChild(rowObj);\n      }\n    }\n  }\n  traverseSurvey(output, submissionData);\n\n  return output;\n}\n\n/**\n * It creates display data structure for a given choice-row of a Matrix.\n * As the data is bit different from all other question types, we need to use\n * a special function, not a great traverseSurvey one.\n */\nfunction populateMatrixData(\n  survey: SurveyRow[],\n  choices: SurveyChoice[],\n  submissionData: SubmissionResponse,\n  translationIndex: number,\n  /** A group you want to add a row of questions to. */\n  matrixGroup: DisplayGroup,\n  /** The row name. */\n  matrixRowName: string,\n  /** The submissionData scoped by parent (useful for repeat groups). */\n  parentData: SubmissionResponse\n) {\n  // This should not happen, as the only DisplayGroup with null name will be of\n  // the group_root type, but we need this for the types.\n  if (matrixGroup.name === null) {\n    return\n  }\n\n  // create row display group and add it to matrix group\n  const matrixRowLabel = getTranslatedRowLabel(matrixRowName, choices, translationIndex);\n  let matrixRowGroupObj = new DisplayGroup(\n    DISPLAY_GROUP_TYPES.group_matrix_row,\n    matrixRowLabel,\n    matrixRowName,\n  );\n  matrixGroup.addChild(matrixRowGroupObj);\n\n  const flatPaths = getSurveyFlatPaths(survey, true);\n  const matrixGroupPath = flatPaths[matrixGroup.name];\n\n  /*\n   * Iterate over survey rows to find only ones from inside the matrix.\n   * These rows are the questions from the target matrix choice-row, so we find\n   * all neccessary pieces of data nd build display data structure for it.\n   */\n  Object.keys(flatPaths).forEach((questionName) => {\n    if (flatPaths[questionName].startsWith(`${matrixGroupPath}/`)) {\n      const questionSurveyObj = survey.find((row) =>\n        getRowName(row) === questionName\n      );\n      // We are only interested in going further if object was found.\n      if (typeof questionSurveyObj === 'undefined') {\n        return;\n      }\n\n      /*\n       * NOTE: Submission data for a Matrix question is kept in an unusal\n       * property, so instead of:\n       * [PATH/]MATRIX/MATRIX_QUESTION\n       * it is stored in:\n       * [PATH/]MATRIX_CHOICE/MATRIX_CHOICE_QUESTION\n       */\n      let questionData = null;\n      const dataProp = `${matrixGroupPath}_${matrixRowName}/${matrixGroup.name}_${matrixRowName}_${questionName}`;\n      if (submissionData[dataProp]) {\n        questionData = submissionData[dataProp];\n      } else if (parentData[dataProp]) {\n        /*\n         * If Matrix question is inside a repeat group, the data is stored\n         * elsewhere :tableflip:\n         */\n        questionData = parentData[dataProp];\n      }\n\n      let questionObj = new DisplayResponse(\n        questionSurveyObj.type,\n        getTranslatedRowLabel(questionName, survey, translationIndex),\n        questionName,\n        getRowListName(questionSurveyObj),\n        questionData\n      );\n      matrixRowGroupObj.addChild(questionObj);\n    }\n  });\n}\n\n/**\n * Returns data for given row, works for groups too. Returns `null` for no\n * answer, array for repeat groups and object for regular groups\n */\nfunction getRowData(\n  name: string,\n  survey: SurveyRow[],\n  data: SubmissionResponse\n) {\n  if (data === null || typeof data !== 'object') {\n    return null;\n  }\n\n  const flatPaths = getSurveyFlatPaths(survey, true);\n  const path = flatPaths[name];\n\n  if (data[path]) {\n    return data[path];\n  } else if (data[name]) {\n    return data[name];\n  } else if (path) {\n    // we don't really know here if this is a repeat or a regular group\n    // so we let the data be the guide (possibly not trustworthy)\n    const repeatRowData = getRepeatGroupAnswers(data, path);\n    if (repeatRowData.length >= 1) {\n      return repeatRowData;\n    }\n\n    const rowData = getRegularGroupAnswers(data, path);\n    if (Object.keys(rowData).length >= 1) {\n      return rowData;\n    }\n  }\n  return null;\n}\n\n/**\n * Tells if given row is an immediate child of given group\n */\nfunction isRowFromCurrentGroupLevel(\n  rowName: string,\n  /** Null for root level rows. */\n  groupPath: string|null,\n  survey: SurveyRow[]\n) {\n  const flatPaths = getSurveyFlatPaths(survey, true);\n  if (groupPath === null) {\n    return flatPaths[rowName] === rowName;\n  } else {\n    return flatPaths[rowName] === `${groupPath}/${rowName}`;\n  }\n}\n\n/**\n * Returns an array of answers\n */\nexport function getRepeatGroupAnswers(\n  data: SubmissionResponse,\n  /** With groups e.g. group_person/group_pets/group_pet/pet_name. */\n  targetKey: string\n) {\n  const answers: string[] = [];\n\n  // Goes through nested groups from key, looking for answers.\n  const lookForAnswers = (data: SubmissionResponse, levelIndex: number) => {\n    const levelKey = targetKey.split('/').slice(0, levelIndex + 1).join('/');\n    // Each level could be an array of repeat group answers or object with questions.\n    if (levelKey === targetKey) {\n      if (Object.prototype.hasOwnProperty.call(data, targetKey)) {\n        answers.push(data[targetKey]);\n      }\n    } else if (Array.isArray(data[levelKey])) {\n      data[levelKey].forEach((item: SubmissionResponse) => {\n        lookForAnswers(item, levelIndex + 1);\n      });\n    }\n  };\n\n  lookForAnswers(data, 0);\n\n  return answers;\n}\n\n/**\n * Filters data for items inside the group\n */\nfunction getRegularGroupAnswers(\n  data: SubmissionResponse,\n  /** With groups e.g. group_person/group_pets/group_pet. */\n  targetKey: string\n) {\n  const answers: {[questionName: string]: any} = {};\n  Object.keys(data).forEach((objKey) => {\n    if (objKey.startsWith(`${targetKey}/`)) {\n      answers[objKey] = data[objKey];\n    }\n  });\n  return answers;\n}\n\nfunction getRowListName(row: SurveyRow | undefined): string | undefined {\n  let returnVal;\n  if (row && Object.keys(row).includes(CHOICE_LISTS.SELECT)) {\n    returnVal = row[CHOICE_LISTS.SELECT as keyof SurveyRow];\n  }\n  if (row && Object.keys(row).includes(CHOICE_LISTS.MATRIX)) {\n    returnVal = row[CHOICE_LISTS.MATRIX as keyof SurveyRow];\n  }\n  if (row && Object.keys(row).includes(CHOICE_LISTS.SCORE)) {\n    returnVal = row[CHOICE_LISTS.SCORE as keyof SurveyRow];\n  }\n  if (row && Object.keys(row).includes(CHOICE_LISTS.RANK)) {\n    returnVal = row[CHOICE_LISTS.RANK as keyof SurveyRow];\n  }\n  if (typeof returnVal === 'string') {\n    return returnVal;\n  }\n  return undefined;\n}\n\n/**\n * Returns an attachment object or an error message.\n */\nexport function getMediaAttachment(\n  submission: SubmissionResponse,\n  fileName: string\n): string | SubmissionAttachment {\n  const fileNameNoSpaces = fileName.replace(/ /g, '_');\n  let mediaAttachment: string | SubmissionAttachment = t('Could not find ##fileName##').replace(\n    '##fileName##',\n    fileName,\n  );\n\n  submission._attachments.forEach((attachment) => {\n    if (attachment.filename.includes(fileNameNoSpaces)) {\n      mediaAttachment = attachment;\n    }\n  });\n\n  return mediaAttachment;\n}\n\nexport default {\n  DISPLAY_GROUP_TYPES,\n  getSubmissionDisplayData,\n  getRepeatGroupAnswers,\n};\n","_ = require 'underscore'\nBackbone = require 'backbone'\n$skipLogicParser = require './model.skipLogicParser'\n\nmodule.exports = do ->\n  skipLogicHelpers = {}\n\n  ###----------------------------------------------------------------------------------------------------------###\n  #-- Factories.RowDetail.SkipLogic.coffee\n  ###----------------------------------------------------------------------------------------------------------###\n\n  class skipLogicHelpers.SkipLogicHelperFactory\n    constructor: (@model_factory, @view_factory, @survey, @current_question, @serialized_criteria) ->\n    create_presenter: (criterion_model, criterion_view) ->\n      return new skipLogicHelpers.SkipLogicPresenter criterion_model, criterion_view, @current_question, @survey, @view_factory\n    create_builder: () ->\n      return new skipLogicHelpers.SkipLogicBuilder @model_factory, @view_factory, @survey, @current_question, @\n    create_context: () ->\n      return new skipLogicHelpers.SkipLogicHelperContext @model_factory, @view_factory, @, @serialized_criteria\n\n  ###----------------------------------------------------------------------------------------------------------###\n  #-- Facades.RowDetail.coffee\n  ###----------------------------------------------------------------------------------------------------------###\n\n  class skipLogicHelpers.SkipLogicPresentationFacade\n    constructor: (@model_factory, @helper_factory, @view_factory) ->\n    initialize: () ->\n      @context ?= @helper_factory.create_context()\n    serialize: () ->\n      @context ?= @helper_factory.create_context()\n      return @context.serialize()\n    render: (target) ->\n      @context ?= @helper_factory.create_context()\n      @context.render target\n\n  ###----------------------------------------------------------------------------------------------------------###\n  #-- Presentation.RowDetail.SkipLogic.Presenter.coffee\n  ###----------------------------------------------------------------------------------------------------------###\n\n  class skipLogicHelpers.SkipLogicPresenter\n    constructor: (@model, @view, @current_question, @survey, @view_factory) ->\n      @view.presenter = @\n      if @survey\n        update_choice_list = (choicelist_cid) =>\n          question = @model._get_question()\n\n          if question && question._isSelectQuestion() && question.getList().cid == choicelist_cid\n\n            current_response_value = @model.get('response_value').get('cid')\n\n            if !question.getList().options.get current_response_value\n              @dispatcher.trigger 'remove:presenter', @model.cid\n            else\n              options = _.map question.getList().options.models, (response) ->\n                text: response.get('label')\n                value: response.cid\n\n              response_picker_model = @view.response_value_view.options\n\n              response_picker_model.set 'options', options\n              @view.response_value_view.val(current_response_value)\n              @view.response_value_view.$el.trigger('change')\n              @model.change_response current_response_value\n\n        @survey.on 'choice-list-update', update_choice_list, @\n\n        @survey.on 'remove-option', update_choice_list, @\n\n        @survey.on 'row-detail-change', (row, key) =>\n          if @destination\n            if key == 'label'\n              @render(@destination)\n        , @\n      else\n        console.error \"this.survey is not yet available\"\n\n    change_question: (question_name) ->\n      @model.change_question question_name\n\n      @question = @model._get_question()\n      question_type = @question.get_type()\n      @question.on 'remove', () =>\n        @dispatcher.trigger 'remove:presenter', @model.cid\n\n      @view.change_operator @view_factory.create_operator_picker question_type\n      @view.operator_picker_view.val @model.get('operator').get_value()\n      @view.attach_operator()\n\n      @change_response_view question_type, @model.get('operator').get_type()\n\n      @finish_changing()\n\n    change_operator: (operator_id) ->\n      @model.change_operator operator_id\n\n      @change_response_view @model._get_question().get_type(), @model.get('operator').get_type()\n\n      @finish_changing()\n\n    change_response: (response_text) ->\n      @model.change_response response_text\n      @finish_changing()\n\n    change_response_view: (question_type, operator_type) ->\n      response_view = @view_factory.create_response_value_view @model._get_question(), question_type, operator_type\n      response_view.model = @model.get 'response_value'\n\n      @view.change_response response_view\n      @view.attach_response()\n\n      response_value = response_view.model.get('value')\n\n      question = @model._get_question()\n      if (question._isSelectQuestion())\n        rV = _.find(question.getList().options.models, (option) ->\n          option.get('name') == response_value)\n        if (rV && rV.cid)\n          response_value = rV.cid\n\n      @view.response_value_view.val response_value\n      response_view.$el.trigger('change')\n\n\n    finish_changing: () ->\n      @dispatcher.trigger 'changed:model', @\n\n    is_valid: () ->\n      if !@model._get_question()\n        return false\n      else if @model.get('operator').get_type().id == 1\n        return true\n      else if @model.get('response_value').get('value')  in ['', undefined] || @model.get('response_value').isValid() == false\n        return false\n      else\n        return true\n\n    render: (@destination) ->\n      @view.question_picker_view.detach()\n      @view.question_picker_view = @view_factory.create_question_picker @current_question\n      @view.render()\n      @view.question_picker_view.val @model.get('question_cid')\n      @view.operator_picker_view.val @model.get('operator').get_value()\n      response_value = @model.get('response_value')?.get('value')\n\n      question = @model._get_question()\n      if (question && question._isSelectQuestion())\n        response_value = _.find(question.getList().options.models, (option) ->\n          option.get('name') == response_value)?.cid\n      @view.response_value_view.val response_value\n      @view.attach_to @destination\n      @dispatcher.trigger 'rendered', @\n\n    serialize: () ->\n      @model.serialize()\n\n  class skipLogicHelpers.SkipLogicBuilder\n    constructor: (@model_factory, @view_factory, @survey, @current_question, @helper_factory) -> return\n    build_criterion_builder: (serialized_criteria) ->\n      if serialized_criteria == ''\n        return [[@build_empty_criterion()], 'and']\n\n      try\n        parsed = @_parse_skip_logic_criteria serialized_criteria\n\n        criteria = _.filter(_.map(parsed.criteria, (criterion) =>\n            @criterion = criterion\n            @build_criterion()\n          )\n        , (item) -> !!item)\n        if criteria.length == 0\n          criteria.push @build_empty_criterion()\n\n      catch e\n        Raven?.captureException new Error('could not parse skip logic. falling back to hand-coded'), extra:\n          criteria: serialized_criteria\n        return false\n      return [criteria, parsed.operator]\n\n    _parse_skip_logic_criteria: (criteria) ->\n      return $skipLogicParser criteria\n\n    build_operator_logic: (question_type) =>\n      return [\n        @build_operator_model(question_type, @_operator_type().symbol[@criterion.operator]),\n        @view_factory.create_operator_picker question_type\n      ]\n\n    build_operator_model: (question_type, symbol) ->\n      operator_type = @_operator_type()\n      return @model_factory.create_operator(\n        (if operator_type.type == 'existence' then 'existence' else question_type.equality_operator_type),\n        symbol,\n        operator_type.id)\n\n    _operator_type: () ->\n      return _.find skipLogicHelpers.operator_types, (op_type) =>\n          @criterion?.operator in op_type.parser_name\n\n    build_criterion_logic: (operator_model, operator_picker_view, response_value_view) ->\n      criterion_model = @model_factory.create_criterion_model()\n      criterion_model.set('operator', operator_model)\n\n      criterion_view = @view_factory.create_criterion_view(\n        @view_factory.create_question_picker(@current_question),\n        operator_picker_view,\n        response_value_view\n      )\n      criterion_view.model = criterion_model\n      return @helper_factory.create_presenter criterion_model, criterion_view\n\n    build_criterion: () =>\n      question = @_get_question()\n      if !question\n        return false\n\n      if !(question in @questions())\n        throw 'question is not selectable'\n\n      question_type = question.get_type()\n\n      [operator_model, operator_picker_view] = @build_operator_logic question_type\n\n      response_value_view = @view_factory.create_response_value_view question, question_type, @_operator_type()\n\n      presenter = @build_criterion_logic operator_model, operator_picker_view, response_value_view\n      presenter.model.change_question question.cid\n\n      response_value = if question._isSelectQuestion() then _.find(question.getList().options.models, (option) => return option.get('name') == @criterion.response_value)?.cid else @criterion.response_value\n      presenter.model.change_response response_value || ''\n      response_value_view.model = presenter.model.get 'response_value'\n      response_value_view.val(response_value)\n\n      return presenter\n    _get_question: () ->\n      @survey.findRowByName @criterion.name\n\n    build_empty_criterion: () =>\n      operator_picker_view = @view_factory.create_operator_picker null\n      response_value_view = @view_factory.create_response_value_view null\n\n      return @build_criterion_logic @model_factory.create_operator('empty'), operator_picker_view, response_value_view\n\n    questions: () ->\n      @selectable = @current_question.selectableRows() || @selectable\n      return @selectable\n\n\n  ###----------------------------------------------------------------------------------------------------------###\n  #-- Presentation.RowDetail.SkipLogic.State.coffee\n  ###----------------------------------------------------------------------------------------------------------###\n\n  class skipLogicHelpers.SkipLogicHelperContext\n    render: (@destination) ->\n      if @destination?\n        @destination.empty()\n        @state.render @destination\n      return\n    serialize: () ->\n      return @state.serialize()\n    use_criterion_builder_helper: () ->\n      @builder ?= @helper_factory.create_builder()\n      presenters = @builder.build_criterion_builder(@state.serialize())\n\n      if presenters == false\n        @state = null\n      else\n        @state = new skipLogicHelpers.SkipLogicCriterionBuilderHelper(presenters[0], presenters[1], @builder, @view_factory, @)\n        @render @destination\n      return\n    use_hand_code_helper: () ->\n      @state = new skipLogicHelpers.SkipLogicHandCodeHelper(@state.serialize(), @builder, @view_factory, @)\n      @render @destination\n      return\n    use_mode_selector_helper : () ->\n      @helper_factory.survey.off null, null, @state\n      @state = new skipLogicHelpers.SkipLogicModeSelectorHelper(@view_factory, @)\n      @render @destination\n      return\n    constructor: (@model_factory, @view_factory, @helper_factory, serialized_criteria) ->\n      @state = serialize: () -> return serialized_criteria\n      if !serialized_criteria? || serialized_criteria == ''\n        serialized_criteria = ''\n        @use_mode_selector_helper()\n      else\n        @use_criterion_builder_helper()\n\n      if !@state?\n        @state = serialize: () -> return serialized_criteria\n        @use_hand_code_helper()\n\n  class skipLogicHelpers.SkipLogicCriterionBuilderHelper\n    determine_criterion_delimiter_visibility: () ->\n      if @presenters.length < 2\n        @$criterion_delimiter.hide()\n      else\n        @$criterion_delimiter.show()\n    render: (destination) ->\n      @view.render().attach_to destination\n      @$criterion_delimiter = @view.$(\".skiplogic__delimselect\")\n      @$add_new_criterion_button = @view.$('.skiplogic__addcriterion')\n\n      @determine_criterion_delimiter_visibility()\n\n      @destination = @view.$('.skiplogic__criterialist')\n\n      _.each @presenters, (presenter) =>\n        presenter.render @destination\n\n    serialize: () ->\n      serialized = _.map @presenters, (presenter) ->\n        presenter.serialize()\n      _.filter(serialized, (crit) -> crit).join(' ' + @view.criterion_delimiter + ' ')\n    add_empty: () ->\n      presenter = @builder.build_empty_criterion()\n      presenter.dispatcher = @dispatcher\n      presenter.serialize_all = _.bind @serialize, @\n      @presenters.push presenter\n      presenter.render @destination\n      @determine_criterion_delimiter_visibility()\n    remove: (id) ->\n      _.each @presenters, (presenter, index) =>\n        if presenter? && presenter.model.cid == id\n          presenter = @presenters.splice(index, 1)[0]\n          presenter.view.$el.remove()\n          @builder.survey.off null, null, presenter\n          @determine_add_new_criterion_visibility()\n\n      if @presenters.length == 0\n        @context.use_mode_selector_helper()\n\n    determine_add_new_criterion_visibility: () ->\n      if @all_presenters_are_valid()\n        action = 'show()'\n        @$add_new_criterion_button?.show()\n      else\n        action = 'hide()'\n        @$add_new_criterion_button?.hide()\n\n      if !@$add_new_criterion_button\n        Raven?.captureException(\"@$add_new_criterion_button is not defined. cannot call #{action} [inside of determine_add_new_criterion_visibility]\")\n\n    constructor: (@presenters, separator, @builder, @view_factory, @context) ->\n      @view = @view_factory.create_criterion_builder_view()\n      @view.criterion_delimiter = (separator || 'and').toLowerCase()\n      @view.facade = @\n      @dispatcher = _.clone Backbone.Events\n      @dispatcher.on 'remove:presenter', (cid) =>\n        @remove cid\n\n\n      @dispatcher.on 'changed:model', (presenter) =>\n        @determine_add_new_criterion_visibility()\n\n      @dispatcher.on 'rendered', (presenter) =>\n        @determine_add_new_criterion_visibility()\n\n      removeInvalidPresenters = () =>\n        questions = @builder.questions()\n        presenters_to_be_removed = []\n        _.each @presenters, (presenter) ->\n          if presenter.model._get_question() && !(presenter.model._get_question() in questions)\n            presenters_to_be_removed.push presenter.model.cid\n\n        for presenter in presenters_to_be_removed\n          @remove presenter\n\n        if @presenters.length == 0\n          @context.use_mode_selector_helper()\n\n      @builder.survey.on 'sortablestop', removeInvalidPresenters, @\n\n      removeInvalidPresenters()\n\n      _.each @presenters, (presenter) =>\n        presenter.dispatcher = @dispatcher\n        presenter.serialize_all = _.bind @serialize, @\n\n    all_presenters_are_valid: () ->\n        return !_.find @presenters, (presenter) -> !presenter.is_valid()\n\n    switch_editing_mode: () ->\n      @builder.build_hand_code_criteria @serialize()\n\n  class skipLogicHelpers.SkipLogicHandCodeHelper\n    render: ($destination) ->\n      $destination.append @$parent\n      @textarea.render().attach_to @$parent\n      @button.render().attach_to @$parent\n      @button.bind_event 'click', () => @context.use_mode_selector_helper()\n    serialize: () ->\n      @textarea.$el.val() || @criteria\n    constructor: (@criteria, @builder, @view_factory, @context) ->\n      @$parent = $('<div>')\n      @textarea = @view_factory.create_textarea @criteria, 'skiplogic__handcode-edit'\n      @button = @view_factory.create_button '<i class=\"k-icon k-icon-trash\"></i>', 'skiplogic-handcode__cancel'\n\n  class skipLogicHelpers.SkipLogicModeSelectorHelper\n    render: ($destination) ->\n      $parent = $('<div>')\n      $destination.append $parent\n      @criterion_builder_button.render().attach_to $parent\n      @handcode_button.render().attach_to $parent\n\n      @criterion_builder_button.bind_event('click', () =>\n        @context.view_factory.survey.trigger('change')\n        @context.use_criterion_builder_helper()\n      )\n      @handcode_button.bind_event('click', () =>\n        @context.view_factory.survey.trigger('change')\n        @context.use_hand_code_helper()\n      )\n\n    serialize: () ->\n      return ''\n    constructor: (view_factory, @context) ->\n      @criterion_builder_button = view_factory.create_button '<i>+</i> ' + t(\"Add a condition\"), 'kobo-button kobo-button--green'\n      @handcode_button = view_factory.create_button '<i>${}</i> ' + t(\"Manually enter your skip logic in XLSForm code\"), 'kobo-button kobo-button--blue'\n      ###@view = @view_factory.create_skip_logic_picker_view(context)###\n    switch_editing_mode: () -> return\n\n  operators =\n    EXISTENCE: 1\n    EQUALITY: 2\n    GREATER_THAN: 3\n    GREATER_THAN_EQ: 4\n  ops =\n    EX: operators.EXISTENCE\n    EQ: operators.EQUALITY\n    GT: operators.GREATER_THAN\n    GE: operators.GREATER_THAN_EQ\n\n  skipLogicHelpers.question_types =\n    default:\n      operators: [\n        ops.EX #1\n        ops.EQ #2\n      ]\n      equality_operator_type: 'text'\n      response_type: 'text'\n      name: 'default'\n    select_one:\n      operators: [\n        ops.EQ #2\n        ops.EX #1\n      ]\n      equality_operator_type: 'text'\n      response_type: 'dropdown'\n      name: 'select_one'\n    select_multiple:\n      operators: [\n        ops.EQ #2\n        ops.EX #1\n      ]\n      equality_operator_type: 'select_multiple'\n      response_type: 'dropdown'\n      name: 'select_multiple'\n    integer:\n      operators: [\n        ops.GT #3\n        ops.EX #1\n        ops.EQ #2\n        ops.GE #4\n      ]\n      equality_operator_type: 'basic'\n      response_type: 'integer'\n      name: 'integer'\n\n    # rank:\n    #   operators: [\n    #     ops.EX #1\n    #     ops.EQ #2\n    #   ]\n    #   equality_operator_type: 'select_multiple'\n    #   response_type: 'dropdown'\n    #   name: 'rank'\n    # rank__item:\n    #   operators: [\n    #     ops.EX #1\n    #     ops.EQ #2\n    #   ]\n    #   equality_operator_type: 'select_multiple'\n    #   response_type: 'dropdown'\n    #   name: 'rank_item'\n\n    # score:\n    #   operators: [\n    #     ops.EX #1\n    #     ops.EQ #2\n    #   ]\n    #   equality_operator_type: 'select_multiple'\n    #   response_type: 'dropdown'\n    #   name: 'score'\n    # score__row:\n    #   operators: [\n    #     ops.EX #1\n    #     ops.EQ #2\n    #   ]\n    #   equality_operator_type: 'select_multiple'\n    #   response_type: 'dropdown'\n    #   name: 'score_row'\n\n    barcode:\n      operators: [\n        ops.GT #3\n        ops.EX #1\n        ops.EQ #2\n        ops.GE #4\n      ]\n      equality_operator_type: 'text'\n      response_type: 'text'\n      name: 'barcode'\n    decimal:\n      operators: [\n        ops.EX #1\n        ops.EQ #2\n        ops.GT #3\n        ops.GE #4\n      ]\n      equality_operator_type: 'basic'\n      response_type: 'decimal'\n      name: 'decimal'\n    geopoint:\n      operators: [\n        ops.EX #1\n      ]\n      name: 'geopoint'\n    geotrace:\n      operators: [\n        ops.EX #1\n      ]\n      name: 'geotrace'\n    geoshape:\n      operators: [\n        ops.EX #1\n      ]\n      name: 'geoshape'\n    image:\n      operators: [\n        ops.EX #1\n      ]\n      name: 'image'\n    audio:\n      operators: [\n        ops.EX #1\n      ]\n      name: 'audio'\n    video:\n      operators: [\n        ops.EX #1\n      ]\n      name: 'video'\n    acknowledge:\n      operators: [\n        ops.EX #1\n      ]\n      name: 'acknowledge'\n    date:\n      operators: [\n        ops.EQ #2\n        ops.GT #3\n        ops.GE #4\n      ]\n      equality_operator_type: 'date'\n      response_type: 'text'\n      name: 'date'\n\n\n  skipLogicHelpers.operator_types = [\n    {\n      id: 1\n      type: 'existence'\n      label: t(\"Was Answered\")\n      negated_label: t(\"Was not Answered\")\n      abbreviated_label: t(\"Was Answered\")\n      abbreviated_negated_label: t(\"Was not Answered\")\n      parser_name: ['ans_notnull','ans_null']\n      symbol: {\n        ans_notnull: '!=',\n        ans_null: '='\n      }\n      response_type: 'empty'\n    }\n    {\n      id: 2\n      type: 'equality'\n      label: ''\n      negated_label: t(\"not\")\n      abbreviated_label: '='\n      abbreviated_negated_label: '!='\n      parser_name: ['resp_equals', 'resp_notequals', 'multiplechoice_selected', 'multiplechoice_notselected']\n      symbol: {\n        resp_equals: '=',\n        resp_notequals: '!=',\n        multiplechoice_selected: '='\n        multiplechoice_notselected: '!='\n      }\n    }\n    {\n      id: 3\n      type: 'equality'\n      label: t(\"Greater Than\")\n      negated_label: t(\"Less Than\")\n      abbreviated_label: '>'\n      abbreviated_negated_label: '<'\n      parser_name: ['resp_greater', 'resp_less']\n      symbol: {\n        resp_greater: '>'\n        resp_less: '<'\n      }\n    }\n    {\n      id: 4\n      type: 'equality'\n      label: t(\"Greater Than or Equal to\")\n      negated_label: t(\"Less Than or Equal to\")\n      abbreviated_label: '>='\n      abbreviated_negated_label: '<='\n      parser_name: ['resp_greaterequals', 'resp_lessequals']\n      symbol: {\n        resp_greaterequals: '>=',\n        resp_lessequals: '<='\n      }\n    }\n  ]\n\n  skipLogicHelpers\n","_ = require 'underscore'\nBackbone = require 'backbone'\nvalidation = require 'backbone-validation'\n$viewUtils = require './view.utils'\n$configs = require './model.configs'\n$rowDetailMixins = require './model.rowDetailMixins'\n\nmodule.exports = do ->\n  _.extend validation.validators, {\n    invalidChars: (value, attr, customValue)->\n      unless $viewUtils.Validator.__validators.invalidChars(value, customValue)\n        \"#{value} contains invalid characters\";\n    unique: (value, attr, customValue, model)->\n      rows = model.getSurvey().rows.pluck(model.key)\n      values = _.map(rows, (rd)-> rd.get('value'))\n      unless $viewUtils.Validator.__validators.unique(value, values)\n        \"Question name isn't unique\"\n      else\n        ``\n  }\n\n  _.extend(Backbone.Model.prototype, validation.mixin);\n\n  # TODO: Extend Backbone Validation\n  # _.extend Backbone.Model.prototype, Backbone.Validation.mixin\n\n  base = {}\n  class base.BaseCollection extends Backbone.Collection\n    constructor: (arg, opts)->\n      if arg and \"_parent\" of arg\n        # temporary error, during transition\n        throw new Error(\"_parent chould be assigned as property to 2nd argument to XLF.BaseCollection (not first)\")\n      @_parent = opts._parent  if opts and opts._parent\n      super(arg, opts)\n\n    getSurvey: ->\n      parent = @_parent\n      while parent._parent\n        parent = parent._parent\n      parent\n\n  class base.BaseModel extends Backbone.Model\n    constructor: (arg, opts)->\n      if opts and \"_parent\" of opts\n        @_parent = opts._parent\n      else if \"object\" is typeof arg and \"_parent\" of arg\n        @_parent = arg._parent\n        delete arg._parent\n      super(arg, opts)\n    parse: ->\n    linkUp: (ctx)->\n    finalize: ->\n    getValue: (what)->\n      if what\n        resp = @get(what)\n        if resp is undefined\n          throw new Error(\"Could not get value\")\n        if resp.getValue\n          resp = resp.getValue()\n      else\n        resp = @get(\"value\")\n      resp\n    setDetail: (what, value)->\n      if value.constructor is base.RowDetail\n        @set(what, value)\n      else\n        @set(what, new base.RowDetail({key:what, value: value}, {_parent: @}))\n    parentRow: ->\n      @_parent._parent\n    precedingRow: ->\n      ii = @_parent.models.indexOf(@)\n      if ii isnt 0\n        @_parent.at(ii-1)\n    nextRow: ->\n      ii = @_parent.models.indexOf(@)\n      @_parent.at(ii+1)\n    getSurvey: ->\n      parent = @_parent\n      if parent is null or parent is undefined\n        return null\n      while parent._parent or parent.collection\n        if parent._parent\n          parent = parent._parent\n        else if parent.collection and parent.collection._parent\n          parent = parent.collection._parent\n        else\n          break\n      parent\n\n  _innerValue = (val)->\n    # occasionally, the value passed to rowDetail\n    # is an object, which evaluates to true\n    if _.isObject(val)\n      val.value\n    else\n      val\n\n  class base.RowDetail extends base.BaseModel\n    idAttribute: \"name\"\n    validation: () =>\n      if @key == 'name'\n        return value:\n          unique: true\n          required: true\n      else if @key == 'calculation'\n        return value:\n          required: true\n      else if @key == 'label' && @_parent.constructor.key != 'group'\n        return value:\n          required: true\n      {}\n\n    constructor: ({@key, value}, opts)->\n      @_parent = opts._parent\n      if @key of $rowDetailMixins\n        _.extend(@, $rowDetailMixins[@key])\n      super()\n      # We should consider pulling the value from the CSV at this stage\n      # depending on the question type. truthy-CSV values should be set here\n      # In the quick fix, this is done in the view for 'required' rowDetails\n      # (grep: XLF.configs.truthyValues)\n\n      if value not in [undefined, null]\n        vals2set = {}\n        if _.isString(value) || _.isNumber(value)\n          vals2set.value = value\n        else if _.isObject(value) and \"value\" of value\n          _.extend vals2set, value\n        else\n          vals2set.value = value\n        @set(vals2set)\n\n      @_order = $configs.columnOrder(@key)\n      @postInitialize()\n\n    postInitialize: ()->\n    initialize: ()->\n      # todo: change \"_hideUnlessChanged\" to describe something about the form, not the representation of the form.\n      # E.g. undefinedUnlessChanged or definedIffChanged\n      if @get(\"_hideUnlessChanged\")\n        @hidden = true\n        @_oValue = @get(\"value\")\n        @on \"change\", ()->\n          @hidden = @get(\"value\") is @_oValue\n\n      @on \"change:value\", (rd, val, ctxt)=>\n        # @_parent.trigger \"change\", @key, val, ctxt\n        @_parent.trigger \"detail-change\", @key, val, ctxt\n        @getSurvey().trigger \"row-detail-change\", @_parent, @key, val, ctxt\n      # if @key is \"type\"\n      #   @on \"change:list\", (rd, val, ctxt)=>\n      #     @_parent.trigger \"change\", @key, val, ctxt\n\n      # when attributes change, register changes with parent survey\n      if @key in [\"name\", \"label\", \"hint\", \"guidance_hint\", \"required\",\n                  \"calculation\", \"default\", \"appearance\",\n                  \"constraint_message\", \"tags\"] or @key.match(/^.+::.+/)\n        @on \"change\", (changes)=>\n          @getSurvey().trigger \"change\", changes\n\n  base\n","/**\n * The only file that is making calls to Backend. You shouldn't use it directly,\n * but through proper actions in `jsapp/js/actions.es6`.\n *\n * TODO: Instead of splitting this huge file it could be a good idead to move\n * all the calls from here to appropriate actions and drop this file entirely.\n * And make actions for calls that doesn't have them.\n */\n\nimport alertify from 'alertifyjs';\nimport {assign} from 'utils';\nimport {\n  ROOT_URL,\n  COMMON_QUERIES\n} from './constants';\n\nconst DEFAULT_PAGE_SIZE = 100;\n\nexport var dataInterface;\n(function(){\n  var $ajax = (o)=> {\n    return $.ajax(assign({}, {dataType: 'json', method: 'GET'}, o));\n  };\n  const assetMapping = {\n    'a': 'assets',\n    'c': 'collections',\n    'p': 'permissions',\n  };\n\n  assign(this, {\n    selfProfile: ()=> $ajax({ url: `${ROOT_URL}/me/` }),\n    apiToken: () => {\n      return $ajax({\n        url: `${ROOT_URL}/token/?format=json`\n      });\n    },\n    getUser: (userUrl) => {\n      return $ajax({\n        url: userUrl\n      });\n    },\n    queryUserExistence: (username)=> {\n      var d = new $.Deferred();\n      $ajax({ url: `${ROOT_URL}/api/v2/users/${username}/` })\n        .done(()=>{ d.resolve(username, true); })\n        .fail(()=>{ d.reject(username, false); });\n      return d.promise();\n    },\n    logout: ()=> {\n      var d = new $.Deferred();\n      $ajax({ url: `${ROOT_URL}/api-auth/logout/` }).done(d.resolve).fail(function (/*resp, etype, emessage*/) {\n        // logout request wasn't successful, but may have logged the user out\n        // querying '/me/' can confirm if we have logged out.\n        dataInterface.selfProfile().done(function(data){\n          if (data.message === 'user is not logged in') {\n            d.resolve(data);\n          } else {\n            d.fail(data);\n          }\n        }).fail(d.fail);\n      });\n      return d.promise();\n    },\n    patchProfile (data) {\n      return $ajax({\n        url: `${ROOT_URL}/me/`,\n        method: 'PATCH',\n        data: data\n      });\n    },\n    listTemplates () {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/?q=${COMMON_QUERIES.t}`\n      });\n    },\n    getCollections(params = {}) {\n      let q = COMMON_QUERIES.c;\n      if (params.owner) {\n        q += ` AND owner__username__exact:${params.owner}`;\n      }\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/`,\n        dataType: 'json',\n        data: {\n          q: q,\n          limit: params.pageSize || DEFAULT_PAGE_SIZE,\n          page: params.page || 0\n        },\n        method: 'GET'\n      });\n    },\n    createAssetSnapshot (data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/asset_snapshots/`,\n        method: 'POST',\n        data: data\n      });\n    },\n    createTemporaryAssetSnapshot ({source}) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/asset_snapshots/`,\n        method: 'POST',\n        data: {\n          source: source\n        }\n      });\n    },\n\n    /*\n     * external services\n     */\n\n    getHooks(uid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/hooks/`,\n        method: 'GET'\n      });\n    },\n    getHook(uid, hookUid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/hooks/${hookUid}/`,\n        method: 'GET'\n      });\n    },\n    addExternalService(uid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/hooks/`,\n        method: 'POST',\n        data: JSON.stringify(data),\n        dataType: 'json',\n        contentType: 'application/json'\n      });\n    },\n    updateExternalService(uid, hookUid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/hooks/${hookUid}/`,\n        method: 'PATCH',\n        data: JSON.stringify(data),\n        dataType: 'json',\n        contentType: 'application/json'\n      });\n    },\n    deleteExternalService(uid, hookUid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/hooks/${hookUid}/`,\n        method: 'DELETE'\n      });\n    },\n    getHookLogs(uid, hookUid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/hooks/${hookUid}/logs/`,\n        method: 'GET'\n      });\n    },\n    getHookLog(uid, hookUid, lid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/hooks/${hookUid}/logs/${lid}/`,\n        method: 'GET'\n      });\n    },\n    retryExternalServiceLogs(uid, hookUid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/hooks/${hookUid}/retry/`,\n        method: 'PATCH'\n      });\n    },\n    retryExternalServiceLog(uid, hookUid, lid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/hooks/${hookUid}/logs/${lid}/retry/`,\n        method: 'PATCH'\n      });\n    },\n\n    getReportData (data) {\n      let identifierString;\n      if (data.identifiers) {\n        identifierString = `?names=${data.identifiers.join(',')}`\n      }\n      if (data.group_by != '')\n        identifierString += `&split_by=${data.group_by}`;\n\n      return $ajax({\n        url: `${ROOT_URL}/reports/${data.uid}/${identifierString}`,\n      });\n    },\n    cloneAsset ({uid, name, version_id, new_asset_type, parent}) {\n      let data = {\n        clone_from: uid,\n      };\n      if (name) { data.name = name; }\n      if (version_id) { data.clone_from_version_id = version_id; }\n      if (new_asset_type) { data.asset_type = new_asset_type; }\n      if (parent) { data.parent = parent; }\n      return $ajax({\n        method: 'POST',\n        url: `${ROOT_URL}/api/v2/assets/`,\n        data: data,\n      });\n    },\n\n    /*\n     * form media\n     */\n    postFormMedia(uid, data) {\n      return $ajax({\n        method: 'POST',\n        url: `${ROOT_URL}/api/v2/assets/${uid}/files/`,\n        data: data,\n      });\n    },\n    deleteFormMedia(url) {\n      return $ajax({\n        method: 'DELETE',\n        url: url,\n      });\n    },\n\n    /*\n     * Dynamic data attachments\n     */\n    attachToSource(assetUid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/paired-data/`,\n        method: 'POST',\n        data: JSON.stringify(data),\n        contentType: 'application/json'\n      });\n    },\n    detachSource(attachmentUrl) {\n      return $ajax({\n        url: attachmentUrl,\n        method: 'DELETE',\n      });\n    },\n    patchSource(attachmentUrl, data) {\n      return $ajax({\n        url: attachmentUrl,\n        method: 'PATCH',\n        data: JSON.stringify(data),\n        contentType: 'application/json'\n      });\n    },\n    getAttachedSources(assetUid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/paired-data/`,\n        method: 'GET',\n      });\n    },\n    getSharingEnabledAssets() {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/?q=data_sharing__enabled:true`,\n        method: 'GET',\n      });\n    },\n    patchDataSharing(assetUid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/`,\n        method: 'PATCH',\n        data: JSON.stringify(data),\n        contentType: 'application/json'\n      });\n    },\n\n    /*\n     * permissions\n     */\n\n    getPermissionsConfig() {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/permissions/`,\n        method: 'GET'\n      });\n    },\n\n    getAssetPermissions(assetUid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/permission-assignments/`,\n        method: 'GET'\n      });\n    },\n\n    bulkSetAssetPermissions(assetUid, perms) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/permission-assignments/bulk/`,\n        method: 'POST',\n        data: JSON.stringify(perms),\n        dataType: 'json',\n        contentType: 'application/json'\n      });\n    },\n\n    assignAssetPermission(assetUid, perm) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/permission-assignments/`,\n        method: 'POST',\n        data: JSON.stringify(perm),\n        dataType: 'json',\n        contentType: 'application/json'\n      });\n    },\n\n    removePermission (permUrl) {\n      return $ajax({\n        method: 'DELETE',\n        url: permUrl\n      });\n    },\n\n    copyPermissionsFrom(sourceUid, targetUid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${targetUid}/permission-assignments/clone/`,\n        method: 'PATCH',\n        data: {\n          clone_from: sourceUid\n        }\n      });\n    },\n    deleteAsset ({uid}) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/`,\n        method: 'DELETE'\n      });\n    },\n    subscribeToCollection(assetUrl) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/asset_subscriptions/`,\n        data: {\n          asset: assetUrl\n        },\n        method: 'POST'\n      });\n    },\n    unsubscribeFromCollection(uid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/asset_subscriptions/`,\n        data: {\n          asset__uid: uid\n        },\n        method: 'GET'\n      }).then((data) => {\n        return $ajax({\n          url: data.results[0].url,\n          method: 'DELETE'\n        });\n      });\n    },\n    getImportDetails ({uid}) {\n      return $.getJSON(`${ROOT_URL}/api/v2/imports/${uid}/`);\n    },\n    getAsset (params={}) {\n      if (params.url) {\n        return $.getJSON(params.url);\n      } else {\n        // limit is for collections children\n        return $.getJSON(`${ROOT_URL}/api/v2/assets/${params.id}/?limit=${DEFAULT_PAGE_SIZE}`);\n      }\n    },\n\n    getAssetExports(assetUid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/exports/`,\n        data: {\n          ordering: '-date_created',\n          // TODO: handle pagination of this in future, for now we get \"all\"\n          limit: 9999,\n        },\n      });\n    },\n\n    createAssetExport(assetUid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/exports/`,\n        method: 'POST',\n        data: JSON.stringify(data),\n        dataType: 'json',\n        contentType: 'application/json',\n      });\n    },\n\n    getAssetExport(assetUid, exportUid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/exports/${exportUid}/`,\n        method: 'GET',\n      });\n    },\n\n    deleteAssetExport(assetUid, exportUid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/exports/${exportUid}/`,\n        method: 'DELETE',\n      });\n    },\n\n    getExportSettings(assetUid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/export-settings/`,\n        // TODO: handle pagination of this in future, for now we get \"all\"\n        data: {limit: 9999},\n      });\n    },\n\n    getExportSetting(assetUid, settingUid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/export-settings/${settingUid}/`,\n      });\n    },\n\n    updateExportSetting(assetUid, settingUid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/export-settings/${settingUid}/`,\n        method: 'PATCH',\n        data: data,\n      });\n    },\n\n    createExportSetting(assetUid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/export-settings/`,\n        method: 'POST',\n        data: data,\n      });\n    },\n\n    deleteExportSetting(assetUid, settingUid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/export-settings/${settingUid}/`,\n        method: 'DELETE',\n      });\n    },\n\n    getAssetXformView (uid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/xform/`,\n        dataType: 'html'\n      });\n    },\n    searchAssets(searchData) {\n      // TODO https://github.com/kobotoolbox/kpi/issues/1983\n      // force set limit to get hacky \"all\" assets\n      searchData.limit = 200;\n      return $.ajax({\n        url: `${ROOT_URL}/api/v2/assets/`,\n        dataType: 'json',\n        data: searchData,\n        method: 'GET'\n      });\n    },\n    _searchAssetsWithPredefinedQuery(params, predefinedQuery) {\n      const searchData = {\n        q: predefinedQuery,\n        limit: params.pageSize || DEFAULT_PAGE_SIZE,\n        offset: params.page * params.pageSize || 0\n      };\n\n      if (params.searchPhrase) {\n        searchData.q += ` AND (${params.searchPhrase})`;\n      }\n\n      if (params.filterProperty && params.filterValue) {\n        searchData.q += ` AND ${params.filterProperty}:${params.filterValue}`;\n      }\n\n      if (params.ordering) {\n        searchData.ordering = params.ordering;\n      }\n\n      if (params.metadata === true) {\n        searchData.metadata = 'on';\n      }\n\n      if (params.collectionsFirst === true) {\n        searchData.collections_first = 'true';\n      }\n\n      if (params.status) {\n        searchData.status = params.status;\n      }\n\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/`,\n        dataType: 'json',\n        data: searchData,\n        method: 'GET'\n      });\n    },\n    _searchMetadataWithPredefinedQuery(params, predefinedQuery) {\n      const searchData = {\n        q: predefinedQuery,\n        limit: params.pageSize || DEFAULT_PAGE_SIZE,\n        offset: params.page * params.pageSize || 0\n      };\n\n      if (params.searchPhrase) {\n        searchData.q += ` AND (${params.searchPhrase})`;\n      }\n\n      if (params.filterProperty && params.filterValue) {\n        searchData.q += ` AND ${params.filterProperty}:\"${params.filterValue}\"`;\n      }\n\n      if (params.ordering) {\n        searchData.ordering = params.ordering;\n      }\n\n      if (params.status) {\n        searchData.status = params.status;\n      }\n\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/metadata/`,\n        dataType: 'json',\n        data: searchData,\n        method: 'GET'\n      });\n    },\n    searchMyCollectionAssets(params = {}) {\n      return this._searchAssetsWithPredefinedQuery(\n        params,\n        // we only want the currently viewed collection's assets\n        `${COMMON_QUERIES.qbtc} AND parent__uid:${params.uid}`,\n      );\n    },\n    searchMyLibraryAssets(params = {}) {\n      // we only want orphans (assets not inside collection)\n      // unless it's a search\n      let query = COMMON_QUERIES.qbtc;\n      if (!params.searchPhrase) {\n        query += ' AND parent:null';\n      }\n\n      return this._searchAssetsWithPredefinedQuery(params, query);\n    },\n    searchMyCollectionMetadata(params = {}) {\n      return this._searchMetadataWithPredefinedQuery(\n        params,\n        // we only want the currently viewed collection's assets\n        `${COMMON_QUERIES.qbtc} AND parent__uid:${params.uid}`,\n      );\n    },\n    searchMyLibraryMetadata(params = {}) {\n      // we only want orphans (assets not inside collection)\n      // unless it's a search\n      let query = COMMON_QUERIES.qbtc;\n      if (!params.searchPhrase) {\n        query += ' AND parent:null';\n      }\n\n      return this._searchMetadataWithPredefinedQuery(params, query);\n    },\n    searchPublicCollections(params = {}) {\n      params.status = 'public-discoverable';\n      return this._searchAssetsWithPredefinedQuery(\n        params,\n        COMMON_QUERIES.c,\n      );\n    },\n    searchPublicCollectionsMetadata(params = {}) {\n      params.status = 'public-discoverable';\n      return this._searchMetadataWithPredefinedQuery(\n        params,\n        COMMON_QUERIES.c,\n      );\n    },\n    assetsHash () {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/hash/`,\n        method: 'GET'\n      });\n    },\n    createResource (details) {\n      return $ajax({\n        method: 'POST',\n        url: `${ROOT_URL}/api/v2/assets/`,\n        data: details\n      });\n    },\n    patchAsset (uid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/`,\n        method: 'PATCH',\n        data: JSON.stringify(data),\n        dataType: 'json',\n        contentType: 'application/json'\n      });\n    },\n    listTags (data) {\n      return $ajax({\n        url: `${ROOT_URL}/tags/`,\n        method: 'GET',\n        data: assign({\n          // If this number is too big (e.g. 9999) it causes a deadly timeout\n          // whenever Form Builder displays the aside Library search\n          limit: 100,\n        }, data),\n      });\n    },\n    loadNextPageUrl(nextPageUrl){\n      return $ajax({\n        url: nextPageUrl,\n        method: 'GET'\n      });\n    },\n    deployAsset (asset, redeployment) {\n      var data = {\n        'active': true,\n      };\n      var method = 'POST';\n      if (redeployment) {\n        method = 'PATCH';\n        data.version_id = asset.version_id;\n      }\n      return $ajax({\n        method: method,\n        url: `${asset.url}deployment/`,\n        data: data\n      });\n    },\n    setDeploymentActive ({asset, active}) {\n      return $ajax({\n        method: 'PATCH',\n        url: `${asset.url}deployment/`,\n        data: {\n          active: active\n        }\n      });\n    },\n    createImport(contents) {\n      var formData = new FormData();\n      Object.keys(contents).forEach((key) => {\n        formData.append(key, contents[key]);\n      });\n      return $ajax({\n        method: 'POST',\n        url: `${ROOT_URL}/api/v2/imports/`,\n        data: formData,\n        processData: false,\n        contentType: false\n      });\n    },\n    getResource ({id}) {\n      // how can we avoid pulling asset type from the 1st character of the uid?\n      var assetType = assetMapping[id[0]];\n      return $.getJSON(`${ROOT_URL}/${assetType}/${id}/`);\n    },\n\n    getSubmissions(\n      uid,\n      pageSize = DEFAULT_PAGE_SIZE,\n      page = 0,\n      sort = [],\n      fields = [],\n      filter = ''\n    ) {\n      const query = `limit=${pageSize}&start=${page}`;\n      var s = '&sort={\"_id\":-1}'; // default sort\n      var f = '';\n      if (sort.length) {\n        s = sort[0].desc === true ? `&sort={\"${sort[0].id}\":-1}` : `&sort={\"${sort[0].id}\":1}`;\n      }\n      if (fields.length) {\n        f = `&fields=${JSON.stringify(fields)}`;\n      }\n\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/?${query}${s}${f}${filter}`,\n        method: 'GET',\n      });\n    },\n\n    getSubmission(uid, sid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/${sid}/`,\n        method: 'GET'\n      });\n    },\n    duplicateSubmission(uid, sid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/${sid}/duplicate/`,\n        method: 'POST'\n      });\n    },\n    bulkPatchSubmissionsValues(uid, submissionIds, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/bulk/`,\n        method: 'PATCH',\n        data: {'payload': JSON.stringify({\n          submission_ids: submissionIds,\n          data: data,\n        })}\n      });\n    },\n    bulkPatchSubmissionsValidationStatus(uid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/validation_statuses/`,\n        method: 'PATCH',\n        data: {'payload': JSON.stringify(data)}\n      });\n    },\n    bulkRemoveSubmissionsValidationStatus(uid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/validation_statuses/`,\n        method: 'DELETE',\n        data: {'payload': JSON.stringify(data)}\n      });\n    },\n    updateSubmissionValidationStatus(uid, sid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/${sid}/validation_status/`,\n        method: 'PATCH',\n        data: data\n      });\n    },\n    removeSubmissionValidationStatus(uid, sid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/${sid}/validation_status/`,\n        method: 'DELETE'\n      });\n    },\n    getSubmissionsQuery(uid, query='') {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/?${query}`,\n        method: 'GET'\n      });\n    },\n    deleteSubmission(uid, sid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/${sid}/`,\n        method: 'DELETE'\n      });\n    },\n    bulkDeleteSubmissions(uid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/bulk/`,\n        method: 'DELETE',\n        data: {'payload': JSON.stringify(data)}\n      });\n    },\n    getEnketoEditLink(uid, sid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/${sid}/enketo/edit/?return_url=false`,\n        method: 'GET'\n      });\n    },\n    getEnketoViewLink(uid, sid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/data/${sid}/enketo/view/`,\n        method: 'GET'\n      });\n    },\n    uploadAssetFile(uid, data) {\n      var formData = new FormData();\n      Object.keys(data).forEach(function(key) {\n        formData.append(key, data[key]);\n      });\n\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/files/`,\n        method: 'POST',\n        data: formData,\n        processData: false,\n        contentType: false\n      });\n    },\n    getAssetFiles(uid, fileType) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${uid}/files/?file_type=${fileType}`,\n        method: 'GET'\n      });\n    },\n    deleteAssetFile(assetUid, uid) {\n      return $ajax({\n        url: `${ROOT_URL}/api/v2/assets/${assetUid}/files/${uid}/`,\n        method: 'DELETE'\n      });\n    },\n\n    getHelpInAppMessages() {\n      return $ajax({\n        url: `${ROOT_URL}/help/in_app_messages/`,\n        method: 'GET'\n      });\n    },\n    patchHelpInAppMessage(uid, data) {\n      return $ajax({\n        url: `${ROOT_URL}/help/in_app_messages/${uid}/`,\n        method: 'PATCH',\n        data: JSON.stringify(data),\n        dataType: 'json',\n        contentType: 'application/json'\n      });\n    },\n\n    setLanguage(data) {\n      return $ajax({\n        url: `${ROOT_URL}/i18n/setlang/`,\n        method: 'POST',\n        data: data\n      });\n    },\n    environment() {\n      return $ajax({url: `${ROOT_URL}/environment/`});\n    },\n    login: (creds)=> {\n      return $ajax({ url: `${ROOT_URL}/api-auth/login/?next=/me/`, data: creds, method: 'POST'});\n    }\n  });\n}).call(dataInterface = {});\n","_ = require 'underscore'\n\nmodule.exports = do ->\n  aliases_dict = {\n    group: [\n      \"begin group\"\n      \"end group\"\n      \"begin_group\"\n      \"end_group\"\n    ],\n    repeat: [\n      \"begin repeat\"\n      \"end repeat\"\n      \"begin_repeat\"\n      \"end_repeat\"\n    ]\n    kobomatrix: [\n      \"begin_kobomatrix\"\n      \"end_kobomatrix\"\n    ]\n    score: [\n      \"begin score\",\n      \"end score\",\n      \"begin_score\",\n      \"end_score\",\n    ]\n    rank: [\n      \"begin_rank\",\n      \"end_rank\",\n      \"begin rank\",\n      \"end rank\",\n    ]\n  }\n\n  aliases = (name)-> aliases_dict[name] or [name]\n\n  q = {}\n  q.groupable = ()->\n    _.flatten [\n                aliases('group')\n                aliases('repeat')\n                aliases('score')\n                aliases('rank')\n                aliases('kobomatrix')\n              ]\n\n  q.groupsOrRepeats = ()->\n    _.flatten [aliases('group'), aliases('repeat')]\n\n  q.requiredSheetNameList = ()->\n    ['survey']\n\n  q.testGroupable = (type)->\n    # Returns an object if type is group or repeat (begin or end)\n    #  otherwise, returns false\n    out = false\n    if type in aliases_dict.group\n      out = {type: 'group'}\n    else if type in aliases_dict.repeat\n      out = {type: 'repeat'}\n    else if type in aliases_dict.score\n      out = {type: 'score'}\n    else if type in aliases_dict.rank\n      out = {type: 'rank'}\n    else if type in aliases_dict.kobomatrix\n      out = {type: 'kobomatrix'}\n    if out and out.type\n      out.begin = !type.match(/end/)\n    out\n\n  q.testGroupOrRepeat = (type)->\n    console.error(\"q.testGroupOrRepeat is renamed to q.testGroupable\")\n    q.testGroupable(type)\n\n  q.hiddenTypes = ()->\n    _.flatten [\n      ['imei', 'deviceid'],\n      ['start'],\n      ['end'],\n      ['today'],\n      ['simserial'],\n      ['subscriberid'],\n      ['phonenumber', 'phone_number'],\n      ['audit'],\n    ]\n\n  aliases.custom = q\n\n  aliases.q = aliases.custom\n  aliases\n","var chai = require('chai');\nvar expect = chai.expect;\n\nwindow.jQuery = window.$ = require('jquery');\nrequire('jquery-ui/ui/widgets/sortable');\n\nrequire('./xlform/aliases.tests');\nrequire('./xlform/choices.tests');\nrequire('./xlform/csv.tests');\nrequire('./xlform/deserializer.tests');\nrequire('./xlform/group.tests');\nrequire('./xlform/inputParser.tests');\nrequire('./xlform/translations.tests');\n// require('./xlform/integration.tests');\nrequire('./xlform/model.tests');\nrequire('./xlform/survey.tests');\nrequire('./xlform/utils.tests');\n\nrequire('../jsapp/js/utils.tests');\nrequire('../jsapp/js/components/permissions/permParser.tests');\nrequire('../jsapp/js/components/formBuilder/formBuilderUtils.tests');\nrequire('../jsapp/js/assetUtils.tests');\nrequire('../jsapp/js/components/locking/lockingUtils.tests');\nrequire('../jsapp/js/components/submissions/submissionUtils.tests');\n","chai = require('chai')\nchaiExpect = chai.expect\n\nmodule.exports =\n  chai: chaiExpect\n  expect: (x)->\n    toBe: (y)->\n      chaiExpect(x).to.equal(y)\n    toThrow: (e)->\n      chaiExpect(x).to.throw(e)\n    toBeDefined: ()->\n      chaiExpect(x).not.to.be.a('undefined')\n    toContain: (y)->\n      chaiExpect(x).to.contain(y)\n    toEqual: (y)->\n      chaiExpect(x).eql(y)\n    toBeTruthy: ->\n      chaiExpect(x).to.be.ok\n    toBeUndefined: ->\n      chaiExpect(x).to.be.a('undefined')\n    'not':\n      toEqual: (y)->\n        chaiExpect(x).to.not.eql(y)\n      toBe: (y)->\n        chaiExpect(x).to.not.equal(y)\n      toThrow: (e)->\n        chaiExpect(x).to.not.throw(e)\n      toBeTruthy: ->\n        chaiExpect(x).to.not.be.ok\n      toBeDefined: ->\n        chaiExpect(x).to.be.a('undefined')\n","{expect} = require('../helper/fauxChai')\n\n$aliases = require('../../jsapp/xlform/src/model.aliases')\n\nmodule.exports = do ->\n  expectSorted = (q)->\n    unless q instanceof Array\n      throw new Error(\"aliases.tests:expectSorted needs an array\")\n    q.sort()\n    expect(q)\n\n  describe '$aliases', ->\n    describe 'returns correct results from', ->\n      describe 'basic queries', ->\n        it '[groups]', ->\n          expectSorted($aliases('group')).toEqual([\n            'begin group',\n            'begin_group',\n            'end group',\n            'end_group',\n            ])\n        it '[repeats]', ->\n          expectSorted($aliases('repeat')).toEqual([\n            'begin repeat',\n            'begin_repeat',\n            'end repeat',\n            'end_repeat',\n            ])\n    describe 'custom queries', ->\n      it '[groupsOrRepeats]', ->\n        expectSorted($aliases.q.groupsOrRepeats()).toEqual([\n          'begin group',\n          'begin repeat',\n          'begin_group',\n          'begin_repeat',\n          'end group',\n          'end repeat',\n          'end_group',\n          'end_repeat',\n          ])\n\n      it '[groupable]', ->\n        expectSorted($aliases.q.groupable()).toEqual([\n          'begin group',\n          'begin rank',\n          'begin repeat',\n          'begin score',\n          'begin_group',\n          'begin_kobomatrix',\n          'begin_rank',\n          'begin_repeat',\n          'begin_score',\n          'end group',\n          'end rank',\n          'end repeat',\n          'end score',\n          'end_group',\n          'end_kobomatrix',\n          'end_rank',\n          'end_repeat',\n          'end_score',\n          ])\n      it '[availableSheetNames]', ->\n        expectSorted($aliases.q.requiredSheetNameList()).toEqual([\n          'survey',\n          ])\n      it '[hidden_types]', ->\n        expect($aliases.q.hiddenTypes()).toContain('imei')\n      describe 'q.testGroupOrRepeat', ->\n        expectGroupableParse = (s)->\n          expect($aliases.q.testGroupable(s))\n        it 'parses group properly', ->\n          expectGroupableParse('begin group').toEqual({type: 'group', begin: true})\n          expectGroupableParse('begin_group').toEqual({type: 'group', begin: true})\n          expectGroupableParse('end group').toEqual({type: 'group', begin: false})\n          expectGroupableParse('end_group').toEqual({type: 'group', begin: false})\n        it 'parses repeat properly', ->\n          expectGroupableParse('begin repeat').toEqual({type: 'repeat', begin: true})\n          expectGroupableParse('begin_repeat').toEqual({type: 'repeat', begin: true})\n          expectGroupableParse('end repeat').toEqual({type: 'repeat', begin: false})\n          expectGroupableParse('end_repeat').toEqual({type: 'repeat', begin: false})\n","{expect} = require('../helper/fauxChai')\n\n$survey = require(\"../../jsapp/xlform/src/model.survey\")\n$choices = require(\"../../jsapp/xlform/src/model.choices\")\n_ = require \"underscore\"\n$surveyFixtures = require(\"../fixtures/xlformSurveys\")\nwindow._ = _\n\nmodule.exports = do ->\n  describe 'model.choices', ->\n    beforeEach ->\n      @survey = $survey.Survey.load({\n          survey: [\n            {\n              type: 'select_one yes_no',\n              name: 'yes_or_no',\n              label: 'Yes or no?'\n            }\n          ],\n          choices: [\n            {\n              'list name': 'yes_no',\n              name: 'yes',\n              label: 'Yes'\n            },\n            {\n              'list name': 'yes_no',\n              name: 'no',\n              label: 'No'\n            }\n          ]\n        })\n      @choices = @survey.choices\n      @yesno = @choices.get('yes_no')\n\n    it 'has options in list', ->\n      expect(@yesno.options.length).toBe(2)\n    it 'can add option to a choice list', ->\n      @yesno.options.add(name: 'maybe', label: 'Maybe')\n      expect(@yesno.options.length).toBe(3)\n    it 'can remove option from a choice list', ->\n      opt = @yesno.options.find (o)-> o.get('name') is 'yes'\n      expect(opt).toBeDefined()\n      expect(@yesno.options.length).toBe(2)\n      @yesno.options.remove(opt)\n      expect(@yesno.options.length).toBe(1)\n\n    it 'exports choice list properly', ->\n      expect(@choices.toJSON()).toEqual([\n          {\n              name: \"yes_no\",\n              options: [\n                  {\n                      name: \"yes\",\n                      label: \"Yes\"\n                  },\n                  {\n                      name: \"no\",\n                      label: \"No\"\n                  }\n              ]\n          }\n      ])\n\n    describe 'model.choices--CASCADES', ->\n      it 'cascade choice list utility methods work', ->\n        survey = $survey.Survey.load($surveyFixtures.cascading)\n        expect(survey.choices.models.map((cl)->\n            cl.get('name')\n          )).toEqual(['state', 'county', 'city'])\n        expect(survey.choices.models.map((cl)->\n            cl._get_last_linked_choice_list().get('name')\n          )).toEqual(['city', 'city', 'city'])\n        expect(survey.choices.models.map((cl)->\n            cl._get_first_linked_choice_list().get('name')\n          )).toEqual(['state', 'state', 'state'])\n\n        _city_choicelist = survey.choices.get('city')\n        expect(_city_choicelist.get('name')).toBe('city')\n        expect(_city_choicelist._has_corresponding_row()).toEqual(false)\n        row_data = _city_choicelist._create_corresponding_row_data({\n            _full_path_choice_filter: true\n          })\n        expect(row_data).toEqual([\n            {\n                \"label\": \"state\",\n                \"type\": \"select_one state\",\n                \"choice_filter\": \"\"\n            },\n            {\n                \"label\": \"county\",\n                \"type\": \"select_one county\",\n                \"choice_filter\": \"state=${state}\"\n            },\n            {\n                \"label\": \"city\",\n                \"type\": \"select_one city\",\n                \"choice_filter\": \"state=${state} and county=${county}\"\n            },\n          ])\n        row_data = _city_choicelist._create_corresponding_row_data({\n            _full_path_choice_filter: false\n          })\n        expect(row_data).toEqual([\n            {\n                \"label\": \"state\",\n                \"type\": \"select_one state\",\n                \"choice_filter\": \"\"\n            },\n            {\n                \"label\": \"county\",\n                \"type\": \"select_one county\",\n                \"choice_filter\": \"state=${state}\"\n            },\n            {\n                \"label\": \"city\",\n                \"type\": \"select_one city\",\n                \"choice_filter\": \"county=${county}\"\n            },\n          ])\n\n      it 'imports a survey with a cascading choice list', ->\n        survey = $survey.Survey.load($surveyFixtures.cascading)\n        _city_choicelist = survey.choices.get('city')\n        for choiceList in survey.choices.models\n          expect(choiceList._has_corresponding_row()).toEqual(false)\n\n        _city_choicelist.create_corresponding_rows()\n\n        for choiceList in survey.choices.models\n          expect(choiceList._has_corresponding_row()).toEqual(true)\n\n        row0 = survey.rows.at(0)\n        row2 = survey.rows.at(2)\n        expect(survey.toCsvJson().choices.rowObjects.map(((r)->\n            return \"#{r.list_name}-#{r.name}\"\n          )).sort()).toEqual([\"city-brownsville\", \"city-dumont\", \"city-finney\",\n              \"city-harlingen\", \"city-puyallup\", \"city-redmond\", \"city-seattle\",\n              \"city-tacoma\", \"county-cameron\", \"county-king\", \"county-king\", #2 kings\n              \"county-pierce\", \"state-texas\", \"state-washington\"])\n        expect(survey.toCsvJson().survey.rowObjects.map(((r)->\n            return \"#{r.type}-#{r.name}\"\n          ))).toEqual([\"select_one state-state\",\n                        \"select_one county-county\",\n                        \"select_one city-city\",\n                        \"start-start\",\n                        \"end-end\"])\n        expect(row2.getList().get(\"name\")).toBe(\"city\")\n        expect(row2.getList().getList).toBeDefined()\n        expect(row2.getList().getList()).not.toBe(null)\n        expect(row2.getList().getList().get(\"name\")).toBe(\"county\")\n        expect(row2.getList().getList().getList().get(\"name\")).toBe(\"state\")\n        # console.log($survey.Survey.load(survey.toSsStructure())\n        #                                         .toSsStructure())\n\n        # Do we want to get survey.toJSON() working?\n        # it has largely been replaced by survey.toSsStructure()\n        # expect(_.keys(survey.toJSON().choices).sort()).toEqual([\n        #     \"city\", \"county\", \"state\",\n        #   ])\n\n\n    describe 'Choicelist', ->\n      describe 'Clone method', ->\n        it 'Clones itself and all of its options', ->\n          yesnoClone = @yesno.clone()\n          # cloned choiceList must be available\n          # to get current translation. so this test\n          # will fail in the same way the clone button\n          # fails on questions with choice lists\n          surv = yesnoClone.getSurvey()\n\n          expect(yesnoClone.options.length).toBe 2\n          expect(yesnoClone.options.at(0).get('name')).toBe 'yes'\n          expect(yesnoClone.options.at(1).get('name')).toBe 'no'\n          expect(yesnoClone.cid).not.toEqual @yesno.cid\n          expect(yesnoClone.get('name')).not.toBe @yesno.get('name')\n","{expect} = require('../helper/fauxChai')\n\ncsv = require(\"../../jsapp/xlform/src/csv\")\n\ndo ->\n  example2 = \"\\\"regex_sheet\\\"\\r\\n\\\"\\\",\\\"col1\\\",\\\"regexcol\\\"\\r\\n\\\"\\\",\\\"row1\\\",\\\"regex( \\\\s+ )\\\"\\r\\n\\\"regex_sheet2\\\"\\r\\n\\\"\\\",\\\"s2col1\\\",\\\"example2\\\"\\r\\n\\\"\\\",\\\"s2row1\\\",\\\"\\\\s\\\\d\\\\w\\\\S\\\\D\\\\W\\\"\\r\\n\"\n\n  silly_cell = \"\"\"\n    regex(., '^\\\\S+( \\\\S+){4}$' )\n  \"\"\"\n  example = \"\"\"\n    \"type\",\"constraint\"\n    \"text\",\"#{silly_cell}\"\n    \"\"\"\n\n  describe \"csv parsing\", ->\n    beforeEach ->\n      window._csv = csv\n      @compile = (content)->\n        csv(content).toObjects()[0]\n    it \"equals\", ->\n      parse_content_body = ->\n        csv(example2)\n      expect(parse_content_body).not.toThrow()\n    it \"handles simple csvs\", ->\n      ex1 = @compile(\"\"\"\n        a,b,c,d\n        e,f,g,h\n        \"\"\")\n      expect(ex1.a).toBe('e')\n      expect(ex1.b).toBe('f')\n      expect(ex1.c).toBe('g')\n      expect(ex1.d).toBe('h')\n\n    it \"handles csvs with quotes\", ->\n      ex1 = @compile(\"\"\"\n        \"a\",\"b\",\"c\",\"d\"\n        \"e\",\"f\",\"g\",\"h\"\n        \"\"\")\n      expect(ex1.a).toBe('e')\n      expect(ex1.b).toBe('f')\n      expect(ex1.c).toBe('g')\n      expect(ex1.d).toBe('h')\n\n    it \"imports cells with escape characters\", ->\n      ex1 = @compile(example)\n      expect(ex1.type).toBe('text')\n      expect(ex1.constraint).toBe(silly_cell)\n\n    it \"reexports cells with escape characters\", ->\n      converted_to_objects = csv(example).toObjects()\n      converted_to_string = csv(converted_to_objects).toString()\n      expect(converted_to_string).toEqual(example)\n\n$inputDeserializer = require(\"../../jsapp/xlform/src/model.inputDeserializer\")\n\ndo ->\n  deserialize = $inputDeserializer.deserialize\n  describe '$inputDeserializer', ->\n    beforeEach ->\n      @sampleSurveyObj =\n        survey: [\n          key1: \"val1\"\n          key2: \"val2\"\n          key3: \"val3\"\n        ]\n        choices: [\n          k4: \"v4\"\n          k5: \"v5\"\n        ]\n\n    describe '. deserialize parses csv, json, and object', ->\n      it 'has deserialize method defined', ->\n        expect(deserialize).toBeDefined()\n      ###\n      # csv appears be broken right now\n      it 'parses a csv', ->\n        oneliner = \"survey,,,\\n,key1,key2,key3\\n,val1,val2,val3\\nchoices,,,\\n,k4,k5\\n,v4,v5\"\n        $inputDeserializer(oneliner)\n        expect(deserialize(oneliner)).toEqual(@sampleSurveyObj)\n      ###\n      # it 'parses a json string', ->\n      #   oneline_json = \"\"\"{\"survey\":[{\"key1\":\"val1\",\"key2\":\"val2\",\"key3\":\"val3\"}],\"choices\":[{\"k4\":\"v4\",\"k5\":\"v5\"}]}\"\"\"\n      #   expect(deserialize(oneline_json)).toEqual(@sampleSurveyObj)\n      it 'parses a js object', ->\n        expect(deserialize(@sampleSurveyObj)).toEqual(@sampleSurveyObj)\n\n    describe '.validateParse notifies validity', ->\n      beforeEach ->\n        @validate = (obj, tf=true, expectedError=false)->\n          ctx = {}\n          isValid = $inputDeserializer.validateParse(obj, ctx)\n          expect(ctx).toBeDefined()\n          expect(isValid).toBe(tf)\n          expect(ctx.error).toEqual(expectedError)  if expectedError\n\n      it 'with just survey sheet', ->\n        @validate survey: []\n      describe 'but does not accept non-object parameters', ->\n        it '[string]', ->\n          @validate 'cant be a string', false\n        it '[array]', ->\n          @validate ['cant be an array'], false\n    describe 'deserializes and records errors', ->\n      it 'when input is missing survey sheet', ->\n        ss2 =\n          notSurvey: @sampleSurveyObj.survey\n          choices: @sampleSurveyObj.choices\n        context = {validate: true}\n        $inputDeserializer(ss2, context)\n        expect(context.error).toBeDefined()\n        expect(context.error).toContain('survey sheet')\n","{expect} = require('../helper/fauxChai')\n\n$inputDeserializer = require(\"../../jsapp/xlform/src/model.inputDeserializer\")\n$surveys = require(\"../fixtures/xlformSurveys\")\n\ndo ->\n  deserialize = $inputDeserializer.deserialize\n  describe '$inputDeserializer', ->\n    beforeEach ->\n      @sampleSurveyObj =\n        survey: [\n          key1: \"val1\"\n          key2: \"val2\"\n          key3: \"val3\"\n        ]\n        choices: [\n          k4: \"v4\"\n          k5: \"v5\"\n        ]\n\n    describe '. deserialize parses csv, json, and object', ->\n      it 'has deserialize method defined', ->\n        expect(deserialize).toBeDefined()\n      ###\n      # csv appears be broken right now\n      it 'parses a csv', ->\n        oneliner = \"survey,,,\\n,key1,key2,key3\\n,val1,val2,val3\\nchoices,,,\\n,k4,k5\\n,v4,v5\"\n        $inputDeserializer(oneliner)\n        expect(deserialize(oneliner)).toEqual(@sampleSurveyObj)\n      ###\n      # it 'parses a json string', ->\n      #   oneline_json = \"\"\"{\"survey\":[{\"key1\":\"val1\",\"key2\":\"val2\",\"key3\":\"val3\"}],\"choices\":[{\"k4\":\"v4\",\"k5\":\"v5\"}]}\"\"\"\n      #   expect(deserialize(oneline_json)).toEqual(@sampleSurveyObj)\n      it 'parses a js object', ->\n        expect(deserialize(@sampleSurveyObj)).toEqual(@sampleSurveyObj)\n\n    describe '.validateParse notifies validity', ->\n      beforeEach ->\n        @validate = (obj, tf=true, expectedError=false)->\n          ctx = {}\n          isValid = $inputDeserializer.validateParse(obj, ctx)\n          expect(ctx).toBeDefined()\n          expect(isValid).toBe(tf)\n          expect(ctx.error).toEqual(expectedError)  if expectedError\n\n      it 'with just survey sheet', ->\n        @validate survey: []\n      describe 'but does not accept non-object parameters', ->\n        it '[string]', ->\n          @validate 'cant be a string', false\n        it '[array]', ->\n          @validate ['cant be an array'], false\n    describe 'deserializes and records errors', ->\n      it 'when input is missing survey sheet', ->\n        ss2 =\n          notSurvey: @sampleSurveyObj.survey\n          choices: @sampleSurveyObj.choices\n        context = {validate: true}\n        $inputDeserializer(ss2, context)\n        expect(context.error).toBeDefined()\n        expect(context.error).toContain('survey sheet')\n\n\n###\nrequire [$survey = require 'cs!xlform/model.survey'\nrequire(\"../../jsapp/xlform/src/model.survey', 'cs!fixtures/surveys'], ($survey, $surveyFixtures)->\n  Survey = $survey.Survey\n  pizza_survey = $surveyFixtures.pizza_survey\n\n  ensure_equivalent = (sFixId)->\n    fixt = $surveyFixtures[sFixId]\n    describe \"fixtures/surveys.#{sFixId}:\", ->\n      it \"the fixture exists\", ->\n        expect(fixt.csv).toBeDefined()\n        expect(fixt.xlf).toBeDefined()\n        expect(fixt.xlf2).toBeDefined()\n\n      describe \"the fixture imports from object\", ->\n        beforeEach ->\n          @s1 = Survey.load(fixt.csv)\n          @s2 = Survey.load(fixt.xlf)\n          @s3 = Survey.load(fixt.xlf2)\n\n        it \"creates surveys\", ->\n          expect(@s1).toBeDefined()\n          expect(@s2).toBeDefined()\n          expect(@s3).toBeDefined()\n\n        it \"creates surveys with matching fingerprints\", ->\n          fingerprint = (s)->\n            # something that ensures the output is equivalent\n            \"#{s.toCSV().length}\"\n          expect(fingerprint(@s1)).not.toBe('')\n          expect(fingerprint(@s1)).toEqual(fingerprint(@s2))\n          expect(fingerprint(@s1)).toEqual(fingerprint(@s3))\n          expect(fingerprint(@s2)).toEqual(fingerprint(@s3))\n\n  ensure_equivalent('pizza_survey')\n###\n","import {assign} from 'js/utils';\n\nexport function parseTags(asset: AssetResponse) {\n  return {\n    tags: asset.tag_string.split(',').filter((tg) => { return tg.length !== 0; })\n  };\n}\n\nfunction parseSettings(asset: AssetResponse) {\n  const settings = asset.content && asset.content.settings;\n  if (settings) {\n    let foundSettings: AssetContentSettings = {};\n    if (Array.isArray(settings) && settings.length) {\n      foundSettings = settings[0];\n    }\n    return {\n      unparsed__settings: foundSettings,\n      settings__style: foundSettings.style,\n      settings__form_id: foundSettings.form_id,\n      settings__title: foundSettings.title,\n    };\n  } else {\n    return {};\n  }\n}\n\nexport function parsed(asset: AssetResponse): AssetResponse {\n  return assign(\n    asset,\n    parseSettings(asset),\n    parseTags(asset)\n  ) as AssetResponse;\n}\n","{expect} = require('../helper/fauxChai')\n_ = require(\"underscore\")\n\n$aliases = require(\"../../jsapp/xlform/src/model.aliases\")\n$survey = require(\"../../jsapp/xlform/src/model.survey\")\n$configs = require(\"../../jsapp/xlform/src/model.configs\")\n$surveys = require(\"../fixtures/xlformSurveys\")\n\ndo ->\n  describe 'rank.tests', ->\n    describe 'survey imports ranks >', ->\n      beforeEach ->\n        @survey = $survey.Survey.load {\n            survey: [\n              [\"type\", \"name\", \"label\", \"kobo--rank-items\"],\n              {type: \"begin_rank\", name: \"koborank\", label: \"Label\", \"kobo--rank-items\": \"needs\"},\n              [\"rank__level\", \"rnk1\", \"Rank Level 1\"],\n              [\"rank__level\", \"rnk2\", \"Rank Level 2\"],\n              {type: \"end_rank\"},\n            ],\n            'choices': [\n              ['list name', 'name', 'label'],\n              ['needs', 'food', 'Food'],\n              ['needs', 'water', 'Water'],\n              ['needs', 'shelter', 'Shelter'],\n            ],\n          }\n\n      it 'can import a simple rank group', ->\n        rankRow = @survey.rows.at(0)\n        expect(rankRow.get('kobo--rank-items').get('value')).toBeDefined()\n        expect(rankRow.get('$kuid').get('value')).toBeDefined()\n        expect(rankRow).toBeDefined()\n        expect(rankRow._rankRows.length).toBe(2)\n        rankRow._rankRows.forEach (row)->\n          expect(row.get('$kuid')).toBeDefined()\n        expect(rankRow._rankLevels.options.length).toBe(3)\n\n      describe 'clone a rank group', ->\n        beforeEach ->\n          @rankRow = @survey.rows.at(0)\n          expect(@rankRow.get('$kuid').get('value')).toBeDefined()\n          expect(@rankRow.get('kobo--rank-items').get('value')).toBeDefined()\n          @clonedRow = @rankRow.clone()\n          @survey._insertRowInPlace(@clonedRow, previous: @rankRow)\n\n        it 'has the correct structure', ->\n          expect(@survey.rows.length).toBe(2)\n          expect(@survey.choices.length).toBe(2)\n          _n = 0\n          @survey.forEachRow (r) -> _n++\n          expect(_n).toBe(6)\n\n        it 'exports to csv', ->\n          pkg = @survey.toCsvJson()\n          [r1, r2, r3, r_end,\n            cr1, cr2, cr3, cr_end] = pkg.survey.rowObjects\n          expect(r1.label).toEqual(cr1.label)\n          expect(r1['$kuid']).toBeDefined()\n          expect(r1.type).toEqual('begin_rank')\n          expect(r1['kobo--rank-items']).not.toEqual(cr1['kobo--rank-items'])\n          expect(r_end.type).toEqual('end_rank')\n          expect(cr_end.type).toEqual('end_rank')\n          expect(r_end.$kuid).toEqual(\"/\" + r1.$kuid)\n          expect(cr_end.$kuid).toEqual(\"/\" + cr1.$kuid)\n          expect(_.pluck(pkg.choices.rowObjects, 'name')).toEqual([\n              \"food\", \"water\", \"shelter\",\n              \"food\", \"water\", \"shelter\",\n            ])\n\n        it 'exports to json', ->\n          pkg = @survey.toJSON()\n          [r1, r2, r3, r_end,\n            cr1, cr2, cr3, cr_end] = pkg.survey\n          expect(r1.label).toEqual(cr1.label)\n          expect(r1['$kuid']).toBeDefined()\n          expect(r1['kobo--rank-items']).not.toEqual(cr1['kobo--rank-items'])\n          expect(r_end.type).toEqual('end_rank')\n          expect(cr_end.type).toEqual('end_rank')\n          expect(r_end['$kuid']).toBeDefined()\n          expect(cr_end['$kuid']).toBeDefined()\n\n          # each choice in pkg.choices comes in this format:\n          #   list_name: [\n          #     {name: 'name', label: 'label'}\n          #   ]\n\n          # test the flattened names look right\n          expect(_.chain(pkg.choices)\n                    .values()\n                    .flatten()\n                    .pluck('name')\n                    .value()).toEqual([\n                      \"food\", \"water\", \"shelter\",\n                      \"food\", \"water\", \"shelter\",\n                    ])\n\n  describe 'score.tests', ->\n    describe 'survey imports scores >', ->\n      beforeEach ->\n        @survey = $survey.Survey.load {\n            survey: [\n              [\"type\", \"name\", \"label\", \"kobo--score-choices\"],\n              {type: \"begin score\", name: \"koboskore\", label: \"Label\", \"kobo--score-choices\": \"koboskorechoices\"},\n              [\"score__row\", \"skore_1\", \"Score 1\"],\n              [\"score__row\", \"skore_2\", \"Score 2\"],\n              {type: \"end score\"},\n            ],\n            'choices': [\n              ['list_name', 'name', 'label'],\n              ['koboskorechoices', 'ok', 'Okay'],\n              ['koboskorechoices', 'not_ok', 'Not okay'],\n            ],\n          }\n\n      it 'can import a simple score group', ->\n        scoreRow = @survey.rows.at(0)\n        expect(scoreRow.get('kobo--score-choices').get('value')).toBeDefined()\n        expect(scoreRow).toBeDefined()\n\n      it 'scores can be exported', ->\n        output = @survey.toJSON()\n        expect(output.survey.length).toBe(4)\n        expect(output.survey[0].type).toBe('begin_score')\n        expect(output['choices']).toBeDefined()\n        expect(output['choices']['koboskorechoices']).toEqual(\n            [ {name: 'ok', label: 'Okay'}, {name: 'not_ok', label: 'Not okay'} ]\n          )\n\n  describe 'group.tests', ->\n    _firstGroup = (s)->\n      _.first s.rows.filter (r,i)-> r.constructor.name is \"Group\"\n    _lastGroup = (s)->\n      _.last s.rows.filter (r,i)-> r.constructor.name is \"Group\"\n\n    describe 'survey imports groups >', ->\n      beforeEach ->\n        @survey = $survey.Survey.load({\n            survey: [\n                ['type',        'name', 'label'],\n                ['begin group', 'grp1', 'Group1'],\n                ['text',        'g1q1', 'Group1Question1'],\n                ['end group'],\n              ]\n          })\n\n      it 'can import a simple group', ->\n        first_group = _firstGroup(@survey)\n        expect(first_group).toBeDefined()\n        expect(first_group.rows.length).toBe(1)\n      it 'can add a group to the survey', ->\n        @survey.addRow type: 'group', name: 'grp2'\n        expect(@survey.rows.length).toBe(2)\n        expect(_lastGroup(@survey).rows.length).toBe(0)\n      it 'leaves empty group labels intact', ->\n        survey = $survey.Survey.load({\n            survey: [\n                ['type',        'name', 'label'],\n                ['begin group', 'grp1', null],\n                ['text',        'g1q1', 'Group1Question1'],\n                ['end group'],\n              ]\n          })\n\n        first_group = _firstGroup survey\n\n        expect(first_group.getValue 'label').toBe ''\n      describe 'groups can be exported >', ->\n        it 'works with a simple group', ->\n          expect(@survey.toCSV().split('\\n').length).toBe(8)\n        it 'works with a nested group', ->\n          survey = $survey.Survey.load({\n              survey: [\n                ['type',        'name', 'label'],\n                ['begin group', 'grp1', 'Group1'],\n                ['text',        'g1q1', 'Grp2Question1'],\n                ['begin group', 'g1g2', 'Group1Question1'],\n                ['text',        'g1g2q1', 'Grp2Question1'],\n                ['end group'],\n                ['end group'],\n              ]\n            })\n          expect(survey.toCSV().split('\\n').length).toBe(11)\n\n    it 'can import repeats', ->\n      survey = $survey.Survey.load({\n          survey: [\n            ['type',        'name', 'label'],\n            ['begin repeat', 'grp1', 'Group1'],\n            ['text',        'g1q1', 'Group1Question1'],\n            ['end repeat'],\n          ]\n        })\n      first_row = survey.rows.first()\n      expect(first_row).toBeDefined()\n      expect(first_row.constructor.name).toBe(\"Group\")\n      expect(first_row._isRepeat()).toBeTruthy()\n    describe 'fails on unmatched group types', ->\n      expectFailure = (msg, surv)->\n        execFn = ->\n          survey = $survey.Survey.load(surv)\n        expect(execFn).toThrow()\n      ### TODO: Find out why these are failing\n      it 'fails with unclosed group', ->\n        expectFailure 'unclosed', \"\"\"\n        survey,,,\n        ,type,name,label\n        ,begin group,grp1,Group1\n        \"\"\"\n        expectFailure 'unclosed', {\n            survey: [\n              ['type',        'name', 'label'          ],\n              #-----------------------------------------\n              ['begin group', 'grp1', 'Group1'         ],\n              ['text',        'g1q1', 'Group1Question1'],\n            ]\n          }\n        expectFailure 'unclosed', {\n            survey: [\n              ['type',        'name', 'label'],\n              ['begin group', 'grp1', 'Group1'],\n            ]\n          }\n      it 'fails with mismatched group and repeat', ->\n        expectFailure 'mismatch', \"\"\"\n        survey,,,\n        ,type,name,label\n        ,begin group,grp1,Group1\n        ,end repeat,,\n        \"\"\"\n        expectFailure 'mismatch', {\n            survey: [\n              ['type'       , 'name', 'label' ],\n              #--------------------------------\n              ['begin group', 'grp1', 'Group1'],\n              ['end repeat'                   ],\n            ]\n          }\n      it 'fails with mismatched group and repeat2', ->\n        expectFailure 'mismatch', \"\"\"\n        survey,,,\n        ,type,name,label\n        ,begin repeat,grp1,Group1\n        ,end group,,\n        \"\"\"\n      ###\n\n    describe 'group creation', ->\n      beforeEach ->\n        @survey = $survey.Survey.load({\n            survey: [\n              ['type', 'name', 'label'],\n              #------------------------\n              ['text', 'q1',   'Q1'   ],\n              ['text', 'q2',   'Q2'   ],\n              ['text', 'q3',   'Q3'   ],\n              ['text', 'q4',   'Q4'   ],\n              ['text', 'q5',   'Q5'   ],\n            ]\n          })\n\n      describe 'group naming', ->\n        beforeEach ->\n          @getNames = (s)->\n            _n = 'noname'\n            names = []\n            s.forEachRow (\n                    (r)->\n                      name = r.get('name')?.get('value') or _n\n                      names.push name\n                  ), includeGroups: true\n            names\n\n          expect(@survey._allRows().length).toBe(5)\n          @rows = for n in [0,2,4]\n            @survey.rows.at(n)\n\n        it 'uses opts.label when not undefined', ->\n          @survey._addGroup(label: 'My Group', __rows: @rows)\n          expect(_firstGroup(@survey).getValue('label')).toBe 'My Group'\n        it 'uses default label when no label is passed', ->\n          @survey._addGroup(__rows: @rows)\n          expect(_firstGroup(@survey).getValue('label')).toBe $configs.newGroupDetails.label.value\n\n      describe 'can create group with existing rows', ->\n        beforeEach ->\n          @getNames = (s)->\n            _n = 'noname'\n            names = []\n            s.forEachRow (\n                    (r)->\n                      name = r.get('name')?.get('value') or _n\n                      names.push name\n                  ), includeGroups: true\n            names\n\n          expect(@survey._allRows().length).toBe(5)\n          rows = for n in [0,2,4]\n            @survey.rows.at(n)\n\n          @survey._addGroup(label: 'My Group', __rows: rows)\n        it 'and has the right number of rows', ->\n          expect(@survey._allRows().length).toBe(5)\n        it 'has the right order of names', ->\n          @survey.finalize()\n          names = @getNames(@survey)\n          names[0] = 'group_xxxxxxx'\n          expect(names).toEqual([\"group_xxxxxxx\", \"q1\", \"q3\", \"q5\", \"q2\", \"q4\"])\n\n        describe 'can generate missing names on finalize', ->\n          beforeEach ->\n            @grp = _firstGroup(@survey)\n\n          it 'and has a finalize method', ->\n            expect(@grp.finalize).toBeDefined()\n          # it 'and has finalize called on survey finalize', ->\n          #   spyOn @grp, 'finalize'\n          #   @survey.finalize()\n          #   expect(@grp.finalize).toHaveBeenCalled()\n          it 'has the correct name', ->\n            @survey.finalize()\n            names = @getNames(@survey)\n            names[0] = 'group_xxxxxxx'\n            expect(names).toEqual(['group_xxxxxxx', 'q1', 'q3', 'q5', 'q2', 'q4'])\n\n    describe 'group manipulation', ->\n      beforeEach ->\n        @survey = $survey.Survey.load({\n            survey: [\n              ['type'       , 'name', 'label'           ],\n              #------------------------------------------\n              ['text'       , 'q1'  , 'Q1'              ],\n              ['begin group', 'grp1', 'Group1'          ],\n              ['text'       , 'g1q1', 'Group1Question1' ],\n              ['end group'                              ],\n              ['text'       , 'q2'  , 'Q2'              ],\n            ]\n          })\n        @g1 = _firstGroup @survey\n\n        @getNames = (s)->\n          _n = 'noname'\n          names = []\n          s.forEachRow (\n                  (r)->\n                    name = r.get('name')?.get('value') or _n\n                    names.push name\n                ), includeGroups: true\n          names\n      it 'group can be deleted', ->\n        g1 = _firstGroup @survey\n        expect(@survey._allRows().length).toBe(3)\n        @survey.remove g1\n        expect(@survey._allRows().length).toBe(2)\n      it 'group can be detached from parent', ->\n        expect(@getNames(@survey)).toEqual(['q1', 'grp1', 'g1q1', 'q2'])\n        @g1.detach()\n        expect(@getNames(@survey)).toEqual(['q1', 'q2'])\n      it 'group can be split apart', ->\n        expect(@getNames(@survey)).toEqual(['q1', 'grp1', 'g1q1', 'q2'])\n        @g1.splitApart()\n        expect(@getNames(@survey)).toEqual(['q1', 'g1q1', 'q2'])\n      describe 'nested group can be split apart', ->\n        beforeEach ->\n          @survey = $survey.Survey.load({\n              survey: [\n                ['type',        'name', 'label' ],\n                #--------------------------------\n                ['begin group', 'grp1', 'Group1'],\n                ['begin group', 'grp2', 'Group1'],\n                ['text'       , 'q1'  , 'Q1'    ],\n                ['end group'                    ],\n                ['end group'                    ],\n                ['text'       , 'q2'  , 'Q2'    ],\n              ]\n            })\n          @g1 = _firstGroup @survey\n          @g2 = @g1.rows.at(0)\n        it 'is set up', ->\n          expect(@g2.constructor.key).toEqual(\"group\")\n          expect(@getNames(@survey)).toEqual(['grp1', 'grp2', 'q1', 'q2'])\n\n        it 'can break apart outer group', ->\n          @g1.splitApart()\n          expect(@getNames(@survey)).toEqual(['grp2', 'q1', 'q2'])\n\n        it 'can break apart outer group', ->\n          @g2.splitApart()\n          expect(@getNames(@survey)).toEqual(['grp1', 'q1', 'q2'])\n\n\ndescribe 'kuids', ->\n  survey_content ={\n    group: ->\n      {\n        survey: [\n          ['type', 'name', 'label', '$kuid'],\n          {type: 'begin_group', name: 'grp', label: 'Group', '$kuid': 'abc'},\n          ['note', 'n1', 'Note 1', 'def'],\n          {type: 'end_group',  '$kuid': '/abc (never parsed)'},\n        ],\n      }\n    rank: ->\n      {\n        survey: [\n          ['type', 'name', 'label', '$kuid'],\n          {type: 'begin_rank', name: 'koborank', label: 'Label', 'kobo--rank-items': 'needs', '$kuid': 'abc'},\n          ['rank__level', 'rnk1', 'Rank Level 1', 'def'],\n          ['rank__level', 'rnk2', 'Rank Level 2', 'ghi'],\n          {type: 'end_rank',  '$kuid': '/abc (never parsed)'},\n        ],\n        'choices': [\n          ['list_name', 'name', 'label', '$kuid'],\n          ['needs', 'food', 'Food', 'mno'],\n          ['needs', 'water', 'Water', 'pqr'],\n          ['needs', 'shelter', 'Shelter', 'stu'],\n        ],\n      }\n    score: ->\n      {\n        survey: [\n          ['type', 'name', 'label', '$kuid'],\n          {type: 'begin_score', name: 'koboscore', label: 'Label', \"kobo--score-choices\": 'scores', '$kuid': 'abcd'},\n          ['score__row', 'sc1', 'Rank Level 1', 'efgh'],\n          {type: 'end_score',  '$kuid': '/abcd (never parsed)'},\n        ],\n        'choices': [\n          ['list_name', 'name', 'label', '$kuid'],\n          ['scores', 'bad', 'Bad', 'mnop'],\n          ['scores', 'ok', 'Ok', 'qrst'],\n          ['scores', 'good', 'Good', 'uvwx'],\n        ],\n      }\n  }\n\n  describe 'passed to export', ->\n    it 'for group', ->\n      survey = $survey.Survey.load survey_content.group()\n      content = survey.toFlatJSON()\n      [r0, r1, r2] = content.survey\n      expect(r0.$kuid).toEqual('abc')\n      expect(r1.$kuid).toEqual('def')\n      expect(r2.$kuid).toEqual('/abc')\n\n    it 'for rank survey', ->\n      survey = $survey.Survey.load survey_content.rank()\n      content = survey.toFlatJSON()\n      [r0, r1, r2, r3] = content.survey\n      expect(r0.$kuid).toEqual('abc')\n      expect(r1.$kuid).toEqual('def')\n      expect(r2.$kuid).toEqual('ghi')\n      expect(r3.$kuid).toEqual('/abc')\n\n      [c0, c1, c2, c3] = content.choices\n      expect(\n          (c.$kuid for c in content.choices)\n          ).toEqual(['mno', 'pqr', 'stu'])\n\n    it 'for score survey', ->\n      survey = $survey.Survey.load survey_content.score()\n      content = survey.toFlatJSON()\n      [r0, r1, r2, r3] = content.survey\n      expect(r0.$kuid).toEqual('abcd')\n      expect(r1.$kuid).toEqual('efgh')\n      expect(r2.$kuid).toEqual('/abcd')\n\n      [c0, c1, c2] = content.choices\n      expect(\n          (c.$kuid for c in content.choices)\n          ).toEqual(['mnop', 'qrst', 'uvwx'])\n\n  describe 'preserved from import', ->\n    it 'for group', ->\n      survey = $survey.Survey.load survey_content.group()\n      grp1 = survey.rows.at(0)\n      expect(grp1.isGroup()).toBeTruthy()\n      expect(grp1.getValue('$kuid')).toEqual('abc')\n      expect(grp1.rows.at(0).getValue('$kuid')).toEqual('def')\n\n    it 'for rank survey', ->\n      survey = $survey.Survey.load survey_content.rank()\n\n      r0 = survey.rows.at(0)\n      r1 = r0._rankRows.at(0)\n      r2 = r0._rankRows.at(1)\n      expect(r0.getValue('$kuid')).toBe('abc')\n      expect(r1.attributes.$kuid).toBe('def')\n      expect(r2.attributes.$kuid).toBe('ghi')\n\n    it 'for score survey', ->\n      survey = $survey.Survey.load survey_content.score()\n      r0 = survey.rows.at(0)\n      expect(r0.getValue('$kuid')).toBe('abcd')\n      r1 = r0._scoreRows.at(0)\n      expect(r1.attributes.$kuid).toBe('efgh')\n\n      [c1, c2, c3] = survey.choices.at(0).options.models\n      expect(c1.getValue('$kuid')).toEqual('mnop')\n      expect(c2.getValue('$kuid')).toEqual('qrst')\n      expect(c3.getValue('$kuid')).toEqual('uvwx')\n","{expect} = require('../helper/fauxChai')\n\n$inputParser = require(\"../../jsapp/xlform/src/model.inputParser\")\n$choices = require(\"../../jsapp/xlform/src/model.choices\")\n$surveys = require(\"../fixtures/xlformSurveys\")\n\ndo ->\n  describe '\" $inputParser', ->\n    beforeEach ->\n      @sampleSurveyObj =\n        survey: [\n          key1: \"val1\"\n          key2: \"val2\"\n          key3: \"val3\"\n        ]\n        choices: [\n          k4: \"v4\"\n          k5: \"v5\"\n        ]\n    describe '. loadChoiceLists()\"', ->\n      list = new $choices.ChoiceList()\n      $inputParser.loadChoiceLists($surveys.pizza_survey.main().choices, list)\n\n    describe '. parse()\"', ->\n      describe ' translated surveys', ->\n        it 'flattens translated lists 1', ->\n          results = $inputParser.parseArr('survey', [\n              {type: 'text', name: 'q1', label: ['q1x', 'q1null']},\n              {type: 'text', name: 'q2', label: ['q2x', 'q2null']},\n            ], ['lx', null])\n          expect(results).toEqual([\n              {\n                type: 'text', name: 'q1',\n                'label::lx': 'q1x',\n                'label': 'q1null',\n              },\n              {\n                type: 'text', name: 'q2',\n                'label::lx': 'q2x',\n                'label': 'q2null',\n              },\n            ])\n\n        it 'flattens translated lists 2', ->\n          translations = ['lx', 'ly']\n          results = $inputParser.parseArr('survey', [\n              {type: 'text', name: 'q1', label: ['q1x', 'q1y']},\n              {type: 'text', name: 'q2', label: ['q2x', 'q2y']},\n            ], translations)\n\n          expected = [\n              {\n                type: 'text', name: 'q1',\n                'label::lx': 'q1x',\n                'label::ly': 'q1y',\n              },\n              {\n                type: 'text', name: 'q2',\n                'label::lx': 'q2x',\n                'label::ly': 'q2y',\n              },\n            ]\n          for i in [0, 1]\n            expect(results[i]).toEqual(expected[i])\n\n      it 'parses group hierarchy', ->\n        results = $inputParser.parseArr('survey', [\n            {type: 'begin group', name: 'grp1'},\n            {type: 'text', name: 'q1'},\n            {type: 'end group'},\n          ])\n        expect(results).toEqual([\n            {\n              type: 'group',\n              name: 'grp1',\n              __rows: [{type: 'text', name: 'q1'}]\n            }\n          ])\n      it 'parses scoring questions', ->\n        results = $inputParser.parseArr('survey', [\n            {\"type\": \"begin score\", \"name\": \"koboskore\", \"label\": \"Label\"},\n            {\"type\": \"end score\"},\n          ])\n        expect(results).toEqual([\n            {\n              type: 'score',\n              name: 'koboskore',\n              label: 'Label',\n              __rows: []\n            }\n          ])\n\n      it 'parses nested groups hierarchy', ->\n        results = $inputParser.parseArr('survey', [\n            {type: 'begin group', name: 'grp1', '$kuid': 'aaa'},\n            {type: 'begin group', name: 'grp2', '$kuid': 'bbb'},\n            {type: 'text', name: 'q1', '$kuid': 'ccc'},\n            {type: 'text', name: 'q2', '$kuid': 'ddd'},\n            {type: 'end group', '$kuid': 'eee'},\n            {type: 'end group', '$kuid': 'fff'},\n          ])\n        expect(results).toEqual([{\n          type : 'group',\n          name : 'grp1',\n          '$kuid': 'aaa',\n          __rows : [\n            {type: 'group',\n            name : 'grp2',\n            '$kuid': 'bbb',\n            __rows : [\n              { type : 'text', name : 'q1', '$kuid': 'ccc' },\n              { type : 'text', name : 'q2', '$kuid': 'ddd' }\n            ]}]}])\n      it 'parses non-grouped list of questions', ->\n        results = $inputParser.parseArr('survey', [\n            {type: 'text', name: 'q1'},\n            {type: 'text', name: 'q2'},\n          ])\n        expect(results).toEqual([ { type : 'text', name : 'q1' }, { type : 'text', name : 'q2' } ])\n","{expect} = require('../helper/fauxChai')\n\n$inputParser = require(\"../../jsapp/xlform/src/model.inputParser\")\n$survey = require(\"../../jsapp/xlform/src/model.survey\")\n\ndescribe(\"translations\", ->\n  process = (src) ->\n    parsed = $inputParser.parse(src)\n    new $survey.Survey(parsed)\n\n  it('should not allow editing form with unnamed translation', ->\n    run = ->\n      survey = process(\n        survey: [\n          type: \"text\"\n          label: [\"Ciasto?\", \"Pizza?\"],\n          name: \"Pizza survey\",\n        ]\n        translations: [\"polski (pl)\", null]\n      )\n    expect(run).toThrow(\"\"\"\n      There is an unnamed translation in your form definition.\n      Please give a name to all translations in your form.\n      Use \"Manage Translations\" option from form landing page.\n    \"\"\")\n  )\n)\n","{expect} = require('../helper/fauxChai')\n_ = require('underscore')\n\n$model = require(\"../../jsapp/xlform/src/_model\")\n\nxlform_survey_model = ($model)->\n  beforeEach ->\n    @pizzaSurvey = $model.Survey.load(PIZZA_SURVEY)\n    @createSurveyCsv = (survey=[],choices=[])->\n      choiceSheet = if choices.length is 0 then \"\" else \"\"\"\n      choices,,,\n      ,list name,name,label\n      ,#{choices.join(\"\\n,\")}\n      \"\"\"\n      \"\"\"\n      survey,,,\n      ,type,name,label,hint\n      ,#{survey.join(\"\\n,\")}\n      #{choiceSheet}\n      \"\"\"\n    @createSurvey = (survey=[],choices=[])=>\n      $model.Survey.load @createSurveyCsv survey, choices\n    @firstRow = (s)-> s.rows.at(0)\n    @compareCsvs = (x1, x2)->\n      x1r = x1.split(\"\\n\")\n      x2r = x2.split(\"\\n\")\n      for r in _.min([x1r.length, x2r.length])\n        expect(x1r[r]).toBe(x2r[r])\n      expect(x1).toBe(x2)\n    @dumpAndLoad = (scsv)=>\n      s1 = $model.Survey.load scsv\n      x1 = s1.toCSV()\n      s2 = $model.Survey.load x1\n      x2 = s2.toCSV()\n      @compareCsvs(x1, x2)\n\n  it \"creates xlform\", ->\n    xlf = new $model.Survey name: \"Sample\"\n    expect(xlf).toBeDefined()\n    expect(xlf instanceof $model.Survey).toBe(true)\n    expect(xlf.get(\"name\")).toBe(\"Sample\")\n\n  it \"ensures every node has access to the parent survey\", ->\n    @pizzaSurvey.getSurvey\n\n  it \"can append a survey to another\", ->\n    dead_simple = @createSurvey(['text,q1,Question1,q1hint', 'text,q2,Question2,q2hint'])\n    expect(dead_simple.rows.length).toBe(2)\n    expect(@pizzaSurvey.rows.length).toBe(1)\n    dead_simple.insertSurvey(@pizzaSurvey)\n\n    expect(dead_simple.rows.length).toBe(3)\n    expect(dead_simple.rows.at(2).getValue(\"name\")).toBe(\"likes_pizza\")\n\n  it \"can import from csv_repr\", ->\n    expect(@pizzaSurvey.rows.length).toBe(1)\n    firstRow = @pizzaSurvey.rows.at(0)\n    expect(firstRow.getValue(\"name\")).toEqual(\"likes_pizza\")\n\n  describe \"with simple survey\", ->\n    beforeEach ->\n      @firstRow = @pizzaSurvey.rows.at(0)\n    describe \"lists\", ->\n      it \"iterates over every row\", ->\n        expect(@pizzaSurvey.rows).toBeDefined()\n        expect(@firstRow).toBeDefined()\n      it \"can add a list as an object\", ->\n        expect(@pizzaSurvey.choices.length).toBe(1)\n        @pizzaSurvey.choices.add LISTS.gender\n        expect(@pizzaSurvey.choices.length).toBe(2)\n        x1 = @pizzaSurvey.toCsvJson()\n\n        # it should prevent duplicate lists with the same id\n        @pizzaSurvey.choices.add LISTS.yes_no\n        expect(@pizzaSurvey.choices.length).toBe(2)\n        x2 = @pizzaSurvey.toCsvJson()\n        expect(x1).toEqual(x2)\n      it \"can add row to a specific index\", ->\n        expect(@pizzaSurvey.addRowAtIndex).toBeDefined()\n        # last question\n        rowc = @pizzaSurvey.rows.length\n        expect(@pizzaSurvey.rows.length).toBe 1\n        @pizzaSurvey.addRowAtIndex({\n          name: \"lastrow\",\n          label: \"last row\",\n          type: \"text\"\n          }, rowc)\n        expect(@pizzaSurvey.rows.length).toBe 2\n        expect(@pizzaSurvey.rows.last().get(\"label\").get(\"value\")).toBe(\"last row\")\n\n        @pizzaSurvey.addRowAtIndex({\n          name: \"firstrow\",\n          label: \"first row\",\n          type: \"note\"\n          }, 0)\n\n        expect(@pizzaSurvey.rows.length).toBe 3\n        expect(@pizzaSurvey.rows.first().get(\"label\").get(\"value\")).toBe(\"first row\")\n\n        @pizzaSurvey.addRowAtIndex({\n          name: \"secondrow\",\n          label: \"second row\",\n          type: \"note\"\n          }, 1)\n\n        expect(@pizzaSurvey.rows.length).toBe 4\n        expect(@pizzaSurvey.rows.at(1).get(\"label\").get(\"value\")).toBe(\"second row\")\n\n        labels = _.map @pizzaSurvey.rows.pluck(\"label\"), (i)-> i.get(\"value\")\n        expect(labels).toEqual([ 'first row', 'second row', 'Do you like pizza?', 'last row' ])\n\n    it \"row types changing is trackable\", ->\n      expect(@firstRow.getValue(\"type\")).toBe(\"select_one yes_no\")\n      typeDetail = @firstRow.get(\"type\")\n      expect(typeDetail.get(\"typeId\")).toBe(\"select_one\")\n      expect(typeDetail.get(\"list\").get(\"name\")).toBe \"yes_no\"\n\n      list = @firstRow.getList()\n      expect(list).toBeDefined()\n      expect(list.get(\"name\")).toBe(\"yes_no\")\n\n  describe \"with custom surveys\", ->\n    beforeEach ->\n      @createSurveyCsv = (survey=[],choices=[])->\n        choiceSheet = if choices.length is 0 then \"\" else \"\"\"\n        choices,,,\n        ,list name,name,label\n        ,#{choices.join(\"\\n,\")}\n        \"\"\"\n        \"\"\"\n        survey,,,\n        ,type,name,label,hint\n        ,#{survey.join(\"\\n,\")}\n        #{choiceSheet}\n        \"\"\"\n      @createSurvey = (survey=[],choices=[])=>\n        $model.Survey.load @createSurveyCsv survey, choices\n      @firstRow = (s)-> s.rows.at(0)\n      @compareCsvs = (x1, x2)->\n        x1r = x1.split(\"\\n\")\n        x2r = x2.split(\"\\n\")\n        for r in _.min([x1r.length, x2r.length])\n          expect(x1r[r]).toBe(x2r[r])\n        expect(x1).toBe(x2)\n\n      @dumpAndLoad = (scsv)=>\n        s1 = $model.Survey.load scsv\n        x1 = s1.toCSV()\n        s2 = $model.Survey.load x1\n        x2 = s2.toCSV()\n        @compareCsvs(x1, x2)\n\n    it \"breaks with an unk qtype\", ->\n      # makeInvalidTypeSurvey = =>\n      #   @createSurvey [\"telegram,a,a,a\"]\n      # expect(makeInvalidTypeSurvey).toThrow()\n\n    it \"exports and imports without breaking\", ->\n      # this is _the one_ that breaks :|\n      # scsv = @createSurveyCsv [\"text,text,text,text\"]\n      # @dumpAndLoad scsv\n\n    it \"reflects correct required value\", ->\n      processed_required = (val)->\n        $model.Survey.loadDict({\n          survey: [\n              {type: 'text',\n              name: 'nm',\n              required: val}\n            ]\n          }).toFlatJSON().survey[0].required\n\n      # being very thorough in the things that can reflect required\n      # true/false values\n      expect(processed_required('true')).toEqual('true')\n      expect(processed_required('TRUE')).toEqual('true')\n      expect(processed_required('yes')).toEqual('true')\n      expect(processed_required('YES')).toEqual('true')\n      expect(processed_required(true)).toEqual('true')\n\n      expect(processed_required('false')).toEqual('false')\n      expect(processed_required('FALSE')).toEqual('false')\n      expect(processed_required('NO')).toEqual('false')\n      expect(processed_required('no')).toEqual('false')\n      expect(processed_required(false)).toEqual('false')\n\n      expect(processed_required(`undefined`)).toEqual('false')\n      expect(processed_required('')).toEqual('false')\n\n  describe 'test start questions', ->\n    beforeEach ->\n      @srv = $model.Survey.loadDict({\n        survey: [\n          {\n            type: 'start',\n            name: 'start',\n          },\n        ]\n      })\n    it \"loads start meta question\", ->\n      start_sd = @srv.surveyDetails.get('start')\n      expect(start_sd.get('name')).toEqual('start')\n      expect(start_sd.get('value')).toEqual(true)\n\n  describe 'test background-audio questions', ->\n    beforeEach ->\n      @srv = $model.Survey.loadDict({\n        survey: [\n          {\n            type: 'background-audio',\n            name: 'background-audio',\n          },\n        ]\n      })\n\n    it \"loads background-audio with parameters\", ->\n      srv = $model.Survey.loadDict({\n        survey: [\n          {\n            type: 'background-audio',\n            name: 'background-audio',\n            parameters: 'quality=99'\n          },\n        ]\n      })\n      exported = srv.toJSON()\n      expect(exported.survey[0].parameters).toEqual('quality=99')\n\n    it \"loads bg audio meta question\", ->\n      sd1 = @srv.surveyDetails.get('background-audio')\n      expect(sd1.get('name')).toEqual('background-audio')\n      expect(sd1.get('value')).toEqual(true)\n\n    it \"when value is false (un-checked in the interace), no row is added\", ->\n      @srv.surveyDetails.get('background-audio').set('value', false)\n      exported = @srv.toJSON()\n      expect(exported.survey.length).toEqual(0)\n\n    it \"exports to json properly\", ->\n      exported = @srv.toJSON()\n      expect(exported.survey[0].type).toEqual('background-audio')\n      expect(exported.survey[0].name).toEqual('background-audio')\n\n    it \"captures required values\", ->\n      srv = $model.Survey.loadDict({\n          survey: [\n            {\n              type: 'text',\n              name: 'q1',\n              required: true\n            },\n            {\n              type: 'text',\n              name: 'q2',\n              required: false\n            }\n          ]\n        })\n      exported = srv.toJSON()\n      expect(exported.survey[0]['required']).toEqual('true')\n      expect(exported.survey[1]['required']).toEqual('false')\n\n    it \"tries a few question types\", ->\n      srv = @createSurvey [\"text,text,text,text\"]\n      row1 = srv.rows.at(0)\n\n      r1type = row1.get(\"type\")\n      expect(r1type.get(\"rowType\").name).toBe(\"text\")\n\n      # # a survey with 2 lists: \"x\" and \"y\"\n      srv = @createSurvey [\"\"\"\"select_multiple x\",a,a,a\"\"\"],\n                          [\"x,ax,ax\",\"x,bx,bx,\",\"y,ay,ay\",\"y,by,by\"]\n\n      row1 = srv.rows.at(0)\n      r1type = row1.get(\"type\")\n      expect(r1type.get(\"typeId\")).toBe(\"select_multiple\")\n      expect(r1type.get(\"list\").get(\"name\")).toBe(\"x\")\n      expect(row1.getList().get(\"name\")).toBe(\"x\")\n      # change row to to \"select_multiple y\".\n\n      r1type.set(\"value\", \"select_multiple y\")\n      expect(r1type.get(\"typeId\")).toBe(\"select_multiple\")\n      expect(r1type.get(\"list\").get(\"name\")).toBe(\"y\")\n      expect(row1.toJSON().type).toBe(\"select_multiple y\")\n      expect(row1.getList().get(\"name\")).toBe(\"y\")\n\n      # change row to \"text\"\n      row1.get(\"type\").set(\"value\", \"text\")\n      expect(row1.get(\"type\").get(\"value\")).toBe(\"text\")\n\n      # Right now, thinking that we should keep the list around\n      # and test to make sure the exported value doesn't have a list\n      expect(row1.get(\"type\").get(\"list\").get(\"name\")).toBeDefined()\n      expect(row1.getList().get(\"name\")).toBeDefined()\n      expect(row1.toJSON().type).toBe(\"text\")\n\n      # # adding an invalid list will break things.\n      #\n      # I'm thinking: adding an invalid list will only break validation of\n      # the survey. If it's not defined, it will prompt the user to make\n      # the row valid.\n      #\n      # setToInvalidList = ()->\n      #   row1.get(\"type\").set(\"value\", \"select_one badlist\")\n      # expect(setToInvalidList).toThrow()\n      ``\n  describe \"groups\", ->\n    it \"cannot add a group by adding a row type=group\", ->\n      @pizzaSurvey.addRow type: \"text\", name: \"pizza\", hint: \"pizza\", label: \"pizza\"\n      expect(@pizzaSurvey.rows.last() instanceof $model.Row).toBe(true)\n      expect(@pizzaSurvey.rows.length).toBe(2)\n      @pizzaSurvey.addRow type: \"group\", name: \"group\"\n      expect(@pizzaSurvey.rows.length).toBe(3)\n      grp = @pizzaSurvey.rows.last()\n      expect(grp instanceof $model.BaseRow).toBe(true)\n\n    it \"exports group to json\", ->\n      @pizzaSurvey.addRow type: \"text\", name: \"pizza\", hint: \"pizza\", label: \"pizza\"\n      expect(@pizzaSurvey.rows.last() instanceof $model.Row).toBe(true)\n      expect(@pizzaSurvey.rows.length).toBe(2)\n      @pizzaSurvey.addRow type: \"group\", name: \"group\"\n      expect(@pizzaSurvey.rows.length).toBe(3)\n      grp = @pizzaSurvey.rows.last()\n      _as_json = @pizzaSurvey.toFlatJSON()\n      survey_kuids = _as_json.survey.map((r)=>r['$kuid'])\n      for kuid in survey_kuids\n        expect(kuid).toBeDefined()\n\n  describe \"automatic naming\", ->\n    it \"can import questions without names\", ->\n      survey = @createSurvey([\n        \"text,,\\\"Label with no name\\\"\"\n        ])\n      expect(survey.rows.at(0)?.get(\"name\").getValue()).not.toBeTruthy()\n    it \"can finalize survey and generate names\", ->\n      survey = @createSurvey([\n        \"text,,\\\"Label with no name\\\"\"\n        ])\n      expect(survey.rows.at(0)?.get(\"name\").getValue()).not.toBeTruthy()\n      survey.rows.at(0).finalize()\n      expect(survey.rows.at(0)?.get(\"name\").getValue()).toBe(\"Label_with_no_name\")\n    it \"increments names that are already taken\", ->\n      survey = @createSurvey([\n        \"text,question_one,\\\"already named question_one\\\"\",\n        \"text,,\\\"question one\\\"\"\n        ])\n      # as imported\n      expect(survey.rows.at(0)?.get(\"name\").getValue()).toBe(\"question_one\")\n      # incremented from other question\n      expect(survey.finalize().rows.at(1)?.get(\"name\").getValue()).toBe(\"question_one_001\")\n\n  describe \"lists\", ->\n    it \"can change a list for a question\", ->\n      # add a new list. \"yes, no, maybe\"\n      @pizzaSurvey.choices.add(name: \"yes_no_maybe\")\n      ynm = @pizzaSurvey.choices.get(\"yes_no_maybe\")\n      expect(ynm).toBeDefined()\n\n      # test original state\n      firstRow = @pizzaSurvey.rows.first()\n      expect(firstRow.getList().get(\"name\")).toBe(\"yes_no\")\n\n      # change the list for first question to be \"yes_no_maybe\" instead of \"yes_no\"\n      expect(firstRow.getList().get(\"name\")).toBe(\"yes_no\")\n      firstRow.setList(ynm)\n      expect(firstRow.getList().get(\"name\")).toBe(\"yes_no_maybe\")\n\n      # change it back\n      firstRow.setList(\"yes_no\")\n      expect(firstRow.getList().get(\"name\")).toBe(\"yes_no\")\n\n      # cannot change it to a nonexistant list\n      expect(-> firstRow.setList(\"nonexistant_list\")).toThrow()\n\n      # changing name of list object will not unlink the list\n      list = firstRow.getList()\n      list.set(\"name\", \"no_yes\")\n      expect(firstRow.getList()).toBeDefined()\n      expect(firstRow.getList()?.get(\"name\")).toBe(\"no_yes\")\n\n    it \"can change options for a list\", ->\n      yn = @pizzaSurvey.choices.get(\"yes_no\")\n      expect(yn.options).toBeDefined()\n\n      @pizzaSurvey.choices.add(name: \"yes_no_maybe\")\n      ynm = @pizzaSurvey.choices.get(\"yes_no_maybe\")\n      expect(ynm).toBeDefined()\n\n      expect(ynm.options.length).toBe(0)\n      ynm.options.add name: \"maybe\", label: \"Maybe\"\n      ynm.options.add [{name: \"yes\", label: \"Yes\"}, {name: \"no\", label: \"No\"}]\n      expect(ynm.options.length).toBe(3)\n\n  describe \"census xlform\", ->\n    beforeEach ->\n      @census = $model.Survey.load(CENSUS_SURVEY)\n    it \"looks good\", ->\n      expect(@census).toBeDefined()\n\n# simple fixtures for tests above\nPIZZA_SURVEY = \"\"\"\n  survey,,,\n  ,type,name,label\n  ,select_one yes_no,likes_pizza,Do you like pizza?\n  choices,,,\n  ,list name,name,label\n  ,yes_no,yes,Yes\n  ,yes_no,no,No\n  \"\"\"\n\nCENSUS_SURVEY = \"\"\"\n  \"survey\",\"type\",\"name\",\"label\"\n  ,\"integer\",\"q1\",\"How many people were living or staying in this house, apartment, or mobile home on April 1, 2010?\"\n  ,\"select_one yes_no\",\"q2\",\"Were there any additional people staying here April 1, 2010 that you did not include in Question 1?\"\n  ,\"select_one ownership_type or_other\",\"q3\",\"Is this house, apartment, or mobile home: owned with mortgage, owned without mortgage, rented, occupied without rent?\"\n  ,\"text\",\"q4\",\"What is your telephone number?\"\n  ,\"text\",\"q5\",\"Please provide information for each person living here. Start with a person here who owns or rents this house, apartment, or mobile home. If the owner or renter lives somewhere else, start with any adult living here. This will be Person 1. What is Person 1's name?\"\n  ,\"select_one male_female\",\"q6\",\"What is Person 1's sex?\"\n  ,\"date\",\"q7\",\"What is Person 1's age and Date of Birth?\"\n  ,\"text\",\"q8\",\"Is Person 1 of Hispanic, Latino or Spanish origin?\"\n  ,\"text\",\"q9\",\"What is Person 1's race?\"\n  ,\"select_one yes_no\",\"q10\",\"Does Person 1 sometimes live or stay somewhere else?\"\n  \"choices\",\"list name\",\"name\",\"label\"\n  ,\"yes_no\",\"yes\",\"Yes\"\n  ,\"yes_no\",\"no\",\"No\"\n  ,\"male_female\",\"male\",\"Male\"\n  ,\"male_female\",\"female\",\"Female\"\n  ,\"ownership_type\",\"owned_with_mortgage\",\"owned with mortgage\",\n  ,\"ownership_type\",\"owned_without_mortgage\",\"owned without mortgage\"\n  ,\"ownership_type\",\"rented\",\"rented\"\n  ,\"ownership_type\",\"occupied_without_rent\",\"occupied without rent\"\n  \"settings\"\n  ,\"form_title\",\"form_id\"\n  ,\"Census Questions (2010)\",\"census2010\"\n  \"\"\"\n\nLISTS =\n  yes_no:\n    name: \"yes_no\"\n    options: [\n      {\"list name\": \"yes_no\", name: \"yes\", label: \"Yes\"},\n      {\"list name\": \"yes_no\", name: \"no\", label: \"No\"}\n    ]\n  gender:\n    name: \"gender\"\n    options: [\n      {\"list name\": \"gender\", name: \"f\", label: \"Female\"},\n      {\"list name\": \"gender\", name: \"m\", label: \"Male\"}\n    ]\n\ndescribe \"xlform survey model\", -> xlform_survey_model.call(@, $model)\n","{expect} = require('../helper/fauxChai')\n\n$model = require(\"../../jsapp/xlform/src/_model\")\n\ndo ->\n  surveys = {}\n  surveys.group = \"\"\"\n      survey,,,\n      ,type,name,label\n      ,text,q1,Question1\n      ,begin group,grp,\n      ,text,g1q1,Group1Question1\n      ,text,g1q2,Group1Question2\n      ,end group,,\n      \"\"\"\n  surveys.iterateOver = \"\"\"\n      survey,,,\n      ,type,name,label\n      ,text,q1,Question1\n      ,begin group,grp,\n      ,text,g1q1,Group1Question1\n      ,text,g1q2,Group1Question2\n      ,end group,,\n      ,text,q8,Question8\n      ,text,q9,Question9\n      ,err,err,err\n      \"\"\"\n  surveys.singleQ = \"\"\"\n      survey,,,\n      ,type,name,label\n      ,text,q1,Question1\n      \"\"\"\n  surveys.withChoices = \"\"\"\n      survey,,,\n      ,type,name,label\n      ,select_one yesno,yn,YesNo\n      choices,,,\n      ,list name,label,name\n      ,yesno,Yes,yes\n      ,yesno,No,no\n      \"\"\"\n  describe 'survey.tests: Row content', ->\n    it 'properly sluggifies row labels', ->\n      survey = new $model.Survey()\n      survey.rows.add(type: 'text', label: 'how many people?')\n      expect(survey.rows.length).toBe(1)\n      lastRow = survey.rows.at(0)\n      expect(lastRow.get('name').get('value')).toBe('')\n      expect(lastRow.get('label').get('value')).toBe('how many people?')\n      lastRow.finalize()\n      expect(lastRow.get('name').get('value')).toBe('how_many_people')\n\n  describe 'survey.tests: Row types', ->\n    beforeEach ->\n      window.xlfHideWarnings = true\n      @survey = new $model.Survey()\n    afterEach -> window.xlfHideWarnings = false\n\n    describe 'populates default values properly', ->\n      beforeEach ->\n        @populateRow = (opts={})=>\n          @survey.rows.add(opts)\n          @row = @survey.rows.at(0)\n        @expectValue = (key)->\n          expect(@row.get(key).get('value'))\n      it 'text is required', ->\n        @populateRow(type: 'text')\n        @expectValue('required').toBe(false)\n      it 'select one is required', ->\n        @populateRow(type: 'select_one')\n        @expectValue('required').toBe(false)\n      it 'integer is required', ->\n        @populateRow(type: 'integer')\n        @expectValue('required').toBe(false)\n      it 'geopoint is not required', ->\n        @populateRow(type: 'geopoint')\n        @expectValue('required').toBe(false)\n      it 'geotrace is not required', ->\n        @populateRow(type: 'geotrace')\n        @expectValue('required').toBe(false)\n      it 'geoshape is not required', ->\n        @populateRow(type: 'geoshape')\n        @expectValue('required').toBe(false)\n      it 'note is not required', ->\n        @populateRow(type: 'note')\n        @expectValue('required').toBe(false)\n\n    it 'has a valid empty survey', ->\n      expect(@survey.toCSV()).toBeDefined()\n    it 'can add rows to the survey', ->\n      @survey.rows.add type: 'text', name: 'q1'\n      expect(@survey.rows.at(0).toJSON().name).toBe('q1')\n      @survey.rows.add type: '_errortype', name: 'q2'\n      expect(@survey.rows.at(1).toJSON().type).toBe('_errortype')\n      @survey.rows.add type: 'note', name: 'q3'\n      expect(@survey.rows.at(2).toJSON().type).toBe('note')\n\n  describe 'Survey load', ->\n    beforeEach ->\n      @_load_csv = (scsv)=>\n        @survey = $model.Survey.load(scsv)\n      @_load_md = (md)=>\n        @survey = $model.Survey.load.md(md)\n      @expectKeys = (obj, keys)->\n        expect (obj[key]  for key in keys)\n\n    it 'loads a single question survey', ->\n      @_load_csv(surveys.singleQ)\n      @expectKeys(@survey.toCsvJson().survey.rowObjects[0],\n          ['type', 'name', 'label']).toEqual(['text', 'q1', 'Question1'])\n\n    it 'loads a multiple choice survey', ->\n      @_load_csv(surveys.withChoices)\n      _results = @survey.toJSON()\n      for row in _results.survey\n        expect(row['$kuid']).toBeDefined()\n        delete row['$kuid']\n      expect(_results).toEqual({\n          'survey': [\n            {\n              'type': 'select_one',\n              'select_from_list_name': 'yesno',\n              'name': 'yn',\n              'label': 'YesNo',\n              'required': 'false'\n            }\n          ],\n          'choices': {\n            'yesno': [\n              {\n                'label': 'Yes',\n                'name': 'yes'\n              },\n              {\n                'label': 'No',\n                'name': 'no'\n              }\n            ]\n          }\n        })\n    describe 'survey row reordering', ->\n      beforeEach ->\n        @surveyNames = ->\n          names = []\n          getName = (r)-> names.push r.get('name').get('value')\n          @survey.forEachRow(getName, includeGroups: true)\n          names\n      it 'can switch ABC -> ACB', ->\n        @_load_csv \"\"\"\n        survey,,,\n        ,type,name,label\n        ,text,qa,QuestionA\n        ,text,qb,QuestionB\n        ,text,qc,QuestionC\n        \"\"\"\n        expect(@surveyNames()).toEqual(['qa', 'qb', 'qc'])\n        [qa, qb, qc] = @survey.rows.models\n        _parent = qa._parent\n        @survey._insertRowInPlace(qc, previous: qa)\n        expect(qc._parent).toBe(_parent)\n        expect(@surveyNames()).toEqual(['qa', 'qc', 'qb'])\n\n    describe 'forEachRow iterator tests', ->\n      beforeEach ->\n        window.xlfHideWarnings = true\n\n        @_load_csv surveys.iterateOver\n        @getProp = (propName, arr)->\n          (r)->\n            arr.push r.get(propName)?.get('value')\n      afterEach -> window.xlfHideWarnings = false\n\n      it 'runs normally', ->\n        # without any options, it will skip the group but iterate\n        # through the rows of the group\n        @survey.forEachRow @getProp('name', names = [])\n        expect(names).toEqual('q1 g1q1 g1q2 q8 q9'.split(' '))\n\n      it 'runs flat', ->\n        # when flat:true option is passed, it will not iterate through\n        # any nested groups\n        options =\n          flat: true\n\n        @survey.forEachRow @getProp('name', names = []), options\n        expect(names).toEqual('q1 q8 q9'.split(' '))\n\n      it 'runs with includeGroups', ->\n        # when includeGroups:true , it will include the group and the nested\n        # values\n        options =\n          includeGroups: true\n\n        @survey.forEachRow @getProp('name', names = []), options\n        expect(names).toEqual('q1 grp g1q1 g1q2 q8 q9'.split(' '))\n\n      it 'runs with includeGroups', ->\n        # when includeGroups:true , it will include the group and the nested\n        # values\n        options =\n          includeGroups: true\n\n        @survey.forEachRow @getProp('name', names = []), options\n        expect(names).toEqual('q1 grp g1q1 g1q2 q8 q9'.split(' '))\n\n      it 'runs with includeErrors', ->\n        # when includeErrors:true, it will include erroneous rows\n        options =\n          includeErrors: true\n\n        @survey.forEachRow @getProp('name', names = []), options\n        expect(names).toEqual('q1 g1q1 g1q2 q8 q9 err'.split(' '))\n\n\n  describe 'survey.tests: form_id auto-naming', () ->\n    describe 'initialization', () ->\n      it 'enables auto-naming when form is new', () ->\n        survey = new $model.Survey()\n        expect(survey.settings.auto_name).toBe true\n    describe 'change:form_id', () ->\n      it 'disables auto naming when changed manually', () ->\n        settings = new $model.Settings()\n        settings.enable_auto_name()\n        settings.set 'form_id', 'test'\n\n        expect(settings.auto_name).toBe false\n      it 'ignores when changed as part of a title change', () ->\n        settings = new $model.Settings()\n        settings.enable_auto_name()\n        settings.set 'form_title', 'test'\n\n        expect(settings.auto_name).toBe true\n    describe 'change:form_title', () ->\n      it 'sets the form id when form in auto naming mode', () ->\n        settings = new $model.Settings()\n        settings.enable_auto_name()\n        settings.set 'form_title', 'test'\n\n        expect(settings.get('form_id')).toBe 'test'\n      it 'sluggifies label before setting id', () ->\n        settings = new $model.Settings()\n        settings.enable_auto_name()\n        settings.set 'form_title', 'test me'\n\n        expect(settings.get('form_id')).toBe 'test_me'\n\n  describe 'survey.tests: prep_cols', () ->\n    it 'flattens and deduplicates arrays of strings', () ->\n      survey = new $model.Survey()\n      expect(survey.prepCols [['a', 'b'], ['b', 'c'], ['e', 'a', 'd']]).toEqual ['a', 'b', 'c', 'e', 'd']\n\n    it 'excludes passed array of strings from result', () ->\n      survey = new $model.Survey()\n      expect(survey.prepCols [['a', 'b'], ['b', 'c'], ['e', 'a', 'de']], exclude: ['de']).toEqual ['a', 'b', 'c', 'e']\n\n    it 'add passed string to result', () ->\n      survey = new $model.Survey()\n      expect(survey.prepCols [['a', 'b'], ['b', 'c'], ['e', 'a', 'de']], exclude: ['de'], add: ['abc']).toEqual ['a', 'b', 'c', 'e', 'abc']\n","{expect} = require('../helper/fauxChai')\n$utils = require(\"../../jsapp/xlform/src/model.utils\")\n\npasted = [\n            [\"list_name\", \"name\", \"label\", \"state\", \"county\"],\n            [\"state\", \"texas\", \"Texas\", \"\"],\n            [\"state\", \"washington\", \"Washington\", \"\"],\n            [\"county\", \"king 1\", \"King\", \"washington\", \"\"],\n            [\"county\", \"pierce\", \"Pierce\", \"washington\", \"\"],\n            [\"county\", \"king 2\", \"King\", \"texas\", \"\"],\n            [\"county\", \"cameron\", \"Cameron\", \"texas\", \"\"],\n            [\"city\", \"dumont\", \"Dumont\", \"texas\", \"king 2\"],\n            [\"city\", \"finney\", \"Finney\", \"texas\", \"king 2\"],\n            [\"city\", \"brownsville\", \"brownsville\", \"texas\", \"cameron\"],\n            [\"city\", \"harlingen\", \"harlingen\", \"texas\", \"cameron\"],\n            [\"city\", \"seattle\", \"Seattle\", \"washington\", \"king 1\"],\n            [\"city\", \"redmond\", \"Redmond\", \"washington\", \"king 1\"],\n            [\"city\", \"tacoma\", \"Tacoma\", \"washington\", \"pierce\"],\n            [\"city\", \"puyallup\", \"Puyallup\", \"washington\", \"pierce\"]\n        ].map((r)-> r.join(\"\\t\")).join(\"\\n\")\n\nexpectation = JSON.parse(\"\"\"\n[\n    {\n        \"list_name\": \"state\",\n        \"name\": \"texas\",\n        \"label\": \"Texas\"\n    },\n    {\n        \"list_name\": \"state\",\n        \"name\": \"washington\",\n        \"label\": \"Washington\"\n    },\n    {\n        \"list_name\": \"county\",\n        \"name\": \"king 1\",\n        \"label\": \"King\",\n        \"state\": \"washington\"\n    },\n    {\n        \"list_name\": \"county\",\n        \"name\": \"pierce\",\n        \"label\": \"Pierce\",\n        \"state\": \"washington\"\n    },\n    {\n        \"list_name\": \"county\",\n        \"name\": \"king 2\",\n        \"label\": \"King\",\n        \"state\": \"texas\"\n    },\n    {\n        \"list_name\": \"county\",\n        \"name\": \"cameron\",\n        \"label\": \"Cameron\",\n        \"state\": \"texas\"\n    },\n    {\n        \"list_name\": \"city\",\n        \"name\": \"dumont\",\n        \"label\": \"Dumont\",\n        \"state\": \"texas\",\n        \"county\": \"king 2\"\n    },\n    {\n        \"list_name\": \"city\",\n        \"name\": \"finney\",\n        \"label\": \"Finney\",\n        \"state\": \"texas\",\n        \"county\": \"king 2\"\n    },\n    {\n        \"list_name\": \"city\",\n        \"name\": \"brownsville\",\n        \"label\": \"brownsville\",\n        \"state\": \"texas\",\n        \"county\": \"cameron\"\n    },\n    {\n        \"list_name\": \"city\",\n        \"name\": \"harlingen\",\n        \"label\": \"harlingen\",\n        \"state\": \"texas\",\n        \"county\": \"cameron\"\n    },\n    {\n        \"list_name\": \"city\",\n        \"name\": \"seattle\",\n        \"label\": \"Seattle\",\n        \"state\": \"washington\",\n        \"county\": \"king 1\"\n    },\n    {\n        \"list_name\": \"city\",\n        \"name\": \"redmond\",\n        \"label\": \"Redmond\",\n        \"state\": \"washington\",\n        \"county\": \"king 1\"\n    },\n    {\n        \"list_name\": \"city\",\n        \"name\": \"tacoma\",\n        \"label\": \"Tacoma\",\n        \"state\": \"washington\",\n        \"county\": \"pierce\"\n    },\n    {\n        \"list_name\": \"city\",\n        \"name\": \"puyallup\",\n        \"label\": \"Puyallup\",\n        \"state\": \"washington\",\n        \"county\": \"pierce\"\n    }\n]\n\"\"\")\n\n\ndo ->\n  describe 'model.utils', ->\n    describe 'pasted', ->\n      _eqKeyVals = (a, b)->\n        expect(_.keys(a).sort().join(',')).toEqual(_.keys(b).sort().join(','))\n        expect(_.values(a).sort().join(',')).toEqual(_.values(b).sort().join(','))\n\n      it 'splits pasted code into appropriate chunks', ->\n        splitted = $utils.split_paste(pasted)\n        expect(splitted.length).toEqual(expectation.length)\n        for i in [0..splitted.length]\n            _eqKeyVals(splitted[i], expectation[i])\n\n    describe 'sluggify', ->\n      it 'lowerCases: true', ->\n        expect($utils.sluggify(\"TESTING LOWERCASE TRUE\", lowerCase: true)).toEqual('testing_lowercase_true')\n      it 'lowerCases: false', ->\n        expect($utils.sluggify(\"TESTING LOWERCASE FALSE\", lowerCase: false)).toEqual('TESTING_LOWERCASE_FALSE')\n      it 'isValidXmlTag passes with valid strings', ->\n        valid_xml = [\n          'abc',\n          '_123',\n          'a456',\n          '_.',\n        ]\n        for str in valid_xml\n          expect($utils.isValidXmlTag(str)).toBeTruthy()\n      it 'isValidXmlTag fails with invalid strings', ->\n        invalid_xml = [\n          '1xyz',\n          ' startswithspace',\n          '._',\n        ]\n        for str in invalid_xml\n          expect($utils.isValidXmlTag(str)).not.toBeTruthy()\n\n      it 'handles a number of strings consistenly', ->\n        inp_exps = [\n            [[\"asdf jkl\"],              \"asdf_jkl\"],\n            [[\"asdf\", [\"asdf\"]],        \"asdf_001\"],\n            [[\"2. asdf\"],               \"_2_asdf\"],\n            [[\"2. asdf\", [\"_2_asdf\"]],  \"_2_asdf_001\"],\n            [[\"asdf#123\"],              \"asdf_123\"],\n            [[\" hello \"],               \"hello\"],\n        ]\n        for [inps, exps], i in inp_exps\n          [str, additionals] = inps\n          _out = $utils.sluggifyLabel(str, additionals)\n          expect(_out).toBe(exps)\n\n","import {\n  getLangAsObject,\n  getLangString,\n  truncateString,\n  truncateUrl,\n  truncateFile,\n  generateAutoname,\n} from 'utils';\n\ndescribe('utils', () => {\n  describe('getLangAsObject', () => {\n    it('should return object for valid langString', () => {\n      const langObj = getLangAsObject('English (en)');\n      chai.expect(langObj.name).to.equal('English');\n      chai.expect(langObj.code).to.equal('en');\n    });\n\n    it('should return undefined for invalid langString', () => {\n      chai.expect(getLangAsObject('English')).to.equal(undefined);\n      chai.expect(getLangAsObject('(en)')).to.equal(undefined);\n      chai.expect(getLangAsObject('English [en]')).to.equal(undefined);\n      chai.expect(getLangAsObject('English, en')).to.equal(undefined);\n      chai.expect(getLangAsObject('English: en')).to.equal(undefined);\n      chai.expect(getLangAsObject('(en) English')).to.equal(undefined);\n      chai.expect(getLangAsObject('English (en) (fr) (de)')).to.equal(undefined);\n      chai.expect(getLangAsObject('Pizza time!')).to.equal(undefined);\n    });\n\n    it('should work properly with getLangString', () => {\n      const langObj = getLangAsObject(getLangString({\n        name: 'English',\n        code: 'en'\n      }));\n      chai.expect(langObj.name).to.equal('English');\n      chai.expect(langObj.code).to.equal('en');\n    });\n  });\n\n  describe('getLangString', () => {\n    it('should return valid langString from langObj', () => {\n      const langString = getLangString({\n        name: 'English',\n        code: 'en'\n      });\n      chai.expect(langString).to.equal('English (en)');\n    });\n\n    it('should return nothing for invalid object', () => {\n      const langString = getLangString({\n        pizzaType: 2,\n        delivery: false\n      });\n      chai.expect(langString).to.equal(undefined);\n    });\n\n    it('should work properly with getLangAsObject', () => {\n      const langString = getLangString(getLangAsObject('English (en)'));\n      chai.expect(langString).to.equal('English (en)');\n    });\n  });\n\n  describe(\"truncateString, truncateUrl, truncateFile\", () => {\n    it(\"should not truncate strings shorter than specified length\", () => {\n      const testString = \"veryShortString\";\n      const testLength = 1000;\n      chai.expect(truncateString(testString, testLength)).to.equal(testString);\n    });\n\n    it(\"should not apply extension truncation to when there is no extension\", () => {\n      const testString = \"veryShortString\";\n      const testLength = 1000;\n      chai\n        .expect(truncateFile(testString, testLength))\n        .to.equal(testString);\n    });\n\n    it(\"should not apply protocol truncation to when there is no protocol\", () => {\n      const testString = \"veryShortString\";\n      const testLength = 1000;\n      chai\n        .expect(truncateUrl(testString, testLength))\n        .to.equal(testString);\n    });\n\n    it(\"should return exactly `length` characters\", () => {\n      const testString = \"veryShortString\";\n      const testLength = 5;\n      chai\n        .expect(truncateString(testString, testLength).length)\n        .to.equal(testLength);\n    });\n\n    it(\"should remove extensions if specified\", () => {\n      const testString = \"veryShortString.xml\";\n      const testLength = 10;\n      chai\n        .expect(truncateFile(testString, testLength))\n        .to.equal(\"veryS…tring\");\n    });\n\n    it(\"should remove protocols if specified\", () => {\n      const testString = \"http://veryShortString.com\";\n      const testLength = 10;\n      chai\n        .expect(truncateUrl(testString, testLength))\n        .to.equal(\"veryS…g.com\");\n    });\n\n    it(\"should impose its type specific truncation regardless of content\", () => {\n      const testString = \"http://veryShortString.com\";\n      const testLength = 10;\n      chai\n        .expect(truncateFile(testString, testLength))\n        .to.equal(\"http:…tring\");\n    });\n  });\n\n  describe(\"generateAutoname\", () => {\n    it(\"should use default values if only string is specified\", () => {\n      const testString = \"veryShortString\";\n      chai.expect(generateAutoname(testString)).to.equal(\"veryshortstring\");\n    });\n\n    it(\"should create a proper substring\", () => {\n      const testString = \"veryShortString\";\n      const INDEX_FIRST_WORD = 4;\n      const INDEX_LAST_WORD = 9;\n      chai\n        .expect(generateAutoname(testString, INDEX_FIRST_WORD, INDEX_LAST_WORD))\n        .to.equal(\"short\");\n    });\n\n    it(\"should change all spaces to underscores\", () => {\n      const testString = \"i am   a very long na   me with  weird s      paces\";\n      chai\n        // TODO: See if backend uses single or multiple underscores for spaces\n        .expect(generateAutoname(testString))\n        .to.equal(\"i_am___a_very_long_na___me_with__weird_s______paces\");\n    });\n\n    it(\"should create a proper substring and change all spaces to underscores\", () => {\n      const testString = \"i am   a very long na   me with  weird s      paces\";\n      const INDEX_FIRST_WORD = 4;\n      const INDEX_LAST_WORD = 21;\n      chai\n        .expect(generateAutoname(testString, INDEX_FIRST_WORD, INDEX_LAST_WORD))\n        .to.equal(\"___a_very_long_na\");\n    });\n  });\n});\n","import {\n  readParameters,\n  writeParameters,\n  nullifyTranslations,\n  unnullifyTranslations,\n} from 'js/components/formBuilder/formBuilderUtils';\n\ndescribe('translations hack', () => {\n  describe('nullifyTranslations', () => {\n    it('should return array with null for no translations', () => {\n      const test = {\n        survey: [{\n          'label': ['Hello']\n        }]\n      };\n      const target = {\n        survey: [{'label': ['Hello']}],\n        translations: [null]\n      }\n      expect(\n        nullifyTranslations(test.translations, test.translated, test.survey, test.baseSurvey)\n      ).to.deep.equal(target);\n    });\n\n    it('should throw if there are unnamed translations', () => {\n      const test = {\n        survey: [{\n          'label': ['Hello']}\n        ],\n        translations: [\n          null,\n          'English (en)'\n        ]\n      };\n      expect(() => {\n        nullifyTranslations(test.translations, test.translated, test.survey, test.baseSurvey);\n      }).to.throw();\n    });\n\n    it('should not reorder anything if survey has same default language as base survey', () => {\n      const test = {\n        baseSurvey: {_initialParams: {translations_0: 'English (en)'}},\n        survey: [{\n          'label': [\n            'Hello',\n            'Cześć'\n          ]\n        }],\n        translations: [\n          'English (en)',\n          'Polski (pl)'\n        ],\n        translated: [\n          'label'\n        ]\n      };\n      const target = {\n        survey: [{\n          'label': [\n            'Hello',\n            'Cześć'\n          ]\n        }],\n        translations: [\n          null,\n          'Polski (pl)'\n        ],\n        translations_0: 'English (en)'\n      }\n      expect(\n        nullifyTranslations(test.translations, test.translated, test.survey, test.baseSurvey)\n      ).to.deep.equal(target);\n    });\n\n    it('should reorder translated props if survey has same default language as base survey but in different order', () => {\n      const test = {\n        baseSurvey: {_initialParams: {translations_0: 'English (en)'}},\n        survey: [{\n          'label': [\n            'Allo',\n            'Cześć',\n            'Hello'\n          ]\n        }],\n        translations: [\n          'Francais (fr)',\n          'Polski (pl)',\n          'English (en)'\n        ],\n        translated: [\n          'label'\n        ]\n      };\n      const target = {\n        survey: [{\n          'label': [\n            'Hello' ,\n            'Allo',\n            'Cześć'\n          ]\n        }],\n        translations: [\n          null,\n          'Francais (fr)',\n          'Polski (pl)'\n        ],\n        translations_0: 'English (en)'\n      }\n      expect(\n        nullifyTranslations(test.translations, test.translated, test.survey, test.baseSurvey)\n      ).to.deep.equal(target);\n    });\n\n    it('should add base survey\\'s default language if survey doesn\\'t have it', () => {\n      const test = {\n        baseSurvey: {_initialParams: {translations_0: 'English (en)'}},\n        survey: [{\n          'label': [\n            'Allo',\n            'Cześć'\n          ],\n          name: 'welcome_message'\n        }],\n        translations: [\n          'Francais (fr)',\n          'Polski (pl)'\n        ],\n        translated: [\n          'label'\n        ]\n      };\n      const target = {\n        survey: [{\n          'label': [\n            'welcome_message',\n            'Allo',\n            'Cześć'\n          ],\n          name: 'welcome_message'\n        }],\n        translations: [\n          null,\n          'Francais (fr)',\n          'Polski (pl)'\n        ],\n        translations_0: 'English (en)'\n      }\n      expect(\n        nullifyTranslations(test.translations, test.translated, test.survey, test.baseSurvey)\n      ).to.deep.equal(target);\n    });\n\n    it('should add null language if base survey has no translations but survey does', () => {\n      const test = {\n        baseSurvey: {_initialParams: {}},\n        survey: [{\n          'label': [\n            'Allo',\n            'Cześć'\n          ],\n          name: 'welcome_message'\n        }],\n        translations: [\n          'Francais (fr)',\n          'Polski (pl)'\n        ],\n        translated: [\n          'label'\n        ]\n      };\n      const target = {\n        survey: [{\n          'label': [\n            'welcome_message',\n            'Allo',\n            'Cześć'\n          ],\n          name: 'welcome_message'\n        }],\n        translations: [\n          null,\n          'Francais (fr)',\n          'Polski (pl)'\n        ]\n      }\n      expect(\n        nullifyTranslations(test.translations, test.translated, test.survey, test.baseSurvey)\n      ).to.deep.equal(target);\n    });\n\n    it('should do nothing if neither base survey nor survey have translations', () => {\n      const test = {\n        baseSurvey: {_initialParams: {}},\n        survey: [{\n          'label': ['Hello']\n        }],\n        translations: [\n          null\n        ],\n        translated: []\n      };\n      const target = {\n        survey: [{\n          'label': ['Hello']\n        }],\n        translations: [\n          null\n        ]\n      }\n      expect(\n        nullifyTranslations(test.translations, test.translated, test.survey, test.baseSurvey)\n      ).to.deep.equal(target);\n    });\n  });\n\n  describe('unnullifyTranslations', () => {\n    it('should set default language if it\\'s not set already', () => {\n      const test = {\n        surveyDataJSON: JSON.stringify({\n          survey: [\n            {\n              label: 'Cheese?'\n            }\n          ],\n          settings: [\n            {}\n          ]\n        }),\n        assetContent: {\n          translated: ['label'],\n          translations_0: 'English (en)'\n        },\n      };\n      const target = JSON.stringify({\n        survey: [\n          {\n            'label::English (en)': 'Cheese?'\n          }\n        ],\n        settings: [\n          {\n            default_language: 'English (en)'\n          }\n        ]\n      });\n      expect(\n        unnullifyTranslations(test.surveyDataJSON, test.assetContent)\n      ).to.deep.equal(target);\n    });\n\n    it('should replace nullified props with translated ones', () => {\n      const test = {\n        surveyDataJSON: JSON.stringify({\n          survey: [\n            {\n              label: 'Cheese?',\n              'label::Polski (pl)': 'Ser?'\n            }\n          ],\n          choices: [\n            {\n              label: 'Yes'\n            },\n            {\n              label: 'No',\n              'label::Polski (pl)': 'Nie'\n            }\n          ],\n          settings: [\n            {\n              default_language: 'English (en)'\n            }\n          ]\n        }),\n        assetContent: {\n          translated: ['label'],\n          translations_0: 'English (en)'\n        },\n      };\n      const target = JSON.stringify({\n        survey: [\n          {\n            'label::Polski (pl)': 'Ser?',\n            'label::English (en)': 'Cheese?'\n          }\n        ],\n        choices: [\n          {\n            'label::English (en)': 'Yes'\n          },\n          {\n            'label::Polski (pl)': 'Nie',\n            'label::English (en)': 'No'\n          }\n        ],\n        settings: [\n          {\n            default_language: 'English (en)'\n          }\n        ]\n      });\n      expect(\n        unnullifyTranslations(test.surveyDataJSON, test.assetContent)\n      ).to.deep.equal(target);\n    });\n  });\n});\n\ndescribe('readParameters', () => {\n  const validReadPairs = [\n    {\n      str:'foo=',\n      obj: {foo: ''},\n      note: 'empty parameter'\n    },\n    {\n      str:'foo=;bar=1;fum=;baz=',\n      obj: {foo: '', bar: '1', fum: '', baz: ''},\n      note: 'empty parameters'\n    },\n    {\n      str:'foo=bar',\n      obj: {foo: 'bar'},\n      note: 'single parameter'\n    },\n    {\n      str:'foo=1 bar=10 fum=1',\n      obj: {foo: '1', bar: '10', fum: '1'},\n      note: 'space-separated parameters'\n    },\n    {\n      str:'foo=1,bar=10,fum=1',\n      obj: {foo: '1', bar: '10', fum: '1'},\n      note: 'comma-separated parameters'\n    },\n    {\n      str:'foo=1;bar=10;fum=1',\n      obj: {foo: '1', bar: '10', fum: '1'},\n      note: 'semicolon-separated parameters'\n    },\n    {\n      str:'foo  = 1    bar  =  10    fum  =  1',\n      obj: {foo: '1', bar: '10', fum: '1'},\n      note: 'space-dirty space-separated parameters'\n    },\n    {\n      str:'foo = 1 , bar = 10 , fum = 1',\n      obj: {foo: '1', bar: '10', fum: '1'},\n      note: 'space-dirty comma-separated parameters'\n    },\n    {\n      str:'foo = 1  ; bar = 10 ; fum = 1',\n      obj: {foo: '1', bar: '10', fum: '1'},\n      note: 'space-dirty semicolon-separated parameters'\n    },\n    {\n      str:'foo=1 bar=10,fum=1;baz=0',\n      obj: {foo: '1 bar=10,fum=1', baz: '0'},\n      note: 'parameters with mixed separators'\n    },\n    {\n      str:'foo    =2',\n      obj: {foo: '2'},\n      note: 'left-space-dirty single parameter'\n    },\n    {\n      str:'foo     =   2',\n      obj: {foo: '2'},\n      note: 'both-space-dirty single parameter'\n    },\n    {\n      str:'foo=      2',\n      obj: {foo: '2'},\n      note: 'right-space-dirty single parameter'\n    },\n    {\n      str:'foo = 2, 4  ; bar =  4 , , 4 a   ,  ; fum=baz',\n      obj: {foo: '2, 4', bar: '4 , , 4 a', fum: 'baz'},\n      note: 'dirty parameters with mixed separators'\n    },\n  ];\n\n  validReadPairs.forEach((pair) => {\n    it(`should return valid object from ${pair.note}`, () => {\n      chai.expect(readParameters(pair.str)).to.deep.equal(pair.obj);\n    });\n  });\n\n  it('should read parameters values as strings', () => {\n    const obj = readParameters('foo=1;bar=false;fum=0.5;baz=[1,2,3]');\n    chai.expect(typeof obj.foo).to.equal('string');\n    chai.expect(typeof obj.bar).to.equal('string');\n    chai.expect(typeof obj.fum).to.equal('string');\n    chai.expect(typeof obj.baz).to.equal('string');\n  });\n\n  it('should return null for invalid parameter string', () => {\n    chai.expect(readParameters('abc:1')).to.equal(null);\n    chai.expect(readParameters('1')).to.equal(null);\n    chai.expect(readParameters('')).to.equal(null);\n    chai.expect(readParameters(0)).to.equal(null);\n    chai.expect(readParameters(false)).to.equal(null);\n    chai.expect(readParameters(null)).to.equal(null);\n    chai.expect(readParameters(undefined)).to.equal(null);\n    chai.expect(readParameters({})).to.equal(null);\n    chai.expect(readParameters([])).to.equal(null);\n  });\n});\n\ndescribe('writeParameters', () => {\n  const validWritePairs = [\n    {\n      str: 'foo=1;bar=10;fum=1',\n      obj: {foo: '1', bar: '10', fum: '1'},\n      note: 'valid string from object with multiple parameters'\n    },\n    {\n      str: 'foo=2',\n      obj: {foo: '2'},\n      note: 'valid string from object with single parameter'\n    },\n    {\n      str: 'bar=0;baz=false',\n      obj: {foo: null, bar: 0, fum: undefined, baz: false},\n      note: 'valid string omitting empty values from object with multiple parameters'\n    },\n    {\n      str: 'foo={\"bar\":\"a\",\"fum\":{\"baz\":\"b\"}}',\n      obj: {foo: {bar: 'a', fum: {baz: 'b'}}},\n      note: 'valid string from nested object'\n    },\n  ];\n\n  validWritePairs.forEach((pair) => {\n    it(`should return ${pair.note}`, () => {\n      chai.expect(writeParameters(pair.obj)).to.equal(pair.str);\n    });\n  });\n});\n","export const simpleSurvey = [{\n  'name': 'start',\n  'type': 'start',\n  '$kuid': '9PMXyB7Sv',\n  '$autoname': 'start',\n}, {\n  'name': 'end',\n  'type': 'end',\n  '$kuid': 'AkKyOYSIP',\n  '$autoname': 'end',\n}, {\n  'type': 'text',\n  '$kuid': 'uw4if17',\n  'label': ['First name', 'Pierwsze imię'],\n  'required': false,\n  '$autoname': 'First_name',\n}, {\n  'name': 'group_favourites',\n  'type': 'begin_group',\n  '$kuid': 'fx8qb06',\n  'label': ['Favourites', 'Ulubione'],\n  '$autoname': 'group_favourites',\n}, {\n  'type': 'select_one',\n  '$kuid': 'az1fc41',\n  'label': ['Favourite color', 'Ulubiony kolor'],\n  'required': false,\n  '$autoname': 'Favourite_color',\n  'select_from_list_name': 'fav_col_list',\n}, {\n  'type': 'integer',\n  '$kuid': 'ka9pv41',\n  'label': ['Favourite number', 'Ulubiona liczba'],\n  'required': false,\n  '$autoname': 'Favourite_number',\n}, {\n  'type': 'end_group',\n  '$kuid': '/fx8qb06',\n}];\n\nexport const simpleSurveyChoices = [{\n  'name': 'pink',\n  'label': ['Pink'],\n  'list_name': 'fav_col_list',\n}, {\n  'name': 'blue',\n  'label': ['Blue'],\n  'list_name': 'fav_col_list',\n}];\n\nexport const simpleSurveySubmission = {\n  '__version__': 'vHNo5vFh3KoB7LWhucUkFy',\n  '_attachments': [],\n  '_bamboo_dataset_id': '',\n  '_geolocation': [null, null],\n  '_id': 16,\n  '_notes': [],\n  '_status': 'submitted_via_web',\n  '_submission_time': '2020-04-06T11:11:47',\n  '_submitted_by': null,\n  '_tags': [],\n  '_uuid': 'faa38eee-4e3f-419e-bac0-e95f1085d998',\n  '_validation_status': {},\n  '_xform_id_string': 'afKfAnPYX3X7kojqM2cJDb',\n  'end': '2020-04-06T13:11:41.006+02:00',\n  'First_name': 'Leszek',\n  'formhub/uuid': '57e6fd0b4065443280c9641be5670e89',\n  'group_favourites/Favourite_color': 'pink',\n  'group_favourites/Favourite_number': '24',\n  'meta/instanceID': 'uuid:faa38eee-4e3f-419e-bac0-e95f1085d998',\n  'start': '2020-04-06T13:11:31.421+02:00',\n};\n\nexport const simpleSurveySubmissionEmpty = {\n  '__version__': 'vHNo5vFh3KoB7LWhucUkFy',\n  '_attachments': [],\n  '_bamboo_dataset_id': '',\n  '_geolocation': [null, null],\n  '_id': 18,\n  '_notes': [],\n  '_status': 'submitted_via_web',\n  '_submission_time': '2020-04-08T08:46:47',\n  '_submitted_by': null,\n  '_tags': [],\n  '_uuid': '69ff2e33-4d4b-4891-8c81-82d7316cf51f',\n  '_validation_status': {},\n  '_xform_id_string': 'afKfAnPYX3X7kojqM2cJDb',\n  'end': '2020-04-08T10:46:41.882+02:00',\n  'formhub/uuid': '57e6fd0b4065443280c9641be5670e89',\n  'group_favourites/Favourite_number': '5',\n  'meta/instanceID': 'uuid:69ff2e33-4d4b-4891-8c81-82d7316cf51f',\n  'start': '2020-04-08T10:46:34.957+02:00',\n};\n\nexport const simpleSurveyDisplayData = [\n  {\n    type: 'text',\n    label: 'Pierwsze imię',\n    name: 'First_name',\n    data: 'Leszek',\n  },\n  {\n    type: 'group_regular',\n    label: 'Ulubione',\n    name: 'group_favourites',\n    children: [\n      {\n        type: 'select_one',\n        label: 'Ulubiony kolor',\n        name: 'Favourite_color',\n        listName: 'fav_col_list',\n        data: 'pink',\n      },\n      {\n        type: 'integer',\n        label: 'Ulubiona liczba',\n        name: 'Favourite_number',\n        data: '24',\n      },\n    ],\n  },\n];\n\nexport const simpleSurveyDisplayDataEmpty = [\n  {\n    type: 'text',\n    label: 'First name',\n    name: 'First_name',\n    data: null,\n  },\n  {\n    type: 'group_regular',\n    label: 'Favourites',\n    name: 'group_favourites',\n    children: [\n      {\n        type: 'select_one',\n        label: 'Favourite color',\n        name: 'Favourite_color',\n        listName: 'fav_col_list',\n        data: null,\n      },\n      {\n        type: 'integer',\n        label: 'Favourite number',\n        name: 'Favourite_number',\n        data: '5',\n      },\n    ],\n  },\n];\n\nexport const repeatSurvey = [{\n  'name': 'start',\n  'type': 'start',\n  '$kuid': 'lMV6oqDcf',\n  '$autoname': 'start',\n}, {\n  'name': 'end',\n  'type': 'end',\n  '$kuid': 'sdwqjbndr',\n  '$autoname': 'end',\n}, {\n  'name': 'group_members',\n  'type': 'begin_repeat',\n  '$kuid': 'fd8yo77',\n  'label': ['Members'],\n  'required': false,\n  '$autoname': 'group_members',\n}, {\n  'type': 'text',\n  '$kuid': 'lm2ww64',\n  'label': ['First name'],\n  'required': false,\n  '$autoname': 'First_name',\n}, {\n  'type': 'text',\n  '$kuid': 'nf9gq14',\n  'label': ['Middle name'],\n  'required': false,\n  '$autoname': 'Middle_name',\n}, {\n  'type': 'text',\n  '$kuid': 'qt6mr31',\n  'label': ['Last name'],\n  'required': false,\n  '$autoname': 'Last_name',\n}, {\n  'type': 'end_repeat',\n  '$kuid': '/fd8yo77',\n}];\n\n// NOTE: the second repeat submission has no First_name and Middle_name to test stuff better\nexport const repeatSurveySubmission = {\n  '_id': 17,\n  '_notes': [],\n  '__version__': 'v8khdgcT3SYb2HRJhMNtsE',\n  '_attachments': [],\n  '_bamboo_dataset_id': '',\n  '_geolocation': [null, null],\n  '_status': 'submitted_via_web',\n  '_submission_time': '2020-04-07T14:07:48',\n  '_submitted_by': null,\n  '_tags': [],\n  '_uuid': '651137b9-e465-49ed-9924-a67d7b1c6f76',\n  '_validation_status': {},\n  '_xform_id_string': 'afmcL74BTjjRpdAJy52WGX',\n  'end': '2020-04-07T16:07:41.931+02:00',\n  'formhub/uuid': 'b26f2a9b9b7a49608920ad76cba3c315',\n  'group_members': [{\n    'group_members/First_name': 'Leszek',\n    'group_members/Middle_name': 'Jan',\n    'group_members/Last_name': 'Pietrzak',\n  }, {\n    'group_members/Last_name': 'Niepietrzak',\n  }],\n  'meta/instanceID': 'uuid:651137b9-e465-49ed-9924-a67d7b1c6f76',\n  'start': '2020-04-07T16:07:24.044+02:00',\n};\n\nexport const repeatSurveyDisplayData = [\n  {\n    type: 'group_repeat',\n    label: 'Members',\n    name: 'group_members',\n    children: [\n      {\n        type: 'text',\n        label: 'First name',\n        name: 'First_name',\n        data: 'Leszek',\n      },\n      {\n        type: 'text',\n        label: 'Middle name',\n        name: 'Middle_name',\n        data: 'Jan',\n      },\n      {\n        type: 'text',\n        label: 'Last name',\n        name: 'Last_name',\n        data: 'Pietrzak',\n      },\n    ],\n  },\n  {\n    type: 'group_repeat',\n    label: 'Members',\n    name: 'group_members',\n    children: [\n      {\n        type: 'text',\n        label: 'First name',\n        name: 'First_name',\n        data: null,\n      },\n      {\n        type: 'text',\n        label: 'Middle name',\n        name: 'Middle_name',\n        data: null,\n      },\n      {\n        type: 'text',\n        label: 'Last name',\n        name: 'Last_name',\n        data: 'Niepietrzak',\n      },\n    ],\n  },\n];\n\nexport const nestedRepeatSurvey = [{\n  'name': 'start',\n  'type': 'start',\n  '$kuid': 'Rq36zKyog',\n  '$autoname': 'start',\n}, {\n  'name': 'end',\n  'type': 'end',\n  '$kuid': 'Redw9OtxY',\n  '$autoname': 'end',\n}, {\n  'type': 'begin_repeat',\n  'label': ['People'],\n  'name': 'group_people',\n  '$kuid': 'aj45t09',\n  '$autoname': 'group_people',\n}, {\n  'type': 'text',\n  'label': ['Name'],\n  'required': false,\n  '$kuid': 'bj78z02',\n  '$autoname': 'Name',\n}, {\n  'type': 'begin_repeat',\n  'label': ['Personal items'],\n  'name': 'group_items',\n  '$kuid': 'te04d01',\n  '$autoname': 'group_items',\n}, {\n  'type': 'text',\n  'label': ['Item name'],\n  'required': false,\n  '$kuid': 'fd1ec62',\n  '$autoname': 'Item_name',\n}, {\n  'type': 'end_repeat',\n  '$kuid': '/te04d01',\n}, {\n  'type': 'end_repeat',\n  '$kuid': '/aj45t09',\n}];\n\nexport const nestedRepeatSurveySubmission = {\n  '__version__': 'v7sPQZCGQoW8JKYL5Kq79m',\n  '_attachments': [],\n  '_bamboo_dataset_id': '',\n  '_geolocation': [null, null],\n  '_id': 20,\n  '_notes': [],\n  '_status': 'submitted_via_web',\n  '_submission_time': '2020-04-08T11:12:20',\n  '_submitted_by': null,\n  '_tags': [],\n  '_uuid': '83aa0573-8a44-42f7-885b-aa7a3afffbd1',\n  '_validation_status': {},\n  '_xform_id_string': 'ahTnpQwdqrrp4fRKqUxj2p',\n  'end': '2020-04-08T13:22:56.270+02:00',\n  'formhub/uuid': 'd6123d44cf8c4fa78e38556b5af6bd68',\n  'group_people': [{\n    'group_people/group_items': [{\n      'group_people/group_items/Item_name': 'Notebook',\n    }, {\n      'group_people/group_items/Item_name': 'Pen',\n    }, {\n      'group_people/group_items/Item_name': 'Shoe',\n    }],\n    'group_people/Name': 'John',\n  }, {\n    'group_people/Name': 'Leszek',\n  }, {\n    'group_people/group_items': [{\n      'group_people/group_items/Item_name': 'Computer',\n    }],\n  }],\n  'meta/deprecatedID': 'uuid:85397438-558e-4b24-94d7-901550744352',\n  'meta/instanceID': 'uuid:83aa0573-8a44-42f7-885b-aa7a3afffbd1',\n  'start': '2020-04-08T13:11:29.840+02:00',\n};\n\nexport const nestedRepeatSurveyDisplayData = [\n  {\n    type: 'group_repeat',\n    label: 'People',\n    name: 'group_people',\n    children: [\n      {\n        type: 'text',\n        label: 'Name',\n        name: 'Name',\n        data: 'John',\n      },\n      {\n        type: 'group_repeat',\n        label: 'Personal items',\n        name: 'group_items',\n        children: [\n          {\n            type: 'text',\n            label: 'Item name',\n            name: 'Item_name',\n            data: 'Notebook',\n          },\n        ],\n      },\n      {\n        type: 'group_repeat',\n        label: 'Personal items',\n        name: 'group_items',\n        children: [\n          {\n            type: 'text',\n            label: 'Item name',\n            name: 'Item_name',\n            data: 'Pen',\n          },\n        ],\n      },\n      {\n        type: 'group_repeat',\n        label: 'Personal items',\n        name: 'group_items',\n        children: [\n          {\n            type: 'text',\n            label: 'Item name',\n            name: 'Item_name',\n            data: 'Shoe',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    type: 'group_repeat',\n    label: 'People',\n    name: 'group_people',\n    children: [\n      {\n        type: 'text',\n        label: 'Name',\n        name: 'Name',\n        data: 'Leszek',\n      },\n    ],\n  },\n  {\n    type: 'group_repeat',\n    label: 'People',\n    name: 'group_people',\n    children: [\n      {\n        type: 'text',\n        label: 'Name',\n        name: 'Name',\n        data: null,\n      },\n      {\n        type: 'group_repeat',\n        label: 'Personal items',\n        name: 'group_items',\n        children: [\n          {\n            type: 'text',\n            label: 'Item name',\n            name: 'Item_name',\n            data: 'Computer',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport const matrixSurvey = [{\n  'name': 'start',\n  'type': 'start',\n  '$kuid': 'HVwODOAEK',\n  '$autoname': 'start',\n}, {\n  'name': 'end',\n  'type': 'end',\n  '$kuid': '32gE3g5ST',\n  '$autoname': 'end',\n}, {\n  'name': 'today',\n  'type': 'today',\n  '$kuid': '3h9Nl2bpx',\n  '$autoname': 'today',\n}, {\n  'name': 'username',\n  'type': 'username',\n  '$kuid': '3RscqJRor',\n  '$autoname': 'username',\n}, {\n  'name': 'simserial',\n  'type': 'simserial',\n  '$kuid': 'ozNn7JwMd',\n  '$autoname': 'simserial',\n}, {\n  'name': 'subscriberid',\n  'type': 'subscriberid',\n  '$kuid': 'tStWXbDyQ',\n  '$autoname': 'subscriberid',\n}, {\n  'name': 'deviceid',\n  'type': 'deviceid',\n  '$kuid': 'll7GCh9oi',\n  '$autoname': 'deviceid',\n}, {\n  'name': 'phonenumber',\n  'type': 'phonenumber',\n  '$kuid': 'b02UNLdMV',\n  '$autoname': 'phonenumber',\n}, {\n  'name': 'countries',\n  'type': 'begin_kobomatrix',\n  '$kuid': 'en5ri38',\n  'label': ['Countries'],\n  'required': false,\n  '$autoname': 'countries',\n  '_isRepeat': 'false',\n  'appearance': 'field-list',\n  'kobo--matrix_list': 'count_ch_list',\n}, {\n  'hint': [''],\n  'name': 'ecology_level',\n  'type': 'integer',\n  '$kuid': 'mi7ka64',\n  'label': ['Ecology level'],\n  'required': false,\n  '$autoname': 'ecology_level',\n  'appearance': 'w1',\n}, {\n  'hint': [''],\n  'name': 'secularity_level',\n  'type': 'integer',\n  '$kuid': 'iy4fw00',\n  'label': ['Secularity level'],\n  'required': false,\n  '$autoname': 'secularity_level',\n  'appearance': 'w1',\n}, {\n  'type': 'end_kobomatrix',\n  '$kuid': '/en5ri38',\n}];\n\nexport const matrixSurveyChoices = [{\n  'name': 'poland',\n  '$kuid': 'wa9kl23',\n  'label': ['Poland'],\n  'list_name': 'count_ch_list',\n  '$autovalue': 'poland',\n}];\n\nexport const matrixSurveySubmission = {\n  '_id': 22,\n  'username': 'username not found',\n  'simserial': 'simserial not found',\n  '_validation_status': {},\n  '_uuid': 'a0039b58-1b2d-4445-912e-01e4ad56dbb4',\n  '_bamboo_dataset_id': '',\n  '_tags': [],\n  '_submitted_by': null,\n  'countries_poland/countries_poland_ecology_level': '3',\n  '_xform_id_string': 'aikoAHFLnmPw6WwQJCb8x3',\n  'meta/instanceID': 'uuid:a0039b58-1b2d-4445-912e-01e4ad56dbb4',\n  'formhub/uuid': 'f081027d597142b9a17a7a3bb3a5aff1',\n  'end': '2020-04-20T18:00:05.384+02:00',\n  '_submission_time': '2020-04-20T16:00:10',\n  '_notes': [],\n  '_attachments': [],\n  'start': '2020-04-20T17:59:54.295+02:00',\n  'countries_poland/countries_poland_secularity_level': '-5',\n  '_geolocation': [null, null],\n  'deviceid': 'ee.kobo.local:4l56OZ7GLLixoZ9J',\n  'phonenumber': 'phonenumber not found',\n  '_status': 'submitted_via_web',\n  '__version__': 'vPNH6GBsRjMKLfXrisReYA',\n  'subscriberid': 'subscriberid not found',\n  'today': '2020-04-20',\n};\n\nexport const matrixSurveyDisplayData = [\n  {\n    type: 'group_matrix',\n    label: 'Countries',\n    name: 'countries',\n    children: [\n      {\n        type: 'group_matrix_row',\n        label: 'Poland',\n        name: 'poland',\n        children: [\n          {\n            type: 'integer',\n            label: 'Ecology level',\n            name: 'ecology_level',\n            data: '3',\n          },\n          {\n            type: 'integer',\n            label: 'Secularity level',\n            name: 'secularity_level',\n            data: '-5',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport const groupsSurvey = [{\n  'name': 'group_people',\n  'type': 'begin_repeat',\n  '$kuid': 'fs1km00',\n  'label': ['People'],\n  '$autoname': 'group_people',\n}, {\n  'type': 'text',\n  '$kuid': 'sr97c95',\n  'label': ['First name'],\n  'required': false,\n  '$autoname': 'First_name',\n}, {\n  'type': 'end_repeat',\n  '$kuid': '/fs1km00',\n}, {\n  'name': 'group_location',\n  'type': 'begin_group',\n  '$kuid': 'lq0th66',\n  'label': ['Location'],\n  '$autoname': 'group_location',\n}, {\n  'type': 'geopoint',\n  '$kuid': 'ug36q69',\n  'label': ['Original location'],\n  'required': false,\n  '$autoname': 'Original_location',\n}, {\n  'type': 'geopoint',\n  '$kuid': 'kw6zd49',\n  'label': ['Current location'],\n  'required': false,\n  '$autoname': 'Current_location',\n}, {\n  'type': 'end_group',\n  '$kuid': '/lq0th66',\n}, {\n  'type': 'begin_score',\n  '$kuid': 'rd0zi80',\n  'label': ['Are you vegan?'],\n  'required': false,\n  '$autoname': 'Are_you_vegan',\n  'kobo--score-choices': 'vg_ch_list',\n}, {\n  'type': 'score__row',\n  '$kuid': 'as5gb66',\n  'label': ['Killing humans'],\n  '$autoname': 'Killing_humans',\n}, {\n  'type': 'score__row',\n  '$kuid': 'kv3uq84',\n  'label': ['Killing nonhumans'],\n  '$autoname': 'Killing_nonhumans',\n}, {\n  'type': 'end_score',\n  '$kuid': '/rd0zi80',\n}, {\n  'type': 'begin_rank',\n  '$kuid': 'bj3zo95',\n  'label': ['Best things in life'],\n  'required': false,\n  '$autoname': 'Best_things_in_life',\n  'kobo--rank-items': 'best_ch_list',\n  'kobo--rank-constraint-message': 'Items cannot be selected more than once',\n}, {\n  'type': 'rank__level',\n  '$kuid': 'yy8lt23',\n  'label': ['1st choice'],\n  '$autoname': '_1st_choice',\n}, {\n  'type': 'rank__level',\n  '$kuid': 'll0ky89',\n  'label': ['2nd choice'],\n  '$autoname': '_2nd_choice',\n}, {\n  'type': 'rank__level',\n  '$kuid': 'cz6uz72',\n  'label': ['3rd choice'],\n  '$autoname': '_3rd_choice',\n}, {\n  'type': 'end_rank',\n  '$kuid': '/bj3zo95',\n}, {\n  'name': 'group_crossbreeding',\n  'type': 'begin_kobomatrix',\n  '$kuid': 'vs75w20',\n  'label': ['Crossbreeding'],\n  '$autoname': 'group_crossbreeding',\n  '_isRepeat': 'false',\n  'appearance': 'field-list',\n  'kobo--matrix_list': 'crossbr_ch_list',\n}, {\n  'hint': [''],\n  'name': 'human',\n  'type': 'text',\n  '$kuid': 'ji8zj93',\n  'label': ['Human'],\n  'required': false,\n  '$autoname': 'human',\n  'appearance': 'w1',\n}, {\n  'hint': [''],\n  'name': 'nonhuman',\n  'type': 'text',\n  '$kuid': 'on6ec28',\n  'label': ['Nonhuman'],\n  'required': false,\n  '$autoname': 'nonhuman',\n  'appearance': 'w1',\n}, {\n  'type': 'end_kobomatrix',\n  '$kuid': '/vs75w20',\n}];\n\nexport const groupsSurveyChoices = [{\n  'name': 'good',\n  '$kuid': '4g11EC3jB',\n  'label': ['Good'],\n  'list_name': 'vg_ch_list',\n  '$autovalue': 'good',\n}, {\n  'name': 'bad',\n  '$kuid': 'iWSKBTsBL',\n  'label': ['Bad'],\n  'list_name': 'vg_ch_list',\n  '$autovalue': 'bad',\n}, {\n  'name': 'food',\n  '$kuid': 'gZdFOT2Au',\n  'label': ['Food'],\n  'list_name': 'best_ch_list',\n  '$autovalue': 'food',\n}, {\n  'name': 'sleep',\n  '$kuid': '29qNZUz3S',\n  'label': ['Sleep'],\n  'list_name': 'best_ch_list',\n  '$autovalue': 'sleep',\n}, {\n  'name': 'conquest',\n  '$kuid': 'U0A1jTOH9',\n  'label': ['Conquest'],\n  'list_name': 'best_ch_list',\n  '$autovalue': 'conquest',\n}, {\n  'name': 'fire',\n  '$kuid': 'dl9lc82',\n  'label': ['Fire'],\n  'list_name': 'crossbr_ch_list',\n  '$autovalue': 'fire',\n}, {\n  'name': 'water',\n  '$kuid': 'qn03v13',\n  'label': ['Water'],\n  'list_name': 'crossbr_ch_list',\n  '$autovalue': 'water',\n}];\n\nexport const groupsSurveySubmission = {\n  '_id': 23,\n  'Are_you_vegan/Killing_humans': 'good',\n  '_validation_status': {},\n  '_uuid': '846a669e-299e-4650-bdfa-05bcf34622e2',\n  '_bamboo_dataset_id': '',\n  '_tags': [],\n  'Best_things_in_life/_2nd_choice': 'sleep',\n  '_submitted_by': null,\n  'Are_you_vegan/Killing_nonhumans': 'bad',\n  '_xform_id_string': 'aP87YegB993rHGjAaihyte',\n  'Best_things_in_life/_1st_choice': 'conquest',\n  'meta/instanceID': 'uuid:846a669e-299e-4650-bdfa-05bcf34622e2',\n  'group_crossbreeding_water/group_crossbreeding_water_nonhuman': 'waterthing',\n  'formhub/uuid': 'f558c8ebd7ba410194b84503ea6ca865',\n  'group_crossbreeding_water/group_crossbreeding_water_human': 'waterman',\n  'group_location/Current_location': '53.748711 -7.880555 0 0',\n  'group_people': [{\n    'group_people/First_name': 'Leszek',\n  }, {\n    'group_people/First_name': 'John',\n  }],\n  '_submission_time': '2020-04-23T18:16:08',\n  '_notes': [],\n  '_attachments': [],\n  'group_crossbreeding_fire/group_crossbreeding_fire_nonhuman': 'firething',\n  'group_crossbreeding_fire/group_crossbreeding_fire_human': 'fireman',\n  'group_location/Original_location': '52.48278 18.813458 0 0',\n  'Best_things_in_life/_3rd_choice': 'food',\n  '_status': 'submitted_via_web',\n  '__version__': 'vN4myUe5KyYrGN4dGrpBid',\n  'today': '2020-04-23',\n};\n\nexport const groupsSurveyDisplayData = [\n  {\n    type: 'group_repeat',\n    label: 'People',\n    name: 'group_people',\n    children: [\n      {\n        type: 'text',\n        label: 'First name',\n        name: 'First_name',\n        data: 'Leszek',\n      },\n    ],\n  },\n  {\n    type: 'group_repeat',\n    label: 'People',\n    name: 'group_people',\n    children: [\n      {\n        type: 'text',\n        label: 'First name',\n        name: 'First_name',\n        data: 'John',\n      },\n    ],\n  },\n  {\n    type: 'group_regular',\n    label: 'Location',\n    name: 'group_location',\n    children: [\n      {\n        'type': 'geopoint',\n        'label': 'Original location',\n        'name': 'Original_location',\n        'data': '52.48278 18.813458 0 0',\n      },\n      {\n        'type': 'geopoint',\n        'label': 'Current location',\n        'name': 'Current_location',\n        'data': '53.748711 -7.880555 0 0',\n      },\n    ],\n  },\n  {\n    type: 'group_regular',\n    label: 'Are you vegan?',\n    name: 'Are_you_vegan',\n    children: [\n      {\n        'type': 'score__row',\n        'label': 'Killing humans',\n        'name': 'Killing_humans',\n        'listName': 'vg_ch_list',\n        'data': 'good',\n      },\n      {\n        'type': 'score__row',\n        'label': 'Killing nonhumans',\n        'name': 'Killing_nonhumans',\n        'listName': 'vg_ch_list',\n        'data': 'bad',\n      },\n    ],\n  },\n  {\n    type: 'group_regular',\n    label: 'Best things in life',\n    name: 'Best_things_in_life',\n    children: [\n      {\n        'type': 'rank__level',\n        'label': '1st choice',\n        'name': '_1st_choice',\n        'listName': 'best_ch_list',\n        'data': 'conquest',\n      },\n      {\n        'type': 'rank__level',\n        'label': '2nd choice',\n        'name': '_2nd_choice',\n        'listName': 'best_ch_list',\n        'data': 'sleep',\n      },\n      {\n        'type': 'rank__level',\n        'label': '3rd choice',\n        'name': '_3rd_choice',\n        'listName': 'best_ch_list',\n        'data': 'food',\n      },\n    ],\n  },\n  {\n    type: 'group_matrix',\n    label: 'Crossbreeding',\n    name: 'group_crossbreeding',\n    children: [\n      {\n        type: 'group_matrix_row',\n        label: 'Fire',\n        name: 'fire',\n        children: [\n          {\n            type: 'text',\n            label: 'Human',\n            name: 'human',\n            data: 'fireman',\n          },\n          {\n            type: 'text',\n            label: 'Nonhuman',\n            name: 'nonhuman',\n            data: 'firething',\n          },\n        ],\n      },\n      {\n        type: 'group_matrix_row',\n        label: 'Water',\n        name: 'water',\n        children: [\n          {\n            type: 'text',\n            label: 'Human',\n            name: 'human',\n            data: 'waterman',\n          },\n          {\n            type: 'text',\n            label: 'Nonhuman',\n            name: 'nonhuman',\n            data: 'waterthing',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport const everythingSurvey = [{\n  'name': 'start',\n  'type': 'start',\n  '$kuid': 'hI2IjAPLy',\n  '$autoname': 'start',\n}, {\n  'name': 'end',\n  'type': 'end',\n  '$kuid': 'xVomX5yES',\n  '$autoname': 'end',\n}, {\n  'type': 'select_one',\n  '$kuid': 'ys1bd14',\n  'label': ['Favourite country'],\n  'required': false,\n  '$autoname': 'Favourite_country',\n  'select_from_list_name': 'fav_cntr_list',\n}, {\n  'type': 'select_multiple',\n  '$kuid': 'ca8bv64',\n  'label': ['Favourite food'],\n  'required': false,\n  '$autoname': 'Favourite_food',\n  'select_from_list_name': 'fav_food_ch_list',\n}, {\n  'type': 'text',\n  '$kuid': 'gr1hn65',\n  'label': ['Your name'],\n  'required': false,\n  '$autoname': 'Your_name',\n}, {\n  'type': 'integer',\n  '$kuid': 'vw1ya03',\n  'label': ['Lucky number'],\n  'required': false,\n  '$autoname': 'Lucky_number',\n}, {\n  'type': 'decimal',\n  '$kuid': 'ia1ux31',\n  'label': ['Unlucky number'],\n  'required': false,\n  '$autoname': 'Unlucky_number',\n}, {\n  'type': 'date',\n  '$kuid': 'vl8ck72',\n  'label': ['Birth date'],\n  'required': false,\n  '$autoname': 'Birth_date',\n}, {\n  'type': 'time',\n  '$kuid': 'qa9pv52',\n  'label': ['Birth time'],\n  'required': false,\n  '$autoname': 'Birth_time',\n}, {\n  'type': 'datetime',\n  '$kuid': 'cq0yk16',\n  'label': ['Some random date and time'],\n  'required': false,\n  '$autoname': 'Some_random_date_and_time',\n}, {\n  'type': 'geopoint',\n  '$kuid': 'ib3wx74',\n  'label': ['Secret spot'],\n  'required': false,\n  '$autoname': 'Secret_spot',\n}, {\n  'type': 'image',\n  '$kuid': 'vu9cb06',\n  'label': ['Selfportrait'],\n  'required': false,\n  '$autoname': 'Selfportrait',\n  'parameters': 'max-pixels=1024',\n}, {\n  'type': 'audio',\n  '$kuid': 'aa28j83',\n  'label': ['Voice password'],\n  'required': false,\n  '$autoname': 'Voice_password',\n}, {\n  'type': 'video',\n  '$kuid': 'tj2xw94',\n  'label': ['A video?'],\n  'required': false,\n  '$autoname': 'A_video',\n}, {\n  'type': 'geotrace',\n  '$kuid': 'bh5yb78',\n  'label': ['Shortest path'],\n  'required': false,\n  '$autoname': 'Shortest_path',\n}, {\n  'type': 'note',\n  '$kuid': 'pg3yl90',\n  'label': ['This is a secret'],\n  'required': false,\n  '$autoname': 'This_is_a_secret',\n}, {\n  'type': 'barcode',\n  '$kuid': 'qu5zg17',\n  'label': ['Favourite chocolate barcode'],\n  'required': false,\n  '$autoname': 'Favourite_chocolate_barcode',\n}, {\n  'type': 'acknowledge',\n  '$kuid': 'ym87f54',\n  'label': ['Are you sane?'],\n  'required': false,\n  '$autoname': 'Are_you_sane',\n}, {\n  'type': 'geoshape',\n  '$kuid': 'ua1av57',\n  'label': ['Secret area'],\n  'required': false,\n  '$autoname': 'Secret_area',\n}, {\n  'type': 'begin_score',\n  '$kuid': 'yp8ep33',\n  'label': ['How are you?'],\n  'required': false,\n  '$autoname': 'How_are_you',\n  'kobo--score-choices': 'how_r_u_ch_list',\n}, {\n  'name': 'outside',\n  'type': 'score__row',\n  '$kuid': 'ir6tu76',\n  'label': ['Outside'],\n  'required': false,\n  '$autoname': 'outside',\n}, {\n  'name': 'inside',\n  'type': 'score__row',\n  '$kuid': 'je4go60',\n  'label': ['Inside'],\n  'required': false,\n  '$autoname': 'inside',\n}, {\n  'type': 'end_score',\n  '$kuid': '/yp8ep33',\n}, {\n  'name': 'test_your_math',\n  'type': 'begin_kobomatrix',\n  '$kuid': 'gy07t52',\n  'label': ['Test your math'],\n  'required': false,\n  '$autoname': 'test_your_math',\n  '_isRepeat': 'false',\n  'appearance': 'field-list',\n  'kobo--matrix_list': 'matrix_cb3fk35',\n}, {\n  'hint': [''],\n  'name': 'plus',\n  'type': 'integer',\n  '$kuid': 'oh83n52',\n  'label': ['Plus'],\n  'required': false,\n  '$autoname': 'plus',\n  'appearance': 'w1',\n}, {\n  'hint': [''],\n  'name': 'minus',\n  'type': 'select_one',\n  '$kuid': 'gy9ev97',\n  'label': ['Minus'],\n  'required': false,\n  '$autoname': 'minus',\n  'appearance': 'w1',\n  'select_from_list_name': 'min_ch_list',\n}, {\n  'type': 'end_kobomatrix',\n  '$kuid': '/gy07t52',\n}, {\n  'type': 'begin_rank',\n  '$kuid': 'vs3yt07',\n  'label': ['Colours by brightness'],\n  'required': false,\n  '$autoname': 'Colours_by_brightness',\n  'kobo--rank-items': 'col_br_ch_list',\n  'kobo--rank-constraint-message': 'Items cannot be selected more than once',\n}, {\n  'type': 'rank__level',\n  '$kuid': 'yp71p21',\n  'label': ['1st choice'],\n  'required': false,\n  '$autoname': '_1st_choice',\n}, {\n  'type': 'rank__level',\n  '$kuid': 'ac8ez34',\n  'label': ['2nd choice'],\n  'required': false,\n  '$autoname': '_2nd_choice',\n}, {\n  'type': 'end_rank',\n  '$kuid': '/vs3yt07',\n}, {\n  'type': 'file',\n  '$kuid': 'dz9cv47',\n  'label': ['We need your CV'],\n  'required': false,\n  '$autoname': 'We_need_your_CV',\n  'body::accept': 'txt',\n}, {\n  'type': 'range',\n  '$kuid': 'jb6ll34',\n  'label': ['Expected lifespan'],\n  'required': false,\n  '$autoname': 'Expected_lifespan',\n  'parameters': 'start=1;end=125;step=1',\n}];\n\nexport const everythingSurveyChoices = [{\n  'name': 'poland',\n  '$kuid': 'dVHZ9VigU',\n  'label': ['Poland'],\n  'list_name': 'fav_cntr_list',\n  '$autovalue': 'poland',\n}, {\n  'name': 'ireland',\n  '$kuid': 'awQvU6AGY',\n  'label': ['Ireland'],\n  'list_name': 'fav_cntr_list',\n  '$autovalue': 'ireland',\n}, {\n  'name': 'pizza',\n  '$kuid': 'V5aeF2EbQ',\n  'label': ['Pizza'],\n  'list_name': 'fav_food_ch_list',\n  '$autovalue': 'pizza',\n}, {\n  'name': 'apple',\n  '$kuid': 'XjaJ0GAm0',\n  'label': ['Apple'],\n  'list_name': 'fav_food_ch_list',\n  '$autovalue': 'apple',\n}, {\n  'name': 'good',\n  '$kuid': 'YtKFyrtef',\n  'label': ['Good'],\n  'list_name': 'how_r_u_ch_list',\n  '$autovalue': 'good',\n}, {\n  'name': 'bad',\n  '$kuid': 'eVEUuBWFf',\n  'label': ['Bad'],\n  'list_name': 'how_r_u_ch_list',\n  '$autovalue': 'bad',\n}, {\n  'name': 'yellow',\n  '$kuid': 'DzPdmquZQ',\n  'label': ['Yellow'],\n  'list_name': 'col_br_ch_list',\n  '$autovalue': 'yellow',\n}, {\n  'name': 'blue',\n  '$kuid': '6oHmUYz8S',\n  'label': ['Blue'],\n  'list_name': 'col_br_ch_list',\n  '$autovalue': 'blue',\n}, {\n  'name': '2_and_4',\n  '$kuid': 'bd6hu92',\n  'label': ['2 and 4'],\n  'list_name': 'matrix_cb3fk35',\n  '$autovalue': '2_and_4',\n}, {\n  'name': 'minus_four',\n  '$kuid': 'tq31o95',\n  'label': ['-4'],\n  'list_name': 'min_ch_list',\n  '$autovalue': 'minus_four',\n}, {\n  'name': 'minus_two',\n  '$kuid': 'ue3oz79',\n  'label': ['-2'],\n  'list_name': 'min_ch_list',\n  '$autovalue': 'minus_two',\n}];\n\nexport const everythingSurveySubmission = {\n  '_id': 25,\n  'Secret_spot': '47.754098 3.426214 0 0',\n  'Favourite_chocolate_barcode': '123123123123',\n  '_geolocation': [47.754098, 3.426214],\n  'Favourite_country': 'ireland',\n  'Colours_by_brightness/_1st_choice': 'blue',\n  'Favourite_food': 'pizza apple',\n  'Selfportrait': '784397e28b5041d59bef15d5d0b2d0bf--cutaway-dio-13_31_48.jpg',\n  '_validation_status': {},\n  'We_need_your_CV': 'zamki-13_35_5.txt',\n  '_uuid': 'fdd252ee-860a-426c-be90-cbbf61787cb9',\n  '_bamboo_dataset_id': '',\n  '_tags': [],\n  '_notes': [],\n  'Colours_by_brightness/_2nd_choice': 'yellow',\n  'A_video': 'IMG_3619-13_33_22.MOV',\n  '_submitted_by': null,\n  'How_are_you/outside': 'good',\n  '_xform_id_string': 'aXPSbtQcYDm8mcJuVZTUhW',\n  'Birth_date': '1900-04-10',\n  'meta/instanceID': 'uuid:fdd252ee-860a-426c-be90-cbbf61787cb9',\n  'Shortest_path': '26.74561 -1.485606 0 0;18.979026 23.772309 0 0',\n  'formhub/uuid': '712e5fb8d7364482a57c60df876c57fb',\n  'Birth_time': '13:45:00.000+02:00',\n  'end': '2020-04-28T13:35:12.978+02:00',\n  'How_are_you/inside': 'bad',\n  '_submission_time': '2020-04-28T11:35:26',\n  '__version__': 'vbkx6J4Key3yaWF5TGXrxg',\n  'test_your_math_2_and_4/test_your_math_2_and_4_minus': 'minus_four',\n  'Lucky_number': '24',\n  'Are_you_sane': 'OK',\n  '_attachments': [{\n    'mimetype': 'video/quicktime',\n    'download_small_url': 'http://kc.kobo.local/media/small?media_file=kobo%2Fattachments%2F712e5fb8d7364482a57c60df876c57fb%2Ffdd252ee-860a-426c-be90-cbbf61787cb9%2FIMG_3619-13_33_22.MOV',\n    'download_large_url': 'http://kc.kobo.local/media/large?media_file=kobo%2Fattachments%2F712e5fb8d7364482a57c60df876c57fb%2Ffdd252ee-860a-426c-be90-cbbf61787cb9%2FIMG_3619-13_33_22.MOV',\n    'download_url': 'http://kc.kobo.local/media/original?media_file=kobo%2Fattachments%2F712e5fb8d7364482a57c60df876c57fb%2Ffdd252ee-860a-426c-be90-cbbf61787cb9%2FIMG_3619-13_33_22.MOV',\n    'filename': 'kobo/attachments/712e5fb8d7364482a57c60df876c57fb/fdd252ee-860a-426c-be90-cbbf61787cb9/IMG_3619-13_33_22.MOV',\n    'instance': 25,\n    'download_medium_url': 'http://kc.kobo.local/media/medium?media_file=kobo%2Fattachments%2F712e5fb8d7364482a57c60df876c57fb%2Ffdd252ee-860a-426c-be90-cbbf61787cb9%2FIMG_3619-13_33_22.MOV',\n    'id': 6,\n    'xform': 18,\n  }, {\n    'mimetype': 'audio/mpeg',\n    'download_small_url': 'http://kc.kobo.local/media/small?media_file=kobo%2Fattachments%2F712e5fb8d7364482a57c60df876c57fb%2Ffdd252ee-860a-426c-be90-cbbf61787cb9%2F07.+Crazy+Love-13_32_31.mp3',\n    'download_large_url': 'http://kc.kobo.local/media/large?media_file=kobo%2Fattachments%2F712e5fb8d7364482a57c60df876c57fb%2Ffdd252ee-860a-426c-be90-cbbf61787cb9%2F07.+Crazy+Love-13_32_31.mp3',\n    'download_url': 'http://kc.kobo.local/media/original?media_file=kobo%2Fattachments%2F712e5fb8d7364482a57c60df876c57fb%2Ffdd252ee-860a-426c-be90-cbbf61787cb9%2F07.+Crazy+Love-13_32_31.mp3',\n    'filename': 'kobo/attachments/712e5fb8d7364482a57c60df876c57fb/fdd252ee-860a-426c-be90-cbbf61787cb9/07. Crazy Love-13_32_31.mp3',\n    'instance': 25,\n    'download_medium_url': 'http://kc.kobo.local/media/medium?media_file=kobo%2Fattachments%2F712e5fb8d7364482a57c60df876c57fb%2Ffdd252ee-860a-426c-be90-cbbf61787cb9%2F07.+Crazy+Love-13_32_31.mp3',\n    'id': 5,\n    'xform': 18,\n  }, {\n    'mimetype': 'text/plain',\n    'download_small_url': 'http://kc.kobo.local/media/small?media_file=kobo%2Fattachments%2F712e5fb8d7364482a57c60df876c57fb%2Ffdd252ee-860a-426c-be90-cbbf61787cb9%2Fzamki-13_35_5.txt',\n    'download_large_url': 'http://kc.kobo.local/media/large?media_file=kobo%2Fattachments%2F712e5fb8d7364482a57c60df876c57fb%2Ffdd252ee-860a-426c-be90-cbbf61787cb9%2Fzamki-13_35_5.txt',\n    'download_url': 'http://kc.kobo.local/media/original?media_file=kobo%2Fattachments%2F712e5fb8d7364482a57c60df876c57fb%2Ffdd252ee-860a-426c-be90-cbbf61787cb9%2Fzamki-13_35_5.txt',\n    'filename': 'kobo/attachments/712e5fb8d7364482a57c60df876c57fb/fdd252ee-860a-426c-be90-cbbf61787cb9/zamki-13_35_5.txt',\n    'instance': 25,\n    'download_medium_url': 'http://kc.kobo.local/media/medium?media_file=kobo%2Fattachments%2F712e5fb8d7364482a57c60df876c57fb%2Ffdd252ee-860a-426c-be90-cbbf61787cb9%2Fzamki-13_35_5.txt',\n    'id': 4,\n    'xform': 18,\n  }, {\n    'mimetype': 'image/jpeg',\n    'download_small_url': 'http://kc.kobo.local/media/small?media_file=kobo%2Fattachments%2F712e5fb8d7364482a57c60df876c57fb%2Ffdd252ee-860a-426c-be90-cbbf61787cb9%2F784397e28b5041d59bef15d5d0b2d0bf--cutaway-dio-13_31_48.jpg',\n    'download_large_url': 'http://kc.kobo.local/media/large?media_file=kobo%2Fattachments%2F712e5fb8d7364482a57c60df876c57fb%2Ffdd252ee-860a-426c-be90-cbbf61787cb9%2F784397e28b5041d59bef15d5d0b2d0bf--cutaway-dio-13_31_48.jpg',\n    'download_url': 'http://kc.kobo.local/media/original?media_file=kobo%2Fattachments%2F712e5fb8d7364482a57c60df876c57fb%2Ffdd252ee-860a-426c-be90-cbbf61787cb9%2F784397e28b5041d59bef15d5d0b2d0bf--cutaway-dio-13_31_48.jpg',\n    'filename': 'kobo/attachments/712e5fb8d7364482a57c60df876c57fb/fdd252ee-860a-426c-be90-cbbf61787cb9/784397e28b5041d59bef15d5d0b2d0bf--cutaway-dio-13_31_48.jpg',\n    'instance': 25,\n    'download_medium_url': 'http://kc.kobo.local/media/medium?media_file=kobo%2Fattachments%2F712e5fb8d7364482a57c60df876c57fb%2Ffdd252ee-860a-426c-be90-cbbf61787cb9%2F784397e28b5041d59bef15d5d0b2d0bf--cutaway-dio-13_31_48.jpg',\n    'id': 3,\n    'xform': 18,\n  }],\n  'Expected_lifespan': '88',\n  'start': '2020-04-28T13:30:42.903+02:00',\n  'Your_name': 'Leszek',\n  'Unlucky_number': '-7',\n  'Some_random_date_and_time': '2020-04-02T01:33:00.000+02:00',\n  '_status': 'submitted_via_web',\n  'Secret_area': '-7.362467 -54.112248 0 0;24.20689 -79.483642 0 0;25.720735 -41.556644 0 0;2.196727 -40.315761 0 0;-7.362467 -54.112248 0 0',\n  'Voice_password': '07. Crazy Love-13_32_31.mp3',\n  'test_your_math_2_and_4/test_your_math_2_and_4_plus': '7',\n};\n\nexport const everythingSurveyDisplayData = [\n  {\n    'type': 'select_one',\n    'label': 'Favourite country',\n    'name': 'Favourite_country',\n    'listName': 'fav_cntr_list',\n    'data': 'ireland',\n  },\n  {\n    'type': 'select_multiple',\n    'label': 'Favourite food',\n    'name': 'Favourite_food',\n    'listName': 'fav_food_ch_list',\n    'data': 'pizza apple',\n  },\n  {\n    'type': 'text',\n    'label': 'Your name',\n    'name': 'Your_name',\n    'data': 'Leszek',\n  },\n  {\n    'type': 'integer',\n    'label': 'Lucky number',\n    'name': 'Lucky_number',\n    'data': '24',\n  },\n  {\n    'type': 'decimal',\n    'label': 'Unlucky number',\n    'name': 'Unlucky_number',\n    'data': '-7',\n  },\n  {\n    'type': 'date',\n    'label': 'Birth date',\n    'name': 'Birth_date',\n    'data': '1900-04-10',\n  },\n  {\n    'type': 'time',\n    'label': 'Birth time',\n    'name': 'Birth_time',\n    'data': '13:45:00.000+02:00',\n  },\n  {\n    'type': 'datetime',\n    'label': 'Some random date and time',\n    'name': 'Some_random_date_and_time',\n    'data': '2020-04-02T01:33:00.000+02:00',\n  },\n  {\n    'type': 'geopoint',\n    'label': 'Secret spot',\n    'name': 'Secret_spot',\n    'data': '47.754098 3.426214 0 0',\n  },\n  {\n    'type': 'image',\n    'label': 'Selfportrait',\n    'name': 'Selfportrait',\n    'data': '784397e28b5041d59bef15d5d0b2d0bf--cutaway-dio-13_31_48.jpg',\n  },\n  {\n    'type': 'audio',\n    'label': 'Voice password',\n    'name': 'Voice_password',\n    'data': '07. Crazy Love-13_32_31.mp3',\n  },\n  {\n    'type': 'video',\n    'label': 'A video?',\n    'name': 'A_video',\n    'data': 'IMG_3619-13_33_22.MOV',\n  },\n  {\n    'type': 'geotrace',\n    'label': 'Shortest path',\n    'name': 'Shortest_path',\n    'data': '26.74561 -1.485606 0 0;18.979026 23.772309 0 0',\n  },\n  {\n    'type': 'barcode',\n    'label': 'Favourite chocolate barcode',\n    'name': 'Favourite_chocolate_barcode',\n    'data': '123123123123',\n  },\n  {\n    'type': 'acknowledge',\n    'label': 'Are you sane?',\n    'name': 'Are_you_sane',\n    'data': 'OK',\n  },\n  {\n    'type': 'geoshape',\n    'label': 'Secret area',\n    'name': 'Secret_area',\n    'data': '-7.362467 -54.112248 0 0;24.20689 -79.483642 0 0;25.720735 -41.556644 0 0;2.196727 -40.315761 0 0;-7.362467 -54.112248 0 0',\n  },\n  {\n    'type': 'group_regular',\n    'label': 'How are you?',\n    'name': 'How_are_you',\n    'children': [\n      {\n        'type': 'score__row',\n        'label': 'Outside',\n        'name': 'outside',\n        'listName': 'how_r_u_ch_list',\n        'data': 'good',\n      },\n      {\n        'type': 'score__row',\n        'label': 'Inside',\n        'name': 'inside',\n        'listName': 'how_r_u_ch_list',\n        'data': 'bad',\n      },\n    ],\n  },\n  {\n    'type': 'group_matrix',\n    'label': 'Test your math',\n    'name': 'test_your_math',\n    'children': [\n      {\n        'type': 'group_matrix_row',\n        'label': '2 and 4',\n        'name': '2_and_4',\n        'children': [\n          {\n            'type': 'integer',\n            'label': 'Plus',\n            'name': 'plus',\n            'data': '7',\n          },\n          {\n            'type': 'select_one',\n            'label': 'Minus',\n            'name': 'minus',\n            'listName': 'min_ch_list',\n            'data': 'minus_four',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    'type': 'group_regular',\n    'label': 'Colours by brightness',\n    'name': 'Colours_by_brightness',\n    'children': [\n      {\n        'type': 'rank__level',\n        'label': '1st choice',\n        'name': '_1st_choice',\n        'listName': 'col_br_ch_list',\n        'data': 'blue',\n      },\n      {\n        'type': 'rank__level',\n        'label': '2nd choice',\n        'name': '_2nd_choice',\n        'listName': 'col_br_ch_list',\n        'data': 'yellow',\n      },\n    ],\n  },\n  {\n    'type': 'file',\n    'label': 'We need your CV',\n    'name': 'We_need_your_CV',\n    'data': 'zamki-13_35_5.txt',\n  },\n  {\n    'type': 'range',\n    'label': 'Expected lifespan',\n    'name': 'Expected_lifespan',\n    'data': '88',\n  },\n];\n\nexport const matrixRepeatSurvey = [\n  {\n    'name': 'start',\n    'type': 'start',\n    '$kuid': '5hhy3gTQM',\n    '$autoname': 'start',\n  },\n  {\n    'name': 'end',\n    'type': 'end',\n    '$kuid': 'gIKQbAuFK',\n    '$autoname': 'end',\n  },\n  {\n    'name': 'Simple_repeat',\n    'type': 'begin_repeat',\n    '$kuid': 'wr4ir59',\n    'label': ['Simple repeat'],\n    '$autoname': 'Simple_repeat',\n  },\n  {\n    'name': 'Best_food',\n    'type': 'begin_kobomatrix',\n    '$kuid': 'hn03y22',\n    'label': ['Best food'],\n    '$autoname': 'Best_food',\n    '_isRepeat': 'false',\n    'appearance': 'field-list',\n    'kobo--matrix_list': 'matrix_ri0sw49',\n  },\n  {\n    'hint': [''],\n    'name': 'Salty',\n    'type': 'text',\n    '$kuid': 'ar3rp04',\n    'label': ['Salty'],\n    'required': false,\n    '$autoname': 'Salty',\n    'appearance': 'w1',\n  },\n  {\n    'hint': [''],\n    'name': 'Sweet',\n    'type': 'text',\n    '$kuid': 'qp2gg39',\n    'label': ['Sweet'],\n    'required': true,\n    '$autoname': 'Sweet',\n    'appearance': 'w1',\n  },\n  {\n    'type': 'end_kobomatrix',\n    '$kuid': '/hn03y22',\n  },\n  {\n    'type': 'end_repeat',\n    '$kuid': '/wr4ir59',\n  },\n];\n\nexport const matrixRepeatSurveyChoices = [\n  {\n    'name': 'baked',\n    '$kuid': 'hb7vh55',\n    'label': ['Baked'],\n    'list_name': 'matrix_ri0sw49',\n    '$autovalue': 'baked',\n  },\n  {\n    'name': 'raw',\n    '$kuid': 'us3nd72',\n    'label': ['Raw'],\n    'list_name': 'matrix_ri0sw49',\n    '$autovalue': 'raw',\n  },\n];\n\nexport const matrixRepeatSurveySubmission = {\n  '_id': 16,\n  '_notes': [],\n  '_validation_status': {},\n  '_uuid': '967be1fa-e015-44f9-af6e-38c795db705a',\n  '_bamboo_dataset_id': '',\n  '_tags': [],\n  '_submitted_by': null,\n  '_xform_id_string': 'aZWrtKay885DknXjjoB7NB',\n  'meta/instanceID': 'uuid:967be1fa-e015-44f9-af6e-38c795db705a',\n  'formhub/uuid': '3d4bb313b9244e97a64339f43bb4317c',\n  'end': '2020-08-24T14:50:33.709+02:00',\n  'Simple_repeat': [\n    {\n      'Simple_repeat/Best_food_raw/Best_food_raw_Sweet': 'apple',\n      'Simple_repeat/Best_food_baked/Best_food_baked_Salty': 'bread',\n      'Simple_repeat/Best_food_baked/Best_food_baked_Sweet': 'pie',\n      'Simple_repeat/Best_food_raw/Best_food_raw_Salty': 'olive',\n    },\n    {\n      'Simple_repeat/Best_food_raw/Best_food_raw_Sweet': 'tomato',\n      'Simple_repeat/Best_food_baked/Best_food_baked_Salty': 'pizza',\n      'Simple_repeat/Best_food_baked/Best_food_baked_Sweet': 'croissant',\n      'Simple_repeat/Best_food_raw/Best_food_raw_Salty': 'cucumber',\n    },\n  ],\n  '_submission_time': '2020-08-24T12:50:49',\n  '_attachments': [],\n  'start': '2020-08-24T14:48:52.577+02:00',\n  '_geolocation': [\n    null, null,\n  ],\n  '_status': 'submitted_via_web',\n  '__version__': 'vLao7eC5zPrkyAHKYFt9kY',\n};\n\nexport const matrixRepeatSurveyDisplayData = [\n  {\n    'type': 'group_repeat',\n    'label': 'Simple repeat',\n    'name': 'Simple_repeat',\n    'children': [\n      {\n        'type': 'group_matrix',\n        'label': 'Best food',\n        'name': 'Best_food',\n        'children': [\n          {\n            'type': 'group_matrix_row',\n            'label': 'Baked',\n            'name': 'baked',\n            'children': [\n              {\n                'type': 'text',\n                'label': 'Salty',\n                'name': 'Salty',\n                'data': 'bread',\n              },\n              {\n                'type': 'text',\n                'label': 'Sweet',\n                'name': 'Sweet',\n                'data': 'pie',\n              },\n            ],\n          },\n          {\n            'type': 'group_matrix_row',\n            'label': 'Raw',\n            'name': 'raw',\n            'children': [\n              {\n                'type': 'text',\n                'label': 'Salty',\n                'name': 'Salty',\n                'data': 'olive',\n              },\n              {\n                'type': 'text',\n                'label': 'Sweet',\n                'name': 'Sweet',\n                'data': 'apple',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    'type': 'group_repeat',\n    'label': 'Simple repeat',\n    'name': 'Simple_repeat',\n    'children': [\n      {\n        'type': 'group_matrix',\n        'label': 'Best food',\n        'name': 'Best_food',\n        'children': [\n          {\n            'type': 'group_matrix_row',\n            'label': 'Baked',\n            'name': 'baked',\n            'children': [\n              {\n                'type': 'text',\n                'label': 'Salty',\n                'name': 'Salty',\n                'data': 'pizza',\n              },\n              {\n                'type': 'text',\n                'label': 'Sweet',\n                'name': 'Sweet',\n                'data': 'croissant',\n              },\n            ],\n          },\n          {\n            'type': 'group_matrix_row',\n            'label': 'Raw',\n            'name': 'raw',\n            'children': [\n              {\n                'type': 'text',\n                'label': 'Salty',\n                'name': 'Salty',\n                'data': 'cucumber',\n              },\n              {\n                'type': 'text',\n                'label': 'Sweet',\n                'name': 'Sweet',\n                'data': 'tomato',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n];\n","import {\n  simpleSurvey,\n  simpleSurveyChoices,\n  simpleSurveySubmission,\n  simpleSurveyDisplayData,\n  simpleSurveySubmissionEmpty,\n  simpleSurveyDisplayDataEmpty,\n  repeatSurvey,\n  repeatSurveySubmission,\n  repeatSurveyDisplayData,\n  nestedRepeatSurvey,\n  nestedRepeatSurveySubmission,\n  nestedRepeatSurveyDisplayData,\n  matrixSurvey,\n  matrixSurveyChoices,\n  matrixSurveySubmission,\n  matrixSurveyDisplayData,\n  groupsSurvey,\n  groupsSurveyChoices,\n  groupsSurveySubmission,\n  groupsSurveyDisplayData,\n  everythingSurvey,\n  everythingSurveyChoices,\n  everythingSurveySubmission,\n  everythingSurveyDisplayData,\n  matrixRepeatSurvey,\n  matrixRepeatSurveyChoices,\n  matrixRepeatSurveySubmission,\n  matrixRepeatSurveyDisplayData,\n} from './submissionUtils.mocks';\nimport {getSubmissionDisplayData} from './submissionUtils';\n\ndescribe('getSubmissionDisplayData', () => {\n  it('should return a valid data for a survey with a group', () => {\n      const test = getSubmissionDisplayData(simpleSurvey, simpleSurveyChoices, 1, simpleSurveySubmission).children;\n      const target = simpleSurveyDisplayData;\n      expect(test).to.deep.equal(target);\n  });\n\n  it('should return a null data entries for a survey with no answers', () => {\n      const test = getSubmissionDisplayData(simpleSurvey, simpleSurveyChoices, 0, simpleSurveySubmissionEmpty).children;\n      const target = simpleSurveyDisplayDataEmpty;\n      expect(test).to.deep.equal(target);\n  });\n\n  it('should return a valid data for a survey with a repeat group', () => {\n      const test = getSubmissionDisplayData(repeatSurvey, null, 0, repeatSurveySubmission).children;\n      const target = repeatSurveyDisplayData;\n      expect(test).to.deep.equal(target);\n  });\n\n  it('should return a valid data for a survey with nested repeat groups', () => {\n      const test = getSubmissionDisplayData(nestedRepeatSurvey, null, 0, nestedRepeatSurveySubmission).children;\n      const target = nestedRepeatSurveyDisplayData;\n      expect(test).to.deep.equal(target);\n  });\n\n  it('should return a valid data for a survey with a matrix', () => {\n      const test = getSubmissionDisplayData(matrixSurvey, matrixSurveyChoices, 0, matrixSurveySubmission).children;\n      const target = matrixSurveyDisplayData;\n      expect(test).to.deep.equal(target);\n  });\n\n  it('should return a valid data for a survey with all kinds of groups', () => {\n      const test = getSubmissionDisplayData(groupsSurvey, groupsSurveyChoices, 0, groupsSurveySubmission).children;\n      const target = groupsSurveyDisplayData;\n      expect(test).to.deep.equal(target);\n  });\n\n  it('should return a valid data for every possible question type', () => {\n      const test = getSubmissionDisplayData(everythingSurvey, everythingSurveyChoices, 0, everythingSurveySubmission).children;\n      const target = everythingSurveyDisplayData;\n      expect(test).to.deep.equal(target);\n  });\n\n  it('should return a valid data for a matrix group inside repeat group', () => {\n      const test = getSubmissionDisplayData(matrixRepeatSurvey, matrixRepeatSurveyChoices, 0, matrixRepeatSurveySubmission).children;\n      const target = matrixRepeatSurveyDisplayData;\n      expect(test).to.deep.equal(target);\n  });\n});\n","export const surveyWithGroups = [\n  {\n    '$autoname': 'start',\n    '$kuid': 'RCRVJs6v8',\n    'type': 'start',\n    'name': 'start'\n  }, {\n    '$autoname': 'end',\n    '$kuid': 'Oaffb3Ce1',\n    'type': 'end',\n    'name': 'end'\n  }, {\n    '$autoname': 'Your_place',\n    '$kuid': 'ry17h97',\n    'required': false,\n    'type': 'geopoint',\n    'label': ['Your place']\n  }, {\n    '$autoname': 'Your_name',\n    '$kuid': 'bp66l95',\n    'required': false,\n    'type': 'text',\n    'label': ['Your name']\n  }, {\n    '$autoname': 'group_breakfast',\n    '$kuid': 'eu4rd78',\n    'type': 'begin_group',\n    'name': 'group_breakfast',\n    'label': ['Breakfast']\n  }, {\n    '$autoname': 'When_did_you_eat',\n    '$kuid': 'sn0ll77',\n    'required': false,\n    'type': 'time',\n    'label': ['When did you eat?']\n  }, {\n    '$autoname': 'What_did_you_eat',\n    '$kuid': 'lh5jq54',\n    'required': false,\n    'type': 'text',\n    'label': ['What did you eat?']\n  }, {\n    '$kuid': '/eu4rd78',\n    'type': 'end_group'\n  }, {\n    '$autoname': 'group_snacks',\n    '$kuid': 'yq4bo29',\n    'type': 'begin_repeat',\n    'name': 'group_snacks',\n    'label': ['Snacks during the day']\n  }, {\n    '$autoname': 'Snack_name',\n    '$kuid': 'tb3mh66',\n    'required': false,\n    'type': 'text',\n    'label': ['Snack name']\n  }, {\n    '$autoname': 'Time_of_consumption',\n    '$kuid': 'tq2zv81',\n    'required': false,\n    'type': 'time',\n    'label': ['Time of consumption']\n  }, {\n    '$autoname': 'group_nutrients',\n    '$kuid': 'su3ww56',\n    'type': 'begin_group',\n    'name': 'group_nutrients',\n    'label': ['Nutrients']\n  }, {\n    '$autoname': 'How_much_protein_was_it',\n    '$kuid': 'bg5yt06',\n    'required': false,\n    'type': 'integer',\n    'label': ['How much protein was it?']\n  }, {\n    '$autoname': 'How_much_H2O_was_it',\n    '$kuid': 'iz5bf84',\n    'required': false,\n    'type': 'integer',\n    'label': ['How much H2O was it?']\n  }, {\n    '$kuid': '/su3ww56',\n    'type': 'end_group'\n  }, {\n    '$kuid': '/yq4bo29',\n    'type': 'end_repeat'\n  }, {\n    '$autoname': 'group_favs',\n    '$kuid': 'vy2km60',\n    'type': 'begin_group',\n    'name': 'group_favs',\n    'label': ['Favourites']\n  }, {\n    '$autoname': 'Favourite_food',\n    '$kuid': 'yt3yl96',\n    'required': false,\n    'type': 'text',\n    'label': ['Favourite food']\n  }, {\n    '$autoname': 'group_favplant',\n    '$kuid': 'vj5yb24',\n    'type': 'begin_group',\n    'name': 'group_favplant',\n    'label': ['Favourite plant food']\n  }, {\n    '$autoname': 'Favourite_fruit',\n    '$kuid': 'wa1gp21',\n    'required': false,\n    'type': 'text',\n    'label': ['Favourite fruit']\n  }, {\n    '$autoname': 'group_favveg',\n    '$kuid': 'qq1rn39',\n    'type': 'begin_group',\n    'name': 'group_favveg',\n    'label': ['Favourite vegetables']\n  }, {\n    '$autoname': 'Favourite_carrot',\n    '$kuid': 'ik3zw20',\n    'required': false,\n    'type': 'text',\n    'label': ['Favourite carrot']\n  }, {\n    '$autoname': 'Favourite_potato',\n    '$kuid': 'ea5uq17',\n    'required': false,\n    'type': 'text',\n    'label': ['Favourite potato']\n  }, {\n    '$kuid': '/qq1rn39',\n    'type': 'end_group'\n  }, {\n    '$kuid': '/vj5yb24',\n    'type': 'end_group'\n  }, {\n    '$autoname': 'group_favvegan',\n    '$kuid': 'oe2bb55',\n    'type': 'begin_group',\n    'name': 'group_favvegan',\n    'label': ['Favourite vegan stuff']\n  }, {\n    '$autoname': 'Favourite_vegan_hummus',\n    '$kuid': 'lk4jn23',\n    'required': false,\n    'type': 'text',\n    'label': ['Favourite vegan hummus']\n  }, {\n    '$kuid': '/oe2bb55',\n    'type': 'end_group'\n  }, {\n    '$autoname': 'Favourite_spiece',\n    '$kuid': 'zv21a26',\n    'required': false,\n    'type': 'text',\n    'label': ['Favourite spiece']\n  }, {\n    '$kuid': '/vy2km60',\n    'type': 'end_group'\n  }, {\n    '$autoname': 'Comments',\n    '$kuid': 'sm0pu34',\n    'required': false,\n    'type': 'text',\n    'label': ['Comments']\n  }\n];\n\nexport const surveyWithAllPossibleGroups = [{\n  'name': 'start',\n  'type': 'start',\n  '$kuid': 'yIzTq1EhT',\n  '$autoname': 'start'\n}, {\n  'name': 'end',\n  'type': 'end',\n  '$kuid': 'vrOUh8w2q',\n  '$autoname': 'end'\n}, {\n  'name': 'today',\n  'type': 'today',\n  '$kuid': 'eXoXxQQNi',\n  '$autoname': 'today'\n}, {\n  'name': 'username',\n  'type': 'username',\n  '$kuid': 'plYTFwZ63',\n  '$autoname': 'username'\n}, {\n  'name': 'simserial',\n  'type': 'simserial',\n  '$kuid': 'cDTRJ5D78',\n  '$autoname': 'simserial'\n}, {\n  'name': 'subscriberid',\n  'type': 'subscriberid',\n  '$kuid': 'Nt06yZ7th',\n  '$autoname': 'subscriberid'\n}, {\n  'name': 'deviceid',\n  'type': 'deviceid',\n  '$kuid': '1W3n5pkGF',\n  '$autoname': 'deviceid'\n}, {\n  'name': 'phonenumber',\n  'type': 'phonenumber',\n  '$kuid': 'GFKDd8m18',\n  '$autoname': 'phonenumber'\n}, {\n  'name': 'group_people',\n  'type': 'begin_repeat',\n  '$kuid': 'fs1km00',\n  'label': ['People'],\n  '$autoname': 'group_people'\n}, {\n  'type': 'text',\n  '$kuid': 'sr97c95',\n  'label': ['First name'],\n  'required': false,\n  '$autoname': 'First_name'\n}, {\n  'type': 'end_repeat',\n  '$kuid': '/fs1km00'\n}, {\n  'name': 'group_location',\n  'type': 'begin_group',\n  '$kuid': 'lq0th66',\n  'label': ['Location'],\n  '$autoname': 'group_location'\n}, {\n  'type': 'geopoint',\n  '$kuid': 'ug36q69',\n  'label': ['Original location'],\n  'required': false,\n  '$autoname': 'Original_location'\n}, {\n  'type': 'geopoint',\n  '$kuid': 'kw6zd49',\n  'label': ['Current location'],\n  'required': false,\n  '$autoname': 'Current_location'\n}, {\n  'type': 'end_group',\n  '$kuid': '/lq0th66'\n}, {\n  'type': 'begin_score',\n  '$kuid': 'rd0zi80',\n  'label': ['Are you vegan?'],\n  'required': false,\n  '$autoname': 'Are_you_vegan',\n  'kobo--score-choices': 'cv0ok80'\n}, {\n  'type': 'score__row',\n  '$kuid': 'as5gb66',\n  'label': ['Killing humans'],\n  '$autoname': 'Killing_humans'\n}, {\n  'type': 'score__row',\n  '$kuid': 'kv3uq84',\n  'label': ['Killing nonhumans'],\n  '$autoname': 'Killing_nonhumans'\n}, {\n  'type': 'end_score',\n  '$kuid': '/rd0zi80'\n}, {\n  'type': 'begin_rank',\n  '$kuid': 'bj3zo95',\n  'label': ['Best things in life'],\n  'required': false,\n  '$autoname': 'Best_things_in_life',\n  'kobo--rank-items': 'oe89v01',\n  'kobo--rank-constraint-message': 'Items cannot be selected more than once'\n}, {\n  'type': 'rank__level',\n  '$kuid': 'yy8lt23',\n  'label': ['1st choice'],\n  '$autoname': '_1st_choice'\n}, {\n  'type': 'rank__level',\n  '$kuid': 'll0ky89',\n  'label': ['2nd choice'],\n  '$autoname': '_2nd_choice'\n}, {\n  'type': 'rank__level',\n  '$kuid': 'cz6uz72',\n  'label': ['3rd choice'],\n  '$autoname': '_3rd_choice'\n}, {\n  'type': 'end_rank',\n  '$kuid': '/bj3zo95'\n}, {\n  'name': 'group_crossbreeding',\n  'type': 'begin_kobomatrix',\n  '$kuid': 'vs75w20',\n  'label': ['Crossbreeding'],\n  '$autoname': 'group_crossbreeding',\n  '_isRepeat': 'false',\n  'appearance': 'field-list',\n  'kobo--matrix_list': 'matrix_go11n34'\n}, {\n  'hint': [''],\n  'name': 'human',\n  'type': 'text',\n  '$kuid': 'ji8zj93',\n  'label': ['Human'],\n  'required': false,\n  '$autoname': 'human',\n  'appearance': 'w1'\n}, {\n  'hint': [''],\n  'name': 'nonhuman',\n  'type': 'text',\n  '$kuid': 'on6ec28',\n  'label': ['Nonhuman'],\n  'required': false,\n  '$autoname': 'nonhuman',\n  'appearance': 'w1'\n}, {\n  'type': 'end_kobomatrix',\n  '$kuid': '/vs75w20'\n}];\n","import {\n  surveyWithGroups,\n  surveyWithAllPossibleGroups\n} from 'js/assetUtils.mocks';\nimport {getSurveyFlatPaths} from 'js/assetUtils';\n\ndescribe('getSurveyFlatPaths', () => {\n  it('should return a list of paths for all questions', () => {\n    const test = getSurveyFlatPaths(surveyWithGroups);\n    const target = {\n      Your_place: 'Your_place',\n      Your_name: 'Your_name',\n      When_did_you_eat: 'group_breakfast/When_did_you_eat',\n      What_did_you_eat: 'group_breakfast/What_did_you_eat',\n      Snack_name: 'group_snacks/Snack_name',\n      Time_of_consumption: 'group_snacks/Time_of_consumption',\n      How_much_protein_was_it: 'group_snacks/group_nutrients/How_much_protein_was_it',\n      How_much_H2O_was_it: 'group_snacks/group_nutrients/How_much_H2O_was_it',\n      Favourite_food: 'group_favs/Favourite_food',\n      Favourite_fruit: 'group_favs/group_favplant/Favourite_fruit',\n      Favourite_carrot: 'group_favs/group_favplant/group_favveg/Favourite_carrot',\n      Favourite_potato: 'group_favs/group_favplant/group_favveg/Favourite_potato',\n      Favourite_vegan_hummus: 'group_favs/group_favvegan/Favourite_vegan_hummus',\n      Favourite_spiece: 'group_favs/Favourite_spiece',\n      Comments: 'Comments'\n    };\n    expect(test).to.deep.equal(target);\n  });\n\n  it('should work with all possible group types', () => {\n    const test = getSurveyFlatPaths(surveyWithAllPossibleGroups);\n    const target = {\n      'First_name': 'group_people/First_name',\n      'Original_location': 'group_location/Original_location',\n      'Current_location': 'group_location/Current_location',\n      'Killing_humans': 'Are_you_vegan/Killing_humans',\n      'Killing_nonhumans': 'Are_you_vegan/Killing_nonhumans',\n      '_1st_choice': 'Best_things_in_life/_1st_choice',\n      '_2nd_choice': 'Best_things_in_life/_2nd_choice',\n      '_3rd_choice': 'Best_things_in_life/_3rd_choice',\n      'human': 'group_crossbreeding/human',\n      'nonhuman': 'group_crossbreeding/nonhuman',\n    };\n    expect(test).to.deep.equal(target);\n  });\n\n  it('should work with all possible group types with groups included', () => {\n    const test = getSurveyFlatPaths(surveyWithAllPossibleGroups, true);\n    const target = {\n      'group_people': 'group_people',\n      'First_name': 'group_people/First_name',\n      'group_location': 'group_location',\n      'Original_location': 'group_location/Original_location',\n      'Current_location': 'group_location/Current_location',\n      'Are_you_vegan': 'Are_you_vegan',\n      'Killing_humans': 'Are_you_vegan/Killing_humans',\n      'Killing_nonhumans': 'Are_you_vegan/Killing_nonhumans',\n      'Best_things_in_life': 'Best_things_in_life',\n      '_1st_choice': 'Best_things_in_life/_1st_choice',\n      '_2nd_choice': 'Best_things_in_life/_2nd_choice',\n      '_3rd_choice': 'Best_things_in_life/_3rd_choice',\n      'group_crossbreeding': 'group_crossbreeding',\n      'human': 'group_crossbreeding/human',\n      'nonhuman': 'group_crossbreeding/nonhuman',\n    };\n    expect(test).to.deep.equal(target);\n  });\n\n  it('should include groups in the output if asked to', () => {\n    const test = getSurveyFlatPaths(surveyWithGroups, true);\n    const target = {\n      Your_place: 'Your_place',\n      Your_name: 'Your_name',\n      group_breakfast: 'group_breakfast',\n      When_did_you_eat: 'group_breakfast/When_did_you_eat',\n      What_did_you_eat: 'group_breakfast/What_did_you_eat',\n      group_snacks: 'group_snacks',\n      Snack_name: 'group_snacks/Snack_name',\n      Time_of_consumption: 'group_snacks/Time_of_consumption',\n      group_nutrients: 'group_snacks/group_nutrients',\n      How_much_protein_was_it: 'group_snacks/group_nutrients/How_much_protein_was_it',\n      How_much_H2O_was_it: 'group_snacks/group_nutrients/How_much_H2O_was_it',\n      group_favs: 'group_favs',\n      Favourite_food: 'group_favs/Favourite_food',\n      group_favplant: 'group_favs/group_favplant',\n      Favourite_fruit: 'group_favs/group_favplant/Favourite_fruit',\n      group_favveg: 'group_favs/group_favplant/group_favveg',\n      Favourite_carrot: 'group_favs/group_favplant/group_favveg/Favourite_carrot',\n      Favourite_potato: 'group_favs/group_favplant/group_favveg/Favourite_potato',\n      group_favvegan: 'group_favs/group_favvegan',\n      Favourite_vegan_hummus: 'group_favs/group_favvegan/Favourite_vegan_hummus',\n      Favourite_spiece: 'group_favs/Favourite_spiece',\n      Comments: 'Comments'\n    };\n    expect(test).to.deep.equal(target);\n  });\n});\n","// need an asset with locking profiles included and used for rows\n\nexport const simpleTemplate = {\n  'url': 'http://kf.kobo.local/api/v2/assets/ag5w6923oyv5NitEW6aez3/',\n  'owner': 'http://kf.kobo.local/api/v2/users/kobo/',\n  'owner__username': 'kobo',\n  'parent': null,\n  'settings': {\n    'sector': {\n      'label': 'Other',\n      'value': 'Other',\n    },\n    'country': {\n      'label': 'United States',\n      'value': 'USA',\n    },\n    'description': '',\n    'organization': 'Kobo Inc.',\n    'share-metadata': true,\n  },\n  'asset_type': 'template',\n  'summary': {\n    'geo': false,\n    'labels': [\n      'Best thing in the world?', 'Person', 'Your name', 'Your age',\n    ],\n    'columns': [\n      'type', 'label', 'required', 'select_from_list_name', 'name',\n    ],\n    'languages': [\n      'English (en)', 'Polski (pl)',\n    ],\n    'row_count': 4,\n    'default_translation': 'English (en)',\n  },\n  'content': {\n    'schema': '1',\n    'survey': [\n      {\n        'name': 'start',\n        'type': 'start',\n        '$kuid': 'ZJRmskGCC',\n        '$autoname': 'start',\n      }, {\n        'name': 'end',\n        'type': 'end',\n        '$kuid': 'JuoCtJWO5',\n        '$autoname': 'end',\n      }, {\n        'type': 'select_one',\n        '$kuid': 'ri0lk77',\n        'label': [\n          'Best thing in the world?', 'Najlepsze na świecie?',\n        ],\n        'required': false,\n        '$autoname': 'Best_thing_in_the_world',\n        'select_from_list_name': 'dp8iw04',\n      }, {\n        'name': 'person',\n        'type': 'begin_group',\n        '$kuid': 'xl7sb31',\n        'label': [\n          'Person', 'Osoba',\n        ],\n        '$autoname': 'person',\n      }, {\n        'type': 'text',\n        '$kuid': 'xw6go48',\n        'label': [\n          'Your name', 'Twoje imię',\n        ],\n        'required': false,\n        '$autoname': 'Your_name',\n      }, {\n        'type': 'integer',\n        '$kuid': 'wd3rh84',\n        'label': [\n          'Your age', 'Twój wiek',\n        ],\n        'required': false,\n        '$autoname': 'Your_age',\n      }, {\n        'type': 'end_group',\n        '$kuid': '/xl7sb31',\n      },\n    ],\n    'choices': [\n      {\n        'name': 'peace',\n        '$kuid': '7grWIZ8bE',\n        'label': [\n          'Peace', 'Pokój',\n        ],\n        'list_name': 'dp8iw04',\n        '$autovalue': 'peace',\n      }, {\n        'name': 'love',\n        '$kuid': 'I4x3DFdQl',\n        'label': [\n          'Love', 'Miłość',\n        ],\n        'list_name': 'dp8iw04',\n        '$autovalue': 'love',\n      }, {\n        'name': 'understanding',\n        '$kuid': 'klWY60huh',\n        'label': [\n          'Understanding', 'Zrozumienie',\n        ],\n        'list_name': 'dp8iw04',\n        '$autovalue': 'understanding',\n      },\n    ],\n    'settings': {\n      'default_language': 'English (en)',\n    },\n    'translated': ['label'],\n    'translations': ['English (en)', 'Polski (pl)'],\n  },\n  'uid': 'ag5w6923oyv5NitEW6aez3',\n  'kind': 'asset',\n  'name': 'Test template',\n};\n\nexport const simpleTemplateLocked = {\n  'url': 'http://kf.kobo.local/api/v2/assets/ag5w6923oyv5NitEW6aez3/',\n  'owner': 'http://kf.kobo.local/api/v2/users/kobo/',\n  'owner__username': 'kobo',\n  'parent': null,\n  'settings': {\n    'sector': {\n      'label': 'Other',\n      'value': 'Other',\n    },\n    'country': {\n      'label': 'United States',\n      'value': 'USA',\n    },\n    'description': '',\n    'organization': 'Kobo Inc.',\n    'share-metadata': true,\n  },\n  'asset_type': 'template',\n  'summary': {\n    'geo': false,\n    'labels': [\n      'Best thing in the world?', 'Person', 'Your name', 'Your age',\n    ],\n    'columns': [\n      'type', 'label', 'required', 'select_from_list_name', 'name',\n    ],\n    'languages': [\n      'English (en)', 'Polski (pl)',\n    ],\n    'row_count': 4,\n    'default_translation': 'English (en)',\n  },\n  'content': {\n    'schema': '1',\n    'survey': [\n      {\n        'name': 'start',\n        'type': 'start',\n        '$kuid': 'ZJRmskGCC',\n        '$autoname': 'start',\n      }, {\n        'name': 'end',\n        'type': 'end',\n        '$kuid': 'JuoCtJWO5',\n        '$autoname': 'end',\n      }, {\n        'type': 'select_one',\n        '$kuid': 'ri0lk77',\n        'label': [\n          'Best thing in the world?', 'Najlepsze na świecie?',\n        ],\n        'required': false,\n        '$autoname': 'Best_thing_in_the_world',\n        'select_from_list_name': 'dp8iw04',\n        'kobo--locking-profile': 'lock2',\n      }, {\n        'name': 'person',\n        'type': 'begin_group',\n        '$kuid': 'xl7sb31',\n        'label': [\n          'Person', 'Osoba',\n        ],\n        '$autoname': 'person',\n        'kobo--locking-profile': 'lock2',\n      }, {\n        'type': 'text',\n        '$kuid': 'xw6go48',\n        'label': [\n          'Your name', 'Twoje imię',\n        ],\n        'required': false,\n        '$autoname': 'Your_name',\n      }, {\n        'type': 'integer',\n        '$kuid': 'wd3rh84',\n        'label': [\n          'Your age', 'Twój wiek',\n        ],\n        'required': false,\n        '$autoname': 'Your_age',\n        'kobo--locking-profile': 'mycustomlock1',\n      }, {\n        'type': 'end_group',\n        '$kuid': '/xl7sb31',\n      },\n    ],\n    'choices': [\n      {\n        'name': 'peace',\n        '$kuid': '7grWIZ8bE',\n        'label': [\n          'Peace', 'Pokój',\n        ],\n        'list_name': 'dp8iw04',\n        '$autovalue': 'peace',\n      }, {\n        'name': 'love',\n        '$kuid': 'I4x3DFdQl',\n        'label': [\n          'Love', 'Miłość',\n        ],\n        'list_name': 'dp8iw04',\n        '$autovalue': 'love',\n      }, {\n        'name': 'understanding',\n        '$kuid': 'klWY60huh',\n        'label': [\n          'Understanding', 'Zrozumienie',\n        ],\n        'list_name': 'dp8iw04',\n        '$autovalue': 'understanding',\n      },\n    ],\n    'kobo--locking-profiles': [\n      {\n        name: 'mycustomlock1',\n        restrictions: [\n          'choice_add',\n          'choice_delete',\n          'choice_edit',\n          'question_settings_edit',\n          'group_label_edit',\n          'group_question_order_edit',\n          'group_add',\n          'question_order_edit',\n        ],\n      },\n      {\n        name: 'lock2',\n        restrictions: [\n          'question_delete',\n          'group_delete',\n          'language_edit',\n        ],\n      },\n    ],\n    'settings': {\n      'default_language': 'English (en)',\n      'kobo--locking-profile': 'mycustomlock1',\n    },\n    'translated': ['label'],\n    'translations': ['English (en)', 'Polski (pl)'],\n  },\n  'uid': 'ag5w6923oyv5NitEW6aez3',\n  'kind': 'asset',\n  'name': 'Test template',\n};\n","import clonedeep from 'lodash.clonedeep';\nimport {\n  simpleTemplate,\n  simpleTemplateLocked,\n} from './lockingUtils.mocks';\nimport {\n  hasRowRestriction,\n  hasAssetRestriction,\n  getLockingProfile,\n  getRowLockingProfile,\n  getAssetLockingProfile,\n  isRowLocked,\n  isAssetLocked,\n  hasAssetAnyLocking,\n  isAssetAllLocked,\n  isAssetLockable,\n  getQuestionFeatures,\n  getGroupFeatures,\n  getFormFeatures,\n} from './lockingUtils';\nimport {\n  LOCKING_RESTRICTIONS,\n  LOCK_ALL_PROP_NAME,\n  LOCKING_PROFILE_PROP_NAME,\n  QUESTION_RESTRICTIONS,\n  GROUP_RESTRICTIONS,\n  FORM_RESTRICTIONS,\n} from './lockingConstants';\nimport {getRowName} from 'js/assetUtils';\nimport {ASSET_TYPES} from 'js/constants';\n\nconst simpleTemplateLockedWithAll = clonedeep(simpleTemplateLocked);\nsimpleTemplateLockedWithAll.content.settings[LOCK_ALL_PROP_NAME] = true;\n\nconst simpleTemplateWithAll = clonedeep(simpleTemplate);\nsimpleTemplateWithAll.content.settings[LOCK_ALL_PROP_NAME] = true;\n\n// a template where only rows have locking profiles\nconst simpleTemplateLockedRowsOnly = clonedeep(simpleTemplateLocked);\ndelete simpleTemplateLockedRowsOnly.content.settings[LOCKING_PROFILE_PROP_NAME];\n\n// a template where asset has locking profile but no definition for it\nconst simpleTemplateLockedFormUndef = clonedeep(simpleTemplateLocked);\nsimpleTemplateLockedFormUndef.content.settings[LOCKING_PROFILE_PROP_NAME] = 'nonexistent_lock_1';\n\n// a template with no locking profile definitions, but with asset and row having locking profile assigned\nconst simpleTemplateLockedRowUndef = clonedeep(simpleTemplate);\nsimpleTemplateLockedRowUndef.content.settings['kobo--locking-profile'] = 'nonexistent_lock_1';\nsimpleTemplateLockedRowUndef.content.survey[2]['kobo--locking-profile'] = 'nonexistent_lock_2';\n\ndescribe('hasRowRestriction', () => {\n  it('should be false for all restriction for rows in un-locked template', () => {\n    simpleTemplate.content.survey.forEach((row) => {\n      Object.keys(LOCKING_RESTRICTIONS).forEach((restrictionName) => {\n        const test = hasRowRestriction(\n          simpleTemplate.content,\n          getRowName(row),\n          restrictionName\n        );\n        expect(test).to.equal(false);\n      });\n    });\n  });\n\n  it('should be true for all restrictions for rows in lock_all template', () => {\n    simpleTemplateWithAll.content.survey.forEach((row) => {\n      Object.keys(LOCKING_RESTRICTIONS).forEach((restrictionName) => {\n        const test = hasRowRestriction(\n          simpleTemplateWithAll.content,\n          getRowName(row),\n          restrictionName\n        );\n        expect(test).to.equal(true);\n      });\n    });\n  });\n\n  it('should be true for all restrictions for rows in lock_all template regardless of locking profile', () => {\n    simpleTemplateLockedWithAll.content.survey.forEach((row) => {\n      Object.keys(LOCKING_RESTRICTIONS).forEach((restrictionName) => {\n        const test = hasRowRestriction(\n          simpleTemplateLockedWithAll.content,\n          getRowName(row),\n          restrictionName\n        );\n        expect(test).to.equal(true);\n      });\n    });\n  });\n\n  it('should check row restriction in locked template', () => {\n    const expectedRestrictions = {\n      start: [],\n      end: [],\n      Best_thing_in_the_world: [\n        'question_delete',\n        'group_delete',\n        'language_edit',\n      ],\n      person: [\n        'question_delete',\n        'group_delete',\n        'language_edit',\n      ],\n      Your_name: [],\n      Your_age: [\n        'choice_add',\n        'choice_delete',\n        'choice_edit',\n        'question_settings_edit',\n        'group_label_edit',\n        'group_question_order_edit',\n        'group_add',\n        'question_order_edit',\n      ],\n    };\n    Object.keys(expectedRestrictions).forEach((rowName) => {\n      Object.keys(LOCKING_RESTRICTIONS).forEach((restrictionName) => {\n        const test = hasRowRestriction(\n          simpleTemplateLocked.content,\n          rowName,\n          restrictionName\n        );\n        expect(test).to.equal(expectedRestrictions[rowName].includes(restrictionName));\n      });\n    });\n  });\n});\n\ndescribe('hasAssetRestriction', () => {\n  it('should say no restrictions for un-locked template', () => {\n    Object.keys(LOCKING_RESTRICTIONS).forEach((restrictionName) => {\n      const test = hasAssetRestriction(simpleTemplate.content, restrictionName);\n      expect(test).to.equal(false);\n    });\n  });\n\n  it('should be true for all restrictions for lock_all template', () => {\n    Object.keys(LOCKING_RESTRICTIONS).forEach((restrictionName) => {\n      const test = hasAssetRestriction(simpleTemplateWithAll.content, restrictionName);\n      expect(test).to.equal(true);\n    });\n  });\n\n  it('should be true for all restrictions for lock_all template regardless of locking profiles', () => {\n    Object.keys(LOCKING_RESTRICTIONS).forEach((restrictionName) => {\n      const test = hasAssetRestriction(simpleTemplateLockedWithAll.content, restrictionName);\n      expect(test).to.equal(true);\n    });\n  });\n\n  it('should check asset restrictions in locked template', () => {\n    const expectedRestrictions = [\n      'choice_add',\n      'choice_delete',\n      'choice_edit',\n      'question_settings_edit',\n      'group_label_edit',\n      'group_question_order_edit',\n      'group_add',\n      'question_order_edit',\n    ];\n    Object.keys(LOCKING_RESTRICTIONS).forEach((restrictionName) => {\n      const test = hasAssetRestriction(simpleTemplateLocked.content, restrictionName);\n      expect(test).to.equal(expectedRestrictions.includes(restrictionName));\n    });\n  });\n});\n\ndescribe('getLockingProfile', () => {\n  it('should find custom locking profile', () => {\n    const test = getLockingProfile(simpleTemplateLocked.content, 'mycustomlock1');\n    expect(test).to.deep.equal({\n      index: 0,\n      name: 'mycustomlock1',\n      restrictions: [\n        'choice_add',\n        'choice_delete',\n        'choice_edit',\n        'question_settings_edit',\n        'group_label_edit',\n        'group_question_order_edit',\n        'group_add',\n        'question_order_edit',\n      ],\n    });\n  });\n\n  it('should return proper index for found locking profile', () => {\n    const test = getLockingProfile(simpleTemplateLocked.content, 'lock2');\n    expect(test).to.deep.equal({\n      index: 1,\n      name: 'lock2',\n      restrictions: [\n        'question_delete',\n        'group_delete',\n        'language_edit',\n      ],\n    });\n  });\n\n  it('should return null for not found', () => {\n    const test = getLockingProfile(simpleTemplateLocked.content, 'nothingness_approaching');\n    expect(test).to.equal(null);\n  });\n});\n\ndescribe('getRowLockingProfile', () => {\n  it('should find custom locking profile for a Row', () => {\n    const test = getRowLockingProfile(simpleTemplateLocked.content, 'Your_age');\n    expect(test).to.deep.equal({\n      index: 0,\n      name: 'mycustomlock1',\n      restrictions: [\n        'choice_add',\n        'choice_delete',\n        'choice_edit',\n        'question_settings_edit',\n        'group_label_edit',\n        'group_question_order_edit',\n        'group_add',\n        'question_order_edit',\n      ],\n    });\n  });\n\n  it('should return null for not found', () => {\n    const test = getRowLockingProfile(simpleTemplateLocked.content, 'Your_name');\n    expect(test).to.equal(null);\n  });\n});\n\ndescribe('getAssetLockingProfile', () => {\n  it('should find custom locking profile for the asset', () => {\n    const test = getAssetLockingProfile(simpleTemplateLocked.content);\n    expect(test).to.deep.equal({\n      index: 0,\n      name: 'mycustomlock1',\n      restrictions: [\n        'choice_add',\n        'choice_delete',\n        'choice_edit',\n        'question_settings_edit',\n        'group_label_edit',\n        'group_question_order_edit',\n        'group_add',\n        'question_order_edit',\n      ],\n    });\n  });\n\n  it('should return null for locking profile that has no definition', () => {\n    const test = getAssetLockingProfile(simpleTemplateLockedFormUndef.content);\n    expect(test).to.equal(null);\n  });\n});\n\ndescribe('isRowLocked', () => {\n  it('should be false for all rows in un-locked template', () => {\n    simpleTemplate.content.survey.forEach((row) => {\n      const test = isRowLocked(simpleTemplate.content, getRowName(row));\n      expect(test).to.equal(false);\n    });\n  });\n\n  it('should be true for all rows in lock_all template', () => {\n    simpleTemplateWithAll.content.survey.forEach((row) => {\n      const test = isRowLocked(simpleTemplateWithAll.content, getRowName(row));\n      expect(test).to.equal(true);\n    });\n  });\n\n  it('should be true for all rows in lock_all template regardless of locking profile', () => {\n    simpleTemplateLockedWithAll.content.survey.forEach((row) => {\n      const test = isRowLocked(simpleTemplateLockedWithAll.content, getRowName(row));\n      expect(test).to.equal(true);\n    });\n  });\n\n  it('should check row being locked in locked template', () => {\n    const expectedRestrictions = {\n      start: false,\n      end: false,\n      Best_thing_in_the_world: true,\n      person: true,\n      Your_name: false,\n      Your_age: true,\n    };\n    Object.keys(expectedRestrictions).forEach((rowName) => {\n      const test = isRowLocked(simpleTemplateLocked.content, rowName);\n      expect(test).to.equal(expectedRestrictions[rowName]);\n    });\n  });\n});\n\ndescribe('isAssetLocked', () => {\n  it('should be false for un-locked template', () => {\n    const test = isAssetLocked(simpleTemplate.content);\n    expect(test).to.equal(false);\n  });\n\n  it('should be true for template with some locking', () => {\n    const test = isAssetLocked(simpleTemplateLocked.content);\n    expect(test).to.equal(true);\n  });\n\n  it('should be true for template with lock_all', () => {\n    const test = isAssetLocked(simpleTemplateWithAll.content);\n    expect(test).to.equal(true);\n  });\n\n  it('should be false if rows have locking profiles, but asset doesn\\'t', () => {\n    const test = isAssetLocked(simpleTemplateLockedRowUndef.content);\n    expect(test).to.equal(false);\n  });\n\n  it('should be false if rows have locking profile, but it\\'s definition doesn\\'t exist in asset', () => {\n    const test = isAssetLocked(simpleTemplateLockedRowUndef.content);\n    expect(test).to.equal(false);\n  });\n});\n\ndescribe('hasAssetAnyLocking', () => {\n  it('should be false for un-locked template', () => {\n    const test = hasAssetAnyLocking(simpleTemplate.content);\n    expect(test).to.equal(false);\n  });\n\n  it('should be true for template with some locking', () => {\n    const test = hasAssetAnyLocking(simpleTemplateLocked.content);\n    expect(test).to.equal(true);\n  });\n\n  it('should be true for template with lock_all', () => {\n    const test = hasAssetAnyLocking(simpleTemplateWithAll.content);\n    expect(test).to.equal(true);\n  });\n\n  it('should be true if rows have locking profiles, but asset doesn\\'t', () => {\n    const test = hasAssetAnyLocking(simpleTemplateLockedFormUndef.content);\n    expect(test).to.equal(true);\n  });\n\n  it('should be false if rows have locking profile, but it\\'s definition doesn\\'t exist in asset', () => {\n    const test = hasAssetAnyLocking(simpleTemplateLockedRowUndef.content);\n    expect(test).to.equal(false);\n  });\n});\n\ndescribe('isAssetAllLocked', () => {\n  it('should be false for un-locked template', () => {\n    const test = isAssetAllLocked(simpleTemplate.content);\n    expect(test).to.equal(false);\n  });\n\n  it('should be false for template with some locking', () => {\n    const test = isAssetAllLocked(simpleTemplateLocked.content);\n    expect(test).to.equal(false);\n  });\n\n  it('should be true for template with lock_all', () => {\n    const test = isAssetAllLocked(simpleTemplateWithAll.content);\n    expect(test).to.equal(true);\n  });\n\n  it('should be false for template without content', () => {\n    const test = isAssetAllLocked({});\n    expect(test).to.equal(false);\n  });\n});\n\ndescribe('isAssetLockable', () => {\n  it('should be true only for survey', () => {\n    expect(isAssetLockable(ASSET_TYPES.question.id)).to.equal(false);\n    expect(isAssetLockable(ASSET_TYPES.block.id)).to.equal(false);\n    expect(isAssetLockable(ASSET_TYPES.template.id)).to.equal(false);\n    expect(isAssetLockable(ASSET_TYPES.survey.id)).to.equal(true);\n    expect(isAssetLockable(ASSET_TYPES.collection.id)).to.equal(false);\n  });\n});\n\ndescribe('getQuestionFeatures', () => {\n  it('should return null if question does not exist', () => {\n    const test = getQuestionFeatures(simpleTemplateLocked.content, 'nonexistent_question');\n    expect(test).to.equal(null);\n  });\n  it('should return only cans if question is not locked', () => {\n    const test = getQuestionFeatures(simpleTemplate.content, 'Best_thing_in_the_world');\n    expect(test.cans.length).to.equal(QUESTION_RESTRICTIONS.length);\n    expect(test.cants.length).to.equal(0);\n  });\n  it('should return some cans and cants if question is locked', () => {\n    const test = getQuestionFeatures(simpleTemplateLocked.content, 'Best_thing_in_the_world');\n    expect(test.cans.length).to.equal(QUESTION_RESTRICTIONS.length - 1);\n    expect(test.cants.length).to.equal(1);\n  });\n  it('should return only cants if form is fully locked', () => {\n    const test = getQuestionFeatures(simpleTemplateLockedWithAll.content, 'Best_thing_in_the_world');\n    expect(test.cans.length).to.equal(0);\n    expect(test.cants.length).to.equal(QUESTION_RESTRICTIONS.length);\n  });\n});\n\ndescribe('getGroupFeatures', () => {\n  it('should return null if group does not exist', () => {\n    const test = getGroupFeatures(simpleTemplateLocked.content, 'nonexistent_group');\n    expect(test).to.equal(null);\n  });\n  it('should return only cans if group is not locked', () => {\n    const test = getGroupFeatures(simpleTemplate.content, 'person');\n    expect(test.cans.length).to.equal(GROUP_RESTRICTIONS.length);\n    expect(test.cants.length).to.equal(0);\n  });\n  it('should return some cans and cants if group is locked', () => {\n    const test = getGroupFeatures(simpleTemplateLocked.content, 'person');\n    expect(test.cans.length).to.equal(GROUP_RESTRICTIONS.length - 1);\n    expect(test.cants.length).to.equal(1);\n  });\n  it('should return only cants if form is fully locked', () => {\n    const test = getGroupFeatures(simpleTemplateLockedWithAll.content, 'person');\n    expect(test.cans.length).to.equal(0);\n    expect(test.cants.length).to.equal(GROUP_RESTRICTIONS.length);\n  });\n});\n\ndescribe('getFormFeatures', () => {\n  it('should return only cans if form is not locked', () => {\n    const test = getFormFeatures(simpleTemplate.content);\n    expect(test.cans.length).to.equal(FORM_RESTRICTIONS.length);\n    expect(test.cants.length).to.equal(0);\n  });\n  it('should return some cans and cants if form is locked', () => {\n    const test = getFormFeatures(simpleTemplateLocked.content);\n    expect(test.cans.length).to.equal(FORM_RESTRICTIONS.length - 2);\n    expect(test.cants.length).to.equal(2);\n  });\n  it('should return only cants if form is fully locked', () => {\n    const test = getFormFeatures(simpleTemplateLockedWithAll.content);\n    expect(test.cans.length).to.equal(0);\n    expect(test.cants.length).to.equal(FORM_RESTRICTIONS.length);\n  });\n});\n","/**\n* Mock permissions endpoints responses for tests.\n*\n* NOTE: For simplicity we assume that ROOT_URL is empty string.\n*/\n\n// /api/v2/permissions/\nconst permissions = {\n  'count': 11,\n  'next': null,\n  'previous': null,\n  'results': [\n    {\n      'url': '/api/v2/permissions/add_submissions/',\n      'codename': 'add_submissions',\n      'implied': [\n        '/api/v2/permissions/view_asset/'\n      ],\n      'contradictory': [],\n      'name': 'Can submit data to asset'\n    },\n    {\n      'url': '/api/v2/permissions/change_asset/',\n      'codename': 'change_asset',\n      'implied': [\n        '/api/v2/permissions/view_asset/'\n      ],\n      'contradictory': [],\n      'name': 'Can change asset'\n    },\n    {\n      'url': '/api/v2/permissions/change_submissions/',\n      'codename': 'change_submissions',\n      'implied': [\n        '/api/v2/permissions/view_asset/',\n        '/api/v2/permissions/view_submissions/',\n        '/api/v2/permissions/add_submissions/'\n      ],\n      'contradictory': [\n        '/api/v2/permissions/partial_submissions/'\n      ],\n      'name': 'Can modify submitted data for asset'\n    },\n    {\n      'url': '/api/v2/permissions/delete_submissions/',\n      'codename': 'delete_submissions',\n      'implied': [\n        '/api/v2/permissions/view_asset/',\n        '/api/v2/permissions/view_submissions/'\n      ],\n      'contradictory': [\n        '/api/v2/permissions/partial_submissions/'\n      ],\n      'name': 'Can delete submitted data for asset'\n    },\n    {\n      \"url\": \"/api/v2/permissions/manage_asset.json\",\n      \"codename\": \"manage_asset\",\n      \"implied\": [\n        \"/api/v2/permissions/delete_submissions/\",\n        \"/api/v2/permissions/change_submissions/\",\n        \"/api/v2/permissions/validate_submissions/\",\n        \"/api/v2/permissions/view_asset/\",\n        \"/api/v2/permissions/change_asset/\",\n        \"/api/v2/permissions/view_submissions/\",\n        \"/api/v2/permissions/add_submissions/\"\n      ],\n      'contradictory': [\n        '/api/v2/permissions/partial_submissions/'\n      ],\n      \"name\": \"Can manage all aspects of asset\"\n    },\n    {\n      'url': '/api/v2/permissions/partial_submissions/',\n      'codename': 'partial_submissions',\n      'implied': [\n        '/api/v2/permissions/view_asset/'\n      ],\n      'contradictory': [\n        '/api/v2/permissions/view_submissions/',\n        '/api/v2/permissions/change_submissions/',\n        '/api/v2/permissions/validate_submissions/'\n      ],\n      'name': 'Can make partial actions on submitted data for asset for specific users'\n    },\n    {\n      'url': '/api/v2/permissions/validate_submissions/',\n      'codename': 'validate_submissions',\n      'implied': [\n        '/api/v2/permissions/view_asset/',\n        '/api/v2/permissions/view_submissions/'\n      ],\n      'contradictory': [\n        '/api/v2/permissions/partial_submissions/'\n      ],\n      'name': 'Can validate submitted data asset'\n    },\n    {\n      'url': '/api/v2/permissions/view_asset/',\n      'codename': 'view_asset',\n      'implied': [],\n      'contradictory': [],\n      'name': 'Can view asset'\n    },\n    {\n      'url': '/api/v2/permissions/view_submissions/',\n      'codename': 'view_submissions',\n      'implied': [\n        '/api/v2/permissions/view_asset/'\n      ],\n      'contradictory': [\n        '/api/v2/permissions/partial_submissions/'\n      ],\n      'name': 'Can view submitted data for asset',\n    }\n  ]\n};\n\n// /api/v2/assets/<uid>/permission-assignments/\nconst assetWithAnonymousUser = {\n  'count': 7,\n  'next': null,\n  'previous': null,\n  'results': [\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pTi9qyEax49ZA5RP9KnNHB/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/add_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pATUgtDW6v44QG4dDDpnEV/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/change_asset/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pUUcqTtQ6FgEDfHUiQbS24/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/change_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/p5BjfEz9JDQtQTzkT7fHA5/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/validate_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pBjfyz5Zxj95866GtEtsR2/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/view_asset/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pQGiudmuLvN6iHEdH8dJAs/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/view_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pV9kCoWAQT9QUeV2EsTLqj/',\n      'user': '/api/v2/users/AnonymousUser/',\n      'permission': '/api/v2/permissions/view_asset/'\n    }\n  ]\n};\n\n// /api/v2/assets/<uid>/permission-assignments/\nconst assetWithMultipleUsers = {\n  'count': 9,\n  'next': null,\n  'previous': null,\n  'results': [\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pTi9qyEax49ZA5RP9KnNHB/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/add_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pATUgtDW6v44QG4dDDpnEV/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/change_asset/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pUUcqTtQ6FgEDfHUiQbS24/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/change_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/p5BjfEz9JDQtQTzkT7fHA5/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/validate_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pBjfyz5Zxj95866GtEtsR2/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/view_asset/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pQGiudmuLvN6iHEdH8dJAs/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/view_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pnld7XQ1hWYJ5sOUDl4qP/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/delete_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pETvxGayAJwvPaCnt5biVD/',\n      'user': '/api/v2/users/olivier/',\n      'permission': '/api/v2/permissions/view_asset/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/p6KekjhZabd7ao9MBQwN7X/',\n      'user': '/api/v2/users/john/',\n      'permission': '/api/v2/permissions/view_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pxp7BPnP9fohF5ZoH5Uwfa/',\n      'user': '/api/v2/users/john/',\n      'permission': '/api/v2/permissions/view_asset/'\n    }\n  ]\n};\n\n// /api/v2/assets/<uid>/permission-assignments/\nconst assetWithPartial = {\n  'count': 8,\n  'next': null,\n  'previous': null,\n  'results': [\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pTi9qyEax49ZA5RP9KnNHB/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/add_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pATUgtDW6v44QG4dDDpnEV/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/change_asset/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pUUcqTtQ6FgEDfHUiQbS24/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/change_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/p5BjfEz9JDQtQTzkT7fHA5/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/validate_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pBjfyz5Zxj95866GtEtsR2/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/view_asset/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pQGiudmuLvN6iHEdH8dJAs/',\n      'user': '/api/v2/users/kobo/',\n      'permission': '/api/v2/permissions/view_submissions/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/p6KekjhZabd7ao9MBQwN7X/',\n      'user': '/api/v2/users/leszek/',\n      'permission': '/api/v2/permissions/view_asset/'\n    },\n    {\n      'url': '/api/v2/assets/arMB2dNgwewktv954wmo9e/permission-assignments/pxp7BPnP9fohF5ZoH5Uwfa/',\n      'user': '/api/v2/users/leszek/',\n      'permission': '/api/v2/permissions/partial_submissions/',\n      'partial_permissions': [\n        {\n          'url': '/api/v2/permissions/view_submissions/',\n          'filters': [\n            {'_submitted_by': {'$in': ['john', 'olivier']}}\n          ]\n        },\n      ]\n    }\n  ]\n};\n\nexport const endpoints = {\n  permissions,\n  assetWithAnonymousUser,\n  assetWithMultipleUsers,\n  assetWithPartial,\n};\n","import {permParser} from './permParser';\nimport permConfig from './permConfig';\nimport {endpoints} from './permissionsMocks';\nimport constants from 'js/constants';\n\ndescribe('permParser', () => {\n  beforeEach(() => {\n    // bootstraping\n    permConfig.setPermissions(endpoints.permissions.results);\n    constants.ROOT_URL = '';\n  });\n\n  describe('parseBackendData', () => {\n    it('should hide anonymous user permissions from output by default', () => {\n      // in original data there are total 7 permissions (6 of asset owner and\n      // one of anonymous user)\n      chai.expect(endpoints.assetWithAnonymousUser.results.length).to.equal(7);\n      const parsed = permParser.parseBackendData(\n        endpoints.assetWithAnonymousUser.results,\n        endpoints.assetWithAnonymousUser.results[0].user\n      );\n      // parsed data should only contain data of owner\n      chai.expect(parsed.length).to.equal(1);\n      chai.expect(parsed[0].user.name).to.equal('kobo');\n    });\n\n    it('should show anonymous user permissions from output when ordered to', () => {\n      // in original data there are total 7 permissions (6 of asset owner and\n      // one of anonymous user)\n      chai.expect(endpoints.assetWithAnonymousUser.results.length).to.equal(7);\n      const parsed = permParser.parseBackendData(\n        endpoints.assetWithAnonymousUser.results,\n        endpoints.assetWithAnonymousUser.results[0].user,\n        true\n      );\n      // parsed data should contain data of owner and anonymous user\n      chai.expect(parsed.length).to.equal(2);\n      chai.expect(parsed[0].user.name).to.equal('kobo');\n      chai.expect(parsed[1].user.name).to.equal(constants.ANON_USERNAME);\n    });\n\n    it('should group permissions by users properly', () => {\n      // in original data there are total 9 permissions (6 of asset owner,\n      // 2 of one user and 1 of another)\n      chai.expect(endpoints.assetWithMultipleUsers.results.length).to.equal(10);\n      const parsed = permParser.parseBackendData(\n        endpoints.assetWithMultipleUsers.results,\n        endpoints.assetWithMultipleUsers.results[0].user\n      );\n\n      // parsed data should contain data of 3 users\n      chai.expect(parsed.length).to.equal(3);\n      chai.expect(parsed[0].user.name).to.equal('kobo');\n      chai.expect(parsed[0].permissions.length).to.equal(7);\n      chai.expect(parsed[1].user.name).to.equal('john');\n      chai.expect(parsed[1].permissions.length).to.equal(2);\n      chai.expect(parsed[2].user.name).to.equal('olivier');\n      chai.expect(parsed[2].permissions.length).to.equal(1);\n    });\n  });\n\n  describe('sortParseBackendOutput', () => {\n    it('should sort alphabetically with owner always first', () => {\n      const sortedOutput = permParser.sortParseBackendOutput([\n        {user: {url: '/api/v2/users/frank', isOwner: false}},\n        {user: {url: '/api/v2/users/bob', isOwner: false}},\n        {user: {url: '/api/v2/users/diana', isOwner: true}},\n        {user: {url: '/api/v2/users/arthur', isOwner: false}},\n        {user: {url: '/api/v2/users/esther', isOwner: false}},\n        {user: {url: '/api/v2/users/christian', isOwner: false}}\n      ]);\n      chai.expect(sortedOutput).to.deep.equal([\n        {user: {url: '/api/v2/users/diana', isOwner: true}},\n        {user: {url: '/api/v2/users/arthur', isOwner: false}},\n        {user: {url: '/api/v2/users/bob', isOwner: false}},\n        {user: {url: '/api/v2/users/christian', isOwner: false}},\n        {user: {url: '/api/v2/users/esther', isOwner: false}},\n        {user: {url: '/api/v2/users/frank', isOwner: false}}\n      ]);\n    });\n  });\n\n  describe('buildFormData', () => {\n    it('should check proper options', () => {\n      const parsed = permParser.parseBackendData(\n        endpoints.assetWithMultipleUsers.results,\n        endpoints.assetWithMultipleUsers.results[0].user\n      );\n\n      const built = permParser.buildFormData(parsed[1].permissions);\n\n      chai.expect(built).to.deep.equal({\n        formView: true,\n        submissionsView: true\n      });\n    });\n\n    it('should handle partial permissions', () => {\n      const parsed = permParser.parseBackendData(\n        endpoints.assetWithPartial.results,\n        endpoints.assetWithPartial.results[0].user\n      );\n\n      const built = permParser.buildFormData(parsed[1].permissions);\n\n      chai.expect(built).to.deep.equal({\n        formView: true,\n        submissionsViewPartial: true,\n        submissionsViewPartialUsers: ['john', 'olivier']\n      });\n    });\n  });\n\n  describe('parseFormData', () => {\n    it('should exclude all implied permissions as they are not needed', () => {\n      const parsed = permParser.parseFormData({\n        username: 'leszek',\n        formView: true,\n        formEdit: true,\n        submissionsView: true,\n        submissionsViewPartial: false,\n        submissionsViewPartialUsers: [],\n        submissionsAdd: false,\n        submissionsEdit: false,\n        submissionsValidate: true\n      });\n\n      chai.expect(parsed).to.deep.equal([\n        {\n          user: '/api/v2/users/leszek/',\n          permission: '/api/v2/permissions/change_asset/'\n        },\n        {\n          user: '/api/v2/users/leszek/',\n          permission: '/api/v2/permissions/validate_submissions/'\n        }\n      ]);\n    });\n\n    it('should add partial_permissions property for partial submissions permission', () => {\n      const parsed = permParser.parseFormData({\n        username: 'leszek',\n        formView: true,\n        formEdit: false,\n        submissionsView: true,\n        submissionsViewPartial: true,\n        submissionsViewPartialUsers: ['john', 'olivier', 'eric'],\n        submissionsAdd: false,\n        submissionsEdit: false,\n        submissionsValidate: false\n      });\n\n      chai.expect(parsed).to.deep.equal([\n        {\n          user: '/api/v2/users/leszek/',\n          permission: '/api/v2/permissions/partial_submissions/',\n          partial_permissions: [\n            {\n              url: '/api/v2/permissions/view_submissions/',\n              filters: [\n                {'_submitted_by': {'$in': ['john', 'olivier', 'eric']}}\n              ]\n            }\n          ]\n        }\n      ]);\n    });\n  });\n\n  describe('parseUserWithPermsList', () => {\n    it('should return flat list of permissions', () => {\n      const userWithPermsList = permParser.parseBackendData(\n        endpoints.assetWithMultipleUsers.results,\n        endpoints.assetWithMultipleUsers.results[0].user\n      );\n      const parsed = permParser.parseUserWithPermsList(userWithPermsList);\n\n      chai.expect(parsed).to.deep.equal([\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/add_submissions/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/change_asset/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/change_submissions/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/validate_submissions/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/view_asset/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/view_submissions/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/delete_submissions/'\n        },\n        {\n          'user': '/api/v2/users/john/',\n          'permission': '/api/v2/permissions/view_submissions/'\n        },\n        {\n          'user': '/api/v2/users/john/',\n          'permission': '/api/v2/permissions/view_asset/'\n        },\n        {\n          'user': '/api/v2/users/olivier/',\n          'permission': '/api/v2/permissions/view_asset/'\n        },\n      ]);\n    });\n\n    it('should not omit partial permissions', () => {\n      const userWithPermsList = permParser.parseBackendData(\n        endpoints.assetWithPartial.results,\n        endpoints.assetWithPartial.results[0].user\n      );\n      const parsed = permParser.parseUserWithPermsList(userWithPermsList);\n\n      chai.expect(parsed).to.deep.equal([\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/add_submissions/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/change_asset/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/change_submissions/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/validate_submissions/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/view_asset/'\n        },\n        {\n          'user': '/api/v2/users/kobo/',\n          'permission': '/api/v2/permissions/view_submissions/'\n        },\n        {\n          'user': '/api/v2/users/leszek/',\n          'permission': '/api/v2/permissions/view_asset/'\n        },\n        {\n          'user': '/api/v2/users/leszek/',\n          'permission': '/api/v2/permissions/partial_submissions/',\n          'partial_permissions': [\n            {\n              url: '/api/v2/permissions/view_submissions/',\n              filters: [\n                {'_submitted_by': {'$in': ['john', 'olivier']}}\n              ]\n            }\n          ]\n        }\n      ]);\n    });\n  });\n});\n","###\npainstakingly reverse-compiled from this file in dkobo:\nhttps://github.com/kobotoolbox/dkobo/blob/225ca1/dkobo/koboform/static/js/xlform/rowDetailsSkipLogic.model.rowDetails.skipLogic.coffee\n###\n\n_ = require 'underscore'\nBackbone = require 'backbone'\n$utils = require './model.utils'\n$skipLogicHelpers = require './mv.skipLogicHelpers'\n\nrowDetailsSkipLogic = {}\n\nclass rowDetailsSkipLogic.SkipLogicFactory\n  create_operator: (type, symbol, id) ->\n    switch type\n      when 'text' then operator = new rowDetailsSkipLogic.TextOperator symbol\n      when 'date' then operator = new rowDetailsSkipLogic.DateOperator symbol\n      when 'basic' then operator = new rowDetailsSkipLogic.SkipLogicOperator symbol\n      when 'existence' then operator = new rowDetailsSkipLogic.ExistenceSkipLogicOperator symbol\n      when 'select_multiple' then operator = new rowDetailsSkipLogic.SelectMultipleSkipLogicOperator symbol\n      when 'empty' then return new rowDetailsSkipLogic.EmptyOperator()\n    operator.set 'id', id\n    operator\n  create_criterion_model: () ->\n    new rowDetailsSkipLogic.SkipLogicCriterion(@, @survey)\n  create_response_model: (type) ->\n    model = null\n    switch type\n      when 'integer' then model = new rowDetailsSkipLogic.IntegerResponseModel\n      when 'decimal' then model = new rowDetailsSkipLogic.DecimalResponseModel\n      else model = new rowDetailsSkipLogic.ResponseModel(type)\n    model.set 'type', type\n  constructor: (@survey) ->\n\nclass rowDetailsSkipLogic.SkipLogicCriterion extends Backbone.Model\n  serialize: () ->\n    response_model = @get('response_value')\n\n    if `response_model != null && this.get('operator') != null && this.get('question_cid') != null && response_model.isValid() !== false && response_model.get('value') != null && this._get_question()`\n      @_get_question().finalize()\n      `var questionName = this._get_question().getValue('name')`\n      return @get('operator').serialize(questionName, response_model.get('value'))\n    else\n      return ''\n  _get_question: () ->\n    @survey.findRowByCid(this.get('question_cid'), { includeGroups: true })\n\n\n  change_question: (cid) ->\n    # old_question_type = this._get_question()?.get_type() or { name: null }\n    # # compiles incorrectly (extra != null)\n    # - old_question_type = ((_ref = this._get_question()) != null ? _ref.get_type() : void 0) || { name: null };\n    # + old_question_type = ((_ref = this._get_question()) ? _ref.get_type() : void 0) || { name: null };\n    # old_question_type = @neverDefined?.increment_coffee_ref()\n    # old_question_type = (if `this._get_question()` then this._get_question().get_type()) or { name: null }\n    old_question_type = @_get_question()?.get_type?() or { name: null }\n    @set('question_cid', cid)\n    question_type = @_get_question().get_type()\n\n    if @get('operator').get_id() not in question_type.operators\n      @change_operator question_type.operators[0]\n    else if old_question_type.name != question_type.name\n      @change_operator @get('operator').get_value()\n\n    if !@get('operator').get_type().response_type? && @_get_question().response_type != @get('response_value')?.get_type()\n      return `this.change_response((response_model = this.get('response_value')) != null ? this._get_question()._isSelectQuestion() ? response_model.get('cid') : response_model.get('value') : '')`\n  change_operator: (operator) ->\n    operator = +operator\n    is_negated = false\n    if operator < 0\n      is_negated = true\n      operator *=-1\n\n    question_type = @_get_question().get_type()\n\n    if !(operator in question_type.operators)\n      return\n\n    type = $skipLogicHelpers.operator_types[operator - 1]\n    symbol = type.symbol[type.parser_name[+is_negated]]\n    operator_model = @factory.create_operator (if type.type == 'equality' then question_type.equality_operator_type else type.type), symbol, operator\n    @set('operator', operator_model)\n\n    if (type.response_type || question_type.response_type) != @get('response_value')?.get('type')\n      # -        return this.change_response(((_ref1 = this.get('response_value')) != null ?\n      # +        return this.change_response(((_ref1 = this.get('response_value')) != null ?\n      # -           _ref1.get(this._get_question()._isSelectQuestion() ? 'cid' : 'value')\n      # -             : void 0) || '');\n      # +           this._get_question()._isSelectQuestion() ? _ref1.get('cid') : _ref1.get('value')\n      # +             : void 0) || '');\n      @change_response @get('response_value')?.get(if @_get_question()._isSelectQuestion() then 'cid' else 'value') or ''\n  get_correct_type: () ->\n    @get('operator').get_type().response_type || @_get_question().get_type().response_type\n\n  set_option_names: (options) ->\n    _.each(options, (model)->\n      if (`model.get('name') == null`)\n        model.set('name', $utils.sluggify(model.get('label')))\n    )\n    ``\n\n  change_response: (value) ->\n    response_model = @get('response_value')\n    if !response_model || response_model.get('type') != @get_correct_type()\n      response_model = @factory.create_response_model @get_correct_type()\n      @set('response_value', response_model)\n\n    if @get_correct_type() == 'dropdown'\n      current_value = `response_model ? response_model.get('cid') : null`\n      `var choicelist = this._get_question().getList()`\n      response_model.set('choicelist', choicelist)\n      choices = choicelist.options.models\n      this.set_option_names(choices)\n\n      # current_value = response_model?.get('value')\n      # choices = @_get_question().getList().options.models\n\n      # _.each choices, (model) ->\n      #   if !model.get('name')?\n      #     model.set('name', rowDetailsSkipLogic.sluggify model.get 'label')\n\n      choice_cids = _.map(choices, (model) -> model.cid)\n\n      if value in choice_cids\n        response_model.set_value value\n      else if current_value in choice_cids\n        response_model.set_value current_value\n      else\n        response_model.set_value choices[0].cid\n    else\n      response_model.set_value(value)\n  constructor: (@factory, @survey) ->\n    super()\n\n\nclass rowDetailsSkipLogic.Operator extends Backbone.Model\n  serialize: (question_name, response_value) ->\n    throw new Error(\"Not Implemented\")\n  get_value: () ->\n    val = ''\n    if @get 'is_negated'\n      val = '-'\n    val + @get 'id'\n  get_type: () ->\n    $skipLogicHelpers.operator_types[@get('id') - 1]\n  get_id: () ->\n    @get 'id'\n\nclass rowDetailsSkipLogic.EmptyOperator extends rowDetailsSkipLogic.Operator\n  serialize: () -> ''\n  constructor: () ->\n    super()\n    @set 'id', 0\n    @set 'is_negated', false\n\nclass rowDetailsSkipLogic.SkipLogicOperator extends rowDetailsSkipLogic.Operator\n  serialize: (question_name, response_value) ->\n    return '${' + question_name + '} ' + @get('symbol') + ' ' + response_value\n  constructor: (symbol) ->\n    super()\n    @set('symbol', symbol)\n    this.set('is_negated', [\n      '!=',\n      '<',\n      '<=',\n    ].indexOf(symbol) > -1)\n    # @set('is_negated', symbol == '!=')\n\nclass rowDetailsSkipLogic.TextOperator extends rowDetailsSkipLogic.SkipLogicOperator\n  serialize: (question_name, response_value) ->\n    return super(question_name, \"'\" + response_value.replace(/'/g, '\\\\\\'') + \"'\")\n\nclass rowDetailsSkipLogic.DateOperator extends rowDetailsSkipLogic.SkipLogicOperator\n  serialize: (question_name, response_value) ->\n    if `response_value.indexOf('date') == -1`\n      response_value = 'date(\\'' + response_value + '\\')';\n    return super(question_name, response_value)\n\nclass rowDetailsSkipLogic.ExistenceSkipLogicOperator extends rowDetailsSkipLogic.SkipLogicOperator\n  serialize: (question_name) ->\n    return super(question_name, \"''\")\n  constructor: (operator) ->\n    super(operator)\n    @set('is_negated', operator == '=')\n\nclass rowDetailsSkipLogic.SelectMultipleSkipLogicOperator extends rowDetailsSkipLogic.SkipLogicOperator\n  serialize: (question_name, response_value) ->\n    selected = \"selected(${\" + question_name + \"}, '\" + response_value + \"')\"\n\n    if @get('is_negated')\n      return 'not(' + selected + ')'\n    return selected\n\nclass rowDetailsSkipLogic.ResponseModel extends Backbone.Model\n  constructor: (type)->\n    super()\n    if type is 'dropdown'\n      @_set_value = @set_value\n      @set_value = (cid)->\n        choice = @get('choicelist').options.get(cid)\n        if choice\n          @_set_value(choice.get('name'))\n          @set('cid', cid)\n        ``\n  get_type: () ->\n    return @get('type')\n  set_value: (value) ->\n    @set('value', value, validate: true)\n\nclass rowDetailsSkipLogic.IntegerResponseModel extends rowDetailsSkipLogic.ResponseModel\n  validation:\n    value:\n      pattern: /^-?\\d+$/\n      msg: 'Number must be integer'\n  set_value: (value)->\n    if value is ''\n      value = `undefined`\n    this.set 'value', value, validate: !!value\n\nclass rowDetailsSkipLogic.DecimalResponseModel extends rowDetailsSkipLogic.ResponseModel\n  validation:\n    value:\n      pattern: 'number'\n      msg: 'Number must be decimal'\n  set_value: (value) ->\n    `function value_is_not_number() {\n      return typeof value !== 'number';\n    }`\n\n    if typeof value is 'undefined' or value is ''\n      value = null\n    else\n      if value_is_not_number()\n        value = value.replace(/\\s/g, '')\n        value = +value || value\n\n      if value_is_not_number()\n        value = +value.replace(',', '.') || value\n\n      if value_is_not_number()\n        if value.lastIndexOf(',') > value.lastIndexOf('.')\n          value = +value.replace(/\\./g, '').replace(',', '.')\n        else\n          value = +value.replace(',', '')\n\n      # if value.lastIndexOf(',') > value.lastIndexOf('.')\n      #   final_value = +(value.replace(/\\./g, '').replace(',', '.'))\n      # else\n      #   final_value = +(value.replace(',', ''))\n    @set('value', value, validate: true)\n\nclass rowDetailsSkipLogic.DateResponseModel extends rowDetailsSkipLogic.ResponseModel\n  validation:\n    value:\n      pattern: /date\\(\\'\\d{4}-\\d{2}-\\d{2}\\'\\)/\n  set_value: (value) ->\n    if /^\\d{4}-\\d{2}-\\d{2}$/.test(value)\n      value = \"date('\" + value + \"')\"\n    @set('value', value, validate: true)\n\nmodule.exports = rowDetailsSkipLogic\n"],"sourceRoot":""}